# typed: strong

module Orb
  module Models
    class EventSearchResponse < Orb::BaseModel
      sig { returns(T::Array[Orb::Models::EventSearchResponse::Data]) }
      def data
      end

      sig do
        params(_: T::Array[Orb::Models::EventSearchResponse::Data])
          .returns(T::Array[Orb::Models::EventSearchResponse::Data])
      end
      def data=(_)
      end

      sig { params(data: T::Array[Orb::Models::EventSearchResponse::Data]).returns(T.attached_class) }
      def self.new(data:)
      end

      sig { override.returns({data: T::Array[Orb::Models::EventSearchResponse::Data]}) }
      def to_hash
      end

      class Data < Orb::BaseModel
        # A unique value, generated by the client, that is used to de-duplicate events.
        #   Exactly one event with a given idempotency key will be ingested, which allows
        #   for safe request retries.
        sig { returns(String) }
        def id
        end

        sig { params(_: String).returns(String) }
        def id=(_)
        end

        # The Orb Customer identifier
        sig { returns(T.nilable(String)) }
        def customer_id
        end

        sig { params(_: T.nilable(String)).returns(T.nilable(String)) }
        def customer_id=(_)
        end

        # A boolean indicating whether the event is currently deprecated.
        sig { returns(T::Boolean) }
        def deprecated
        end

        sig { params(_: T::Boolean).returns(T::Boolean) }
        def deprecated=(_)
        end

        # A name to meaningfully identify the action or event type.
        sig { returns(String) }
        def event_name
        end

        sig { params(_: String).returns(String) }
        def event_name=(_)
        end

        # An alias for the Orb customer, whose mapping is specified when creating the
        #   customer
        sig { returns(T.nilable(String)) }
        def external_customer_id
        end

        sig { params(_: T.nilable(String)).returns(T.nilable(String)) }
        def external_customer_id=(_)
        end

        # A dictionary of custom properties. Values in this dictionary must be numeric,
        #   boolean, or strings. Nested dictionaries are disallowed.
        sig { returns(T.anything) }
        def properties
        end

        sig { params(_: T.anything).returns(T.anything) }
        def properties=(_)
        end

        # An ISO 8601 format date with no timezone offset (i.e. UTC). This should
        #   represent the time that usage was recorded, and is particularly important to
        #   attribute usage to a given billing period.
        sig { returns(Time) }
        def timestamp
        end

        sig { params(_: Time).returns(Time) }
        def timestamp=(_)
        end

        # The [Event](/core-concepts#event) resource represents a usage event that has
        #   been created for a customer. Events are the core of Orb's usage-based billing
        #   model, and are used to calculate the usage charges for a given billing period.
        sig do
          params(
            id: String,
            customer_id: T.nilable(String),
            deprecated: T::Boolean,
            event_name: String,
            external_customer_id: T.nilable(String),
            properties: T.anything,
            timestamp: Time
          )
            .returns(T.attached_class)
        end
        def self.new(id:, customer_id:, deprecated:, event_name:, external_customer_id:, properties:, timestamp:)
        end

        sig do
          override
            .returns(
              {
                id: String,
                customer_id: T.nilable(String),
                deprecated: T::Boolean,
                event_name: String,
                external_customer_id: T.nilable(String),
                properties: T.anything,
                timestamp: Time
              }
            )
        end
        def to_hash
        end
      end
    end
  end
end
