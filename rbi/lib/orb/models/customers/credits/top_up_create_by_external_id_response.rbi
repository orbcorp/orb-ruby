# typed: strong

module Orb
  module Models
    module Customers
      module Credits
        class TopUpCreateByExternalIDResponse < Orb::BaseModel
          sig { returns(String) }
          def id
          end

          sig { params(_: String).returns(String) }
          def id=(_)
          end

          # The amount to increment when the threshold is reached.
          sig { returns(String) }
          def amount
          end

          sig { params(_: String).returns(String) }
          def amount=(_)
          end

          # The currency or custom pricing unit to use for this top-up. If this is a
          #   real-world currency, it must match the customer's invoicing currency.
          sig { returns(String) }
          def currency
          end

          sig { params(_: String).returns(String) }
          def currency=(_)
          end

          # Settings for invoices generated by triggered top-ups.
          sig { returns(Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings) }
          def invoice_settings
          end

          sig do
            params(_: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings)
              .returns(Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings)
          end
          def invoice_settings=(_)
          end

          # How much, in the customer's currency, to charge for each unit.
          sig { returns(String) }
          def per_unit_cost_basis
          end

          sig { params(_: String).returns(String) }
          def per_unit_cost_basis=(_)
          end

          # The threshold at which to trigger the top-up. If the balance is at or below this
          #   threshold, the top-up will be triggered.
          sig { returns(String) }
          def threshold
          end

          sig { params(_: String).returns(String) }
          def threshold=(_)
          end

          # The number of days or months after which the top-up expires. If unspecified, it
          #   does not expire.
          sig { returns(T.nilable(Integer)) }
          def expires_after
          end

          sig { params(_: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def expires_after=(_)
          end

          # The unit of expires_after.
          sig { returns(T.nilable(Symbol)) }
          def expires_after_unit
          end

          sig { params(_: T.nilable(Symbol)).returns(T.nilable(Symbol)) }
          def expires_after_unit=(_)
          end

          sig do
            params(
              id: String,
              amount: String,
              currency: String,
              invoice_settings: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings,
              per_unit_cost_basis: String,
              threshold: String,
              expires_after: T.nilable(Integer),
              expires_after_unit: T.nilable(Symbol)
            )
              .returns(T.attached_class)
          end
          def self.new(
            id:,
            amount:,
            currency:,
            invoice_settings:,
            per_unit_cost_basis:,
            threshold:,
            expires_after: nil,
            expires_after_unit: nil
          )
          end

          sig do
            override
              .returns(
                {
                  id: String,
                  amount: String,
                  currency: String,
                  invoice_settings: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings,
                  per_unit_cost_basis: String,
                  threshold: String,
                  expires_after: T.nilable(Integer),
                  expires_after_unit: T.nilable(Symbol)
                }
              )
          end
          def to_hash
          end

          class InvoiceSettings < Orb::BaseModel
            # Whether the credits purchase invoice should auto collect with the customer's
            #   saved payment method.
            sig { returns(T::Boolean) }
            def auto_collection
            end

            sig { params(_: T::Boolean).returns(T::Boolean) }
            def auto_collection=(_)
            end

            # The net terms determines the difference between the invoice date and the issue
            #   date for the invoice. If you intend the invoice to be due on issue, set this
            #   to 0.
            sig { returns(Integer) }
            def net_terms
            end

            sig { params(_: Integer).returns(Integer) }
            def net_terms=(_)
            end

            # An optional memo to display on the invoice.
            sig { returns(T.nilable(String)) }
            def memo
            end

            sig { params(_: T.nilable(String)).returns(T.nilable(String)) }
            def memo=(_)
            end

            # If true, new credit blocks created by this top-up will require that the
            #   corresponding invoice is paid before they can be drawn down from.
            sig { returns(T.nilable(T::Boolean)) }
            def require_successful_payment
            end

            sig { params(_: T::Boolean).returns(T::Boolean) }
            def require_successful_payment=(_)
            end

            # Settings for invoices generated by triggered top-ups.
            sig do
              params(
                auto_collection: T::Boolean,
                net_terms: Integer,
                memo: T.nilable(String),
                require_successful_payment: T::Boolean
              )
                .returns(T.attached_class)
            end
            def self.new(auto_collection:, net_terms:, memo: nil, require_successful_payment: nil)
            end

            sig do
              override
                .returns(
                  {
                    auto_collection: T::Boolean,
                    net_terms: Integer,
                    memo: T.nilable(String),
                    require_successful_payment: T::Boolean
                  }
                )
            end
            def to_hash
            end
          end

          # The unit of expires_after.
          class ExpiresAfterUnit < Orb::Enum
            abstract!

            Value = type_template(:out) { {fixed: Symbol} }

            DAY = :day
            MONTH = :month
          end
        end
      end
    end
  end
end
