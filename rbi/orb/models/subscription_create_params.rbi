# typed: strong

module Orb
  module Models
    class SubscriptionCreateParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      OrHash =
        T.type_alias do
          T.any(Orb::SubscriptionCreateParams, Orb::Internal::AnyHash)
        end

      # Additional adjustments to be added to the subscription. (Only available for
      # accounts that have migrated off of legacy subscription overrides)
      sig do
        returns(
          T.nilable(T::Array[Orb::SubscriptionCreateParams::AddAdjustment])
        )
      end
      attr_accessor :add_adjustments

      # Additional prices to be added to the subscription. (Only available for accounts
      # that have migrated off of legacy subscription overrides)
      sig do
        returns(T.nilable(T::Array[Orb::SubscriptionCreateParams::AddPrice]))
      end
      attr_accessor :add_prices

      sig { returns(T.nilable(T::Boolean)) }
      attr_reader :align_billing_with_subscription_start_date

      sig do
        params(align_billing_with_subscription_start_date: T::Boolean).void
      end
      attr_writer :align_billing_with_subscription_start_date

      # Determines whether issued invoices for this subscription will automatically be
      # charged with the saved payment method on the due date. If not specified, this
      # defaults to the behavior configured for this customer.
      sig { returns(T.nilable(T::Boolean)) }
      attr_accessor :auto_collection

      sig { returns(T.nilable(String)) }
      attr_accessor :aws_region

      sig do
        returns(
          T.nilable(
            Orb::SubscriptionCreateParams::BillingCycleAnchorConfiguration
          )
        )
      end
      attr_reader :billing_cycle_anchor_configuration

      sig do
        params(
          billing_cycle_anchor_configuration:
            T.nilable(
              Orb::SubscriptionCreateParams::BillingCycleAnchorConfiguration::OrHash
            )
        ).void
      end
      attr_writer :billing_cycle_anchor_configuration

      # Redemption code to be used for this subscription. If the coupon cannot be found
      # by its redemption code, or cannot be redeemed, an error response will be
      # returned and the subscription creation or plan change will not be scheduled.
      sig { returns(T.nilable(String)) }
      attr_accessor :coupon_redemption_code

      sig { returns(T.nilable(Float)) }
      attr_accessor :credits_overage_rate

      # The currency to use for the subscription. If not specified, the invoicing
      # currency for the plan will be used.
      sig { returns(T.nilable(String)) }
      attr_accessor :currency

      sig { returns(T.nilable(String)) }
      attr_accessor :customer_id

      # Determines the default memo on this subscription's invoices. Note that if this
      # is not provided, it is determined by the plan configuration.
      sig { returns(T.nilable(String)) }
      attr_accessor :default_invoice_memo

      sig { returns(T.nilable(Time)) }
      attr_accessor :end_date

      sig { returns(T.nilable(String)) }
      attr_accessor :external_customer_id

      sig do
        returns(
          T.nilable(
            Orb::SubscriptionCreateParams::ExternalMarketplace::OrSymbol
          )
        )
      end
      attr_accessor :external_marketplace

      sig { returns(T.nilable(String)) }
      attr_accessor :external_marketplace_reporting_id

      # The external_plan_id of the plan that the given subscription should be switched
      # to. Note that either this property or `plan_id` must be specified.
      sig { returns(T.nilable(String)) }
      attr_accessor :external_plan_id

      # An additional filter to apply to usage queries. This filter must be expressed as
      # a boolean
      # [computed property](/extensibility/advanced-metrics#computed-properties). If
      # null, usage queries will not include any additional filter.
      sig { returns(T.nilable(String)) }
      attr_accessor :filter

      # The phase of the plan to start with
      sig { returns(T.nilable(Integer)) }
      attr_accessor :initial_phase_order

      # When this subscription's accrued usage reaches this threshold, an invoice will
      # be issued for the subscription. If not specified, invoices will only be issued
      # at the end of the billing period.
      sig { returns(T.nilable(String)) }
      attr_accessor :invoicing_threshold

      # User-specified key/value pairs for the resource. Individual keys can be removed
      # by setting the value to `null`, and the entire metadata mapping can be cleared
      # by setting `metadata` to `null`.
      sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
      attr_accessor :metadata

      # The name to use for the subscription. If not specified, the plan name will be
      # used.
      sig { returns(T.nilable(String)) }
      attr_accessor :name

      # The net terms determines the difference between the invoice date and the issue
      # date for the invoice. If you intend the invoice to be due on issue, set this
      # to 0. If not provided, this defaults to the value specified in the plan.
      sig { returns(T.nilable(Integer)) }
      attr_accessor :net_terms

      sig { returns(T.nilable(Float)) }
      attr_accessor :per_credit_overage_amount

      # The plan that the given subscription should be switched to. Note that either
      # this property or `external_plan_id` must be specified.
      sig { returns(T.nilable(String)) }
      attr_accessor :plan_id

      # Specifies which version of the plan to subscribe to. If null, the default
      # version will be used.
      sig { returns(T.nilable(Integer)) }
      attr_accessor :plan_version_number

      # Optionally provide a list of overrides for prices on the plan
      sig { returns(T.nilable(T::Array[T.anything])) }
      attr_accessor :price_overrides

      # Plan adjustments to be removed from the subscription. (Only available for
      # accounts that have migrated off of legacy subscription overrides)
      sig do
        returns(
          T.nilable(T::Array[Orb::SubscriptionCreateParams::RemoveAdjustment])
        )
      end
      attr_accessor :remove_adjustments

      # Plan prices to be removed from the subscription. (Only available for accounts
      # that have migrated off of legacy subscription overrides)
      sig do
        returns(T.nilable(T::Array[Orb::SubscriptionCreateParams::RemovePrice]))
      end
      attr_accessor :remove_prices

      # Plan adjustments to be replaced with additional adjustments on the subscription.
      # (Only available for accounts that have migrated off of legacy subscription
      # overrides)
      sig do
        returns(
          T.nilable(T::Array[Orb::SubscriptionCreateParams::ReplaceAdjustment])
        )
      end
      attr_accessor :replace_adjustments

      # Plan prices to be replaced with additional prices on the subscription. (Only
      # available for accounts that have migrated off of legacy subscription overrides)
      sig do
        returns(
          T.nilable(T::Array[Orb::SubscriptionCreateParams::ReplacePrice])
        )
      end
      attr_accessor :replace_prices

      sig { returns(T.nilable(Time)) }
      attr_accessor :start_date

      # The duration of the trial period in days. If not provided, this defaults to the
      # value specified in the plan. If `0` is provided, the trial on the plan will be
      # skipped.
      sig { returns(T.nilable(Integer)) }
      attr_accessor :trial_duration_days

      # A list of customer IDs whose usage events will be aggregated and billed under
      # this subscription. By default, a subscription only considers usage events
      # associated with its attached customer's customer_id. When usage_customer_ids is
      # provided, the subscription includes usage events from the specified customers
      # only. Provided usage_customer_ids must be either the customer for this
      # subscription itself, or any of that customer's children.
      sig { returns(T.nilable(T::Array[String])) }
      attr_accessor :usage_customer_ids

      sig do
        params(
          add_adjustments:
            T.nilable(
              T::Array[Orb::SubscriptionCreateParams::AddAdjustment::OrHash]
            ),
          add_prices:
            T.nilable(
              T::Array[Orb::SubscriptionCreateParams::AddPrice::OrHash]
            ),
          align_billing_with_subscription_start_date: T::Boolean,
          auto_collection: T.nilable(T::Boolean),
          aws_region: T.nilable(String),
          billing_cycle_anchor_configuration:
            T.nilable(
              Orb::SubscriptionCreateParams::BillingCycleAnchorConfiguration::OrHash
            ),
          coupon_redemption_code: T.nilable(String),
          credits_overage_rate: T.nilable(Float),
          currency: T.nilable(String),
          customer_id: T.nilable(String),
          default_invoice_memo: T.nilable(String),
          end_date: T.nilable(Time),
          external_customer_id: T.nilable(String),
          external_marketplace:
            T.nilable(
              Orb::SubscriptionCreateParams::ExternalMarketplace::OrSymbol
            ),
          external_marketplace_reporting_id: T.nilable(String),
          external_plan_id: T.nilable(String),
          filter: T.nilable(String),
          initial_phase_order: T.nilable(Integer),
          invoicing_threshold: T.nilable(String),
          metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
          name: T.nilable(String),
          net_terms: T.nilable(Integer),
          per_credit_overage_amount: T.nilable(Float),
          plan_id: T.nilable(String),
          plan_version_number: T.nilable(Integer),
          price_overrides: T.nilable(T::Array[T.anything]),
          remove_adjustments:
            T.nilable(
              T::Array[Orb::SubscriptionCreateParams::RemoveAdjustment::OrHash]
            ),
          remove_prices:
            T.nilable(
              T::Array[Orb::SubscriptionCreateParams::RemovePrice::OrHash]
            ),
          replace_adjustments:
            T.nilable(
              T::Array[Orb::SubscriptionCreateParams::ReplaceAdjustment::OrHash]
            ),
          replace_prices:
            T.nilable(
              T::Array[Orb::SubscriptionCreateParams::ReplacePrice::OrHash]
            ),
          start_date: T.nilable(Time),
          trial_duration_days: T.nilable(Integer),
          usage_customer_ids: T.nilable(T::Array[String]),
          request_options: Orb::RequestOptions::OrHash
        ).returns(T.attached_class)
      end
      def self.new(
        # Additional adjustments to be added to the subscription. (Only available for
        # accounts that have migrated off of legacy subscription overrides)
        add_adjustments: nil,
        # Additional prices to be added to the subscription. (Only available for accounts
        # that have migrated off of legacy subscription overrides)
        add_prices: nil,
        align_billing_with_subscription_start_date: nil,
        # Determines whether issued invoices for this subscription will automatically be
        # charged with the saved payment method on the due date. If not specified, this
        # defaults to the behavior configured for this customer.
        auto_collection: nil,
        aws_region: nil,
        billing_cycle_anchor_configuration: nil,
        # Redemption code to be used for this subscription. If the coupon cannot be found
        # by its redemption code, or cannot be redeemed, an error response will be
        # returned and the subscription creation or plan change will not be scheduled.
        coupon_redemption_code: nil,
        credits_overage_rate: nil,
        # The currency to use for the subscription. If not specified, the invoicing
        # currency for the plan will be used.
        currency: nil,
        customer_id: nil,
        # Determines the default memo on this subscription's invoices. Note that if this
        # is not provided, it is determined by the plan configuration.
        default_invoice_memo: nil,
        end_date: nil,
        external_customer_id: nil,
        external_marketplace: nil,
        external_marketplace_reporting_id: nil,
        # The external_plan_id of the plan that the given subscription should be switched
        # to. Note that either this property or `plan_id` must be specified.
        external_plan_id: nil,
        # An additional filter to apply to usage queries. This filter must be expressed as
        # a boolean
        # [computed property](/extensibility/advanced-metrics#computed-properties). If
        # null, usage queries will not include any additional filter.
        filter: nil,
        # The phase of the plan to start with
        initial_phase_order: nil,
        # When this subscription's accrued usage reaches this threshold, an invoice will
        # be issued for the subscription. If not specified, invoices will only be issued
        # at the end of the billing period.
        invoicing_threshold: nil,
        # User-specified key/value pairs for the resource. Individual keys can be removed
        # by setting the value to `null`, and the entire metadata mapping can be cleared
        # by setting `metadata` to `null`.
        metadata: nil,
        # The name to use for the subscription. If not specified, the plan name will be
        # used.
        name: nil,
        # The net terms determines the difference between the invoice date and the issue
        # date for the invoice. If you intend the invoice to be due on issue, set this
        # to 0. If not provided, this defaults to the value specified in the plan.
        net_terms: nil,
        per_credit_overage_amount: nil,
        # The plan that the given subscription should be switched to. Note that either
        # this property or `external_plan_id` must be specified.
        plan_id: nil,
        # Specifies which version of the plan to subscribe to. If null, the default
        # version will be used.
        plan_version_number: nil,
        # Optionally provide a list of overrides for prices on the plan
        price_overrides: nil,
        # Plan adjustments to be removed from the subscription. (Only available for
        # accounts that have migrated off of legacy subscription overrides)
        remove_adjustments: nil,
        # Plan prices to be removed from the subscription. (Only available for accounts
        # that have migrated off of legacy subscription overrides)
        remove_prices: nil,
        # Plan adjustments to be replaced with additional adjustments on the subscription.
        # (Only available for accounts that have migrated off of legacy subscription
        # overrides)
        replace_adjustments: nil,
        # Plan prices to be replaced with additional prices on the subscription. (Only
        # available for accounts that have migrated off of legacy subscription overrides)
        replace_prices: nil,
        start_date: nil,
        # The duration of the trial period in days. If not provided, this defaults to the
        # value specified in the plan. If `0` is provided, the trial on the plan will be
        # skipped.
        trial_duration_days: nil,
        # A list of customer IDs whose usage events will be aggregated and billed under
        # this subscription. By default, a subscription only considers usage events
        # associated with its attached customer's customer_id. When usage_customer_ids is
        # provided, the subscription includes usage events from the specified customers
        # only. Provided usage_customer_ids must be either the customer for this
        # subscription itself, or any of that customer's children.
        usage_customer_ids: nil,
        request_options: {}
      )
      end

      sig do
        override.returns(
          {
            add_adjustments:
              T.nilable(T::Array[Orb::SubscriptionCreateParams::AddAdjustment]),
            add_prices:
              T.nilable(T::Array[Orb::SubscriptionCreateParams::AddPrice]),
            align_billing_with_subscription_start_date: T::Boolean,
            auto_collection: T.nilable(T::Boolean),
            aws_region: T.nilable(String),
            billing_cycle_anchor_configuration:
              T.nilable(
                Orb::SubscriptionCreateParams::BillingCycleAnchorConfiguration
              ),
            coupon_redemption_code: T.nilable(String),
            credits_overage_rate: T.nilable(Float),
            currency: T.nilable(String),
            customer_id: T.nilable(String),
            default_invoice_memo: T.nilable(String),
            end_date: T.nilable(Time),
            external_customer_id: T.nilable(String),
            external_marketplace:
              T.nilable(
                Orb::SubscriptionCreateParams::ExternalMarketplace::OrSymbol
              ),
            external_marketplace_reporting_id: T.nilable(String),
            external_plan_id: T.nilable(String),
            filter: T.nilable(String),
            initial_phase_order: T.nilable(Integer),
            invoicing_threshold: T.nilable(String),
            metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
            name: T.nilable(String),
            net_terms: T.nilable(Integer),
            per_credit_overage_amount: T.nilable(Float),
            plan_id: T.nilable(String),
            plan_version_number: T.nilable(Integer),
            price_overrides: T.nilable(T::Array[T.anything]),
            remove_adjustments:
              T.nilable(
                T::Array[Orb::SubscriptionCreateParams::RemoveAdjustment]
              ),
            remove_prices:
              T.nilable(T::Array[Orb::SubscriptionCreateParams::RemovePrice]),
            replace_adjustments:
              T.nilable(
                T::Array[Orb::SubscriptionCreateParams::ReplaceAdjustment]
              ),
            replace_prices:
              T.nilable(T::Array[Orb::SubscriptionCreateParams::ReplacePrice]),
            start_date: T.nilable(Time),
            trial_duration_days: T.nilable(Integer),
            usage_customer_ids: T.nilable(T::Array[String]),
            request_options: Orb::RequestOptions
          }
        )
      end
      def to_hash
      end

      class AddAdjustment < Orb::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Orb::SubscriptionCreateParams::AddAdjustment,
              Orb::Internal::AnyHash
            )
          end

        # The definition of a new adjustment to create and add to the subscription.
        sig do
          returns(
            T.any(
              Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::PercentageDiscount,
              Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::UsageDiscount,
              Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::AmountDiscount,
              Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Minimum,
              Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Maximum
            )
          )
        end
        attr_accessor :adjustment

        # The end date of the adjustment interval. This is the date that the adjustment
        # will stop affecting prices on the subscription.
        sig { returns(T.nilable(Time)) }
        attr_accessor :end_date

        # The phase to add this adjustment to.
        sig { returns(T.nilable(Integer)) }
        attr_accessor :plan_phase_order

        # The start date of the adjustment interval. This is the date that the adjustment
        # will start affecting prices on the subscription. If null, the adjustment will
        # start when the phase or subscription starts.
        sig { returns(T.nilable(Time)) }
        attr_accessor :start_date

        sig do
          params(
            adjustment:
              T.any(
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::PercentageDiscount::OrHash,
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::UsageDiscount::OrHash,
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::AmountDiscount::OrHash,
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Minimum::OrHash,
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Maximum::OrHash
              ),
            end_date: T.nilable(Time),
            plan_phase_order: T.nilable(Integer),
            start_date: T.nilable(Time)
          ).returns(T.attached_class)
        end
        def self.new(
          # The definition of a new adjustment to create and add to the subscription.
          adjustment:,
          # The end date of the adjustment interval. This is the date that the adjustment
          # will stop affecting prices on the subscription.
          end_date: nil,
          # The phase to add this adjustment to.
          plan_phase_order: nil,
          # The start date of the adjustment interval. This is the date that the adjustment
          # will start affecting prices on the subscription. If null, the adjustment will
          # start when the phase or subscription starts.
          start_date: nil
        )
        end

        sig do
          override.returns(
            {
              adjustment:
                T.any(
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::PercentageDiscount,
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::UsageDiscount,
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::AmountDiscount,
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Minimum,
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Maximum
                ),
              end_date: T.nilable(Time),
              plan_phase_order: T.nilable(Integer),
              start_date: T.nilable(Time)
            }
          )
        end
        def to_hash
        end

        # The definition of a new adjustment to create and add to the subscription.
        module Adjustment
          extend Orb::Internal::Type::Union

          Variants =
            T.type_alias do
              T.any(
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::PercentageDiscount,
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::UsageDiscount,
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::AmountDiscount,
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Minimum,
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Maximum
              )
            end

          class PercentageDiscount < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::PercentageDiscount,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            sig { returns(Float) }
            attr_accessor :percentage_discount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                percentage_discount: Float,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              percentage_discount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :percentage_discount
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  percentage_discount: Float,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          class UsageDiscount < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::UsageDiscount,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            sig { returns(Float) }
            attr_accessor :usage_discount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                usage_discount: Float,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              usage_discount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :usage_discount
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  usage_discount: Float,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          class AmountDiscount < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::AmountDiscount,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            sig { returns(String) }
            attr_accessor :amount_discount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                amount_discount: String,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              amount_discount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :amount_discount
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  amount_discount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          class Minimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Minimum,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            # The item ID that revenue from this minimum will be attributed to.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(String) }
            attr_accessor :minimum_amount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                item_id: String,
                minimum_amount: String,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The item ID that revenue from this minimum will be attributed to.
              item_id:,
              minimum_amount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :minimum
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  item_id: String,
                  minimum_amount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          class Maximum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Maximum,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            sig { returns(String) }
            attr_accessor :maximum_amount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                maximum_amount: String,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              maximum_amount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :maximum
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  maximum_amount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          sig do
            override.returns(
              T::Array[
                Orb::SubscriptionCreateParams::AddAdjustment::Adjustment::Variants
              ]
            )
          end
          def self.variants
          end
        end
      end

      class AddPrice < Orb::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Orb::SubscriptionCreateParams::AddPrice,
              Orb::Internal::AnyHash
            )
          end

        # The definition of a new allocation price to create and add to the subscription.
        sig do
          returns(
            T.nilable(Orb::SubscriptionCreateParams::AddPrice::AllocationPrice)
          )
        end
        attr_reader :allocation_price

        sig do
          params(
            allocation_price:
              T.nilable(
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::OrHash
              )
          ).void
        end
        attr_writer :allocation_price

        # [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
        # price.
        sig do
          returns(
            T.nilable(
              T::Array[Orb::SubscriptionCreateParams::AddPrice::Discount]
            )
          )
        end
        attr_accessor :discounts

        # The end date of the price interval. This is the date that the price will stop
        # billing on the subscription. If null, billing will end when the phase or
        # subscription ends.
        sig { returns(T.nilable(Time)) }
        attr_accessor :end_date

        # The external price id of the price to add to the subscription.
        sig { returns(T.nilable(String)) }
        attr_accessor :external_price_id

        # [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for
        # this price.
        sig { returns(T.nilable(String)) }
        attr_accessor :maximum_amount

        # [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for
        # this price.
        sig { returns(T.nilable(String)) }
        attr_accessor :minimum_amount

        # The phase to add this price to.
        sig { returns(T.nilable(Integer)) }
        attr_accessor :plan_phase_order

        # The definition of a new price to create and add to the subscription.
        sig do
          returns(
            T.nilable(
              T.any(
                Orb::SubscriptionCreateParams::AddPrice::Price::Unit,
                Orb::SubscriptionCreateParams::AddPrice::Price::Package,
                Orb::SubscriptionCreateParams::AddPrice::Price::Matrix,
                Orb::SubscriptionCreateParams::AddPrice::Price::Tiered,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps,
                Orb::SubscriptionCreateParams::AddPrice::Price::Bps,
                Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps,
                Orb::SubscriptionCreateParams::AddPrice::Price::Bulk,
                Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum,
                Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent,
                Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration,
                Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum,
                Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration,
                Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing,
                Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing,
                Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk,
                Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum,
                Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage,
                Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered
              )
            )
          )
        end
        attr_accessor :price

        # The id of the price to add to the subscription.
        sig { returns(T.nilable(String)) }
        attr_accessor :price_id

        # The start date of the price interval. This is the date that the price will start
        # billing on the subscription. If null, billing will start when the phase or
        # subscription starts.
        sig { returns(T.nilable(Time)) }
        attr_accessor :start_date

        sig do
          params(
            allocation_price:
              T.nilable(
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::OrHash
              ),
            discounts:
              T.nilable(
                T::Array[
                  Orb::SubscriptionCreateParams::AddPrice::Discount::OrHash
                ]
              ),
            end_date: T.nilable(Time),
            external_price_id: T.nilable(String),
            maximum_amount: T.nilable(String),
            minimum_amount: T.nilable(String),
            plan_phase_order: T.nilable(Integer),
            price:
              T.nilable(
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::OrHash,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::OrHash
                )
              ),
            price_id: T.nilable(String),
            start_date: T.nilable(Time)
          ).returns(T.attached_class)
        end
        def self.new(
          # The definition of a new allocation price to create and add to the subscription.
          allocation_price: nil,
          # [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
          # price.
          discounts: nil,
          # The end date of the price interval. This is the date that the price will stop
          # billing on the subscription. If null, billing will end when the phase or
          # subscription ends.
          end_date: nil,
          # The external price id of the price to add to the subscription.
          external_price_id: nil,
          # [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for
          # this price.
          maximum_amount: nil,
          # [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for
          # this price.
          minimum_amount: nil,
          # The phase to add this price to.
          plan_phase_order: nil,
          # The definition of a new price to create and add to the subscription.
          price: nil,
          # The id of the price to add to the subscription.
          price_id: nil,
          # The start date of the price interval. This is the date that the price will start
          # billing on the subscription. If null, billing will start when the phase or
          # subscription starts.
          start_date: nil
        )
        end

        sig do
          override.returns(
            {
              allocation_price:
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice
                ),
              discounts:
                T.nilable(
                  T::Array[Orb::SubscriptionCreateParams::AddPrice::Discount]
                ),
              end_date: T.nilable(Time),
              external_price_id: T.nilable(String),
              maximum_amount: T.nilable(String),
              minimum_amount: T.nilable(String),
              plan_phase_order: T.nilable(Integer),
              price:
                T.nilable(
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent,
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing,
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered
                  )
                ),
              price_id: T.nilable(String),
              start_date: T.nilable(Time)
            }
          )
        end
        def to_hash
        end

        class AllocationPrice < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice,
                Orb::Internal::AnyHash
              )
            end

          # An amount of the currency to allocate to the customer at the specified cadence.
          sig { returns(String) }
          attr_accessor :amount

          # The cadence at which to allocate the amount to the customer.
          sig do
            returns(
              Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # An ISO 4217 currency string or a custom pricing unit identifier in which to bill
          # this price.
          sig { returns(String) }
          attr_accessor :currency

          # The custom expiration for the allocation.
          sig do
            returns(
              T.nilable(
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration
              )
            )
          end
          attr_reader :custom_expiration

          sig do
            params(
              custom_expiration:
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::OrHash
                )
            ).void
          end
          attr_writer :custom_expiration

          # Whether the allocated amount should expire at the end of the cadence or roll
          # over to the next period. Set to null if using custom_expiration.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :expires_at_end_of_cadence

          # The definition of a new allocation price to create and add to the subscription.
          sig do
            params(
              amount: String,
              cadence:
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::OrSymbol,
              currency: String,
              custom_expiration:
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::OrHash
                ),
              expires_at_end_of_cadence: T.nilable(T::Boolean)
            ).returns(T.attached_class)
          end
          def self.new(
            # An amount of the currency to allocate to the customer at the specified cadence.
            amount:,
            # The cadence at which to allocate the amount to the customer.
            cadence:,
            # An ISO 4217 currency string or a custom pricing unit identifier in which to bill
            # this price.
            currency:,
            # The custom expiration for the allocation.
            custom_expiration: nil,
            # Whether the allocated amount should expire at the end of the cadence or roll
            # over to the next period. Set to null if using custom_expiration.
            expires_at_end_of_cadence: nil
          )
          end

          sig do
            override.returns(
              {
                amount: String,
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::OrSymbol,
                currency: String,
                custom_expiration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration
                  ),
                expires_at_end_of_cadence: T.nilable(T::Boolean)
              }
            )
          end
          def to_hash
          end

          # The cadence at which to allocate the amount to the customer.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ONE_TIME =
              T.let(
                :one_time,
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
              )
            ANNUAL =
              T.let(
                :annual,
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class CustomExpiration < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Integer) }
            attr_accessor :duration

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # The custom expiration for the allocation.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(duration:, duration_unit:)
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class Discount < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::SubscriptionCreateParams::AddPrice::Discount,
                Orb::Internal::AnyHash
              )
            end

          sig do
            returns(
              Orb::SubscriptionCreateParams::AddPrice::Discount::DiscountType::OrSymbol
            )
          end
          attr_accessor :discount_type

          # Only available if discount_type is `amount`.
          sig { returns(T.nilable(String)) }
          attr_accessor :amount_discount

          # Only available if discount_type is `percentage`. This is a number between 0
          # and 1.
          sig { returns(T.nilable(Float)) }
          attr_accessor :percentage_discount

          # Only available if discount_type is `usage`. Number of usage units that this
          # discount is for
          sig { returns(T.nilable(Float)) }
          attr_accessor :usage_discount

          sig do
            params(
              discount_type:
                Orb::SubscriptionCreateParams::AddPrice::Discount::DiscountType::OrSymbol,
              amount_discount: T.nilable(String),
              percentage_discount: T.nilable(Float),
              usage_discount: T.nilable(Float)
            ).returns(T.attached_class)
          end
          def self.new(
            discount_type:,
            # Only available if discount_type is `amount`.
            amount_discount: nil,
            # Only available if discount_type is `percentage`. This is a number between 0
            # and 1.
            percentage_discount: nil,
            # Only available if discount_type is `usage`. Number of usage units that this
            # discount is for
            usage_discount: nil
          )
          end

          sig do
            override.returns(
              {
                discount_type:
                  Orb::SubscriptionCreateParams::AddPrice::Discount::DiscountType::OrSymbol,
                amount_discount: T.nilable(String),
                percentage_discount: T.nilable(Float),
                usage_discount: T.nilable(Float)
              }
            )
          end
          def to_hash
          end

          module DiscountType
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::SubscriptionCreateParams::AddPrice::Discount::DiscountType
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            PERCENTAGE =
              T.let(
                :percentage,
                Orb::SubscriptionCreateParams::AddPrice::Discount::DiscountType::TaggedSymbol
              )
            USAGE =
              T.let(
                :usage,
                Orb::SubscriptionCreateParams::AddPrice::Discount::DiscountType::TaggedSymbol
              )
            AMOUNT =
              T.let(
                :amount,
                Orb::SubscriptionCreateParams::AddPrice::Discount::DiscountType::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::SubscriptionCreateParams::AddPrice::Discount::DiscountType::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end
        end

        # The definition of a new price to create and add to the subscription.
        module Price
          extend Orb::Internal::Type::Union

          Variants =
            T.type_alias do
              T.any(
                Orb::SubscriptionCreateParams::AddPrice::Price::Unit,
                Orb::SubscriptionCreateParams::AddPrice::Price::Package,
                Orb::SubscriptionCreateParams::AddPrice::Price::Matrix,
                Orb::SubscriptionCreateParams::AddPrice::Price::Tiered,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps,
                Orb::SubscriptionCreateParams::AddPrice::Price::Bps,
                Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps,
                Orb::SubscriptionCreateParams::AddPrice::Price::Bulk,
                Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum,
                Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent,
                Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration,
                Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum,
                Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration,
                Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing,
                Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing,
                Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk,
                Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum,
                Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage,
                Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation,
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum,
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered
              )
            end

          class Unit < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Unit::UnitConfig
              )
            end
            attr_reader :unit_config

            sig do
              params(
                unit_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::UnitConfig::OrHash
              ).void
            end
            attr_writer :unit_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::OrSymbol,
                item_id: String,
                name: String,
                unit_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::UnitConfig::OrHash,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              unit_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :unit
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  unit_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::UnitConfig,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class UnitConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::UnitConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Rate per unit of usage
              sig { returns(String) }
              attr_accessor :unit_amount

              sig { params(unit_amount: String).returns(T.attached_class) }
              def self.new(
                # Rate per unit of usage
                unit_amount:
              )
              end

              sig { override.returns({ unit_amount: String }) }
              def to_hash
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Package < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Package::PackageConfig
              )
            end
            attr_reader :package_config

            sig do
              params(
                package_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::PackageConfig::OrHash
              ).void
            end
            attr_writer :package_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::OrSymbol,
                item_id: String,
                name: String,
                package_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::PackageConfig::OrHash,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              package_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :package
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  package_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::PackageConfig,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class PackageConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::PackageConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # A currency amount to rate usage by
              sig { returns(String) }
              attr_accessor :package_amount

              # An integer amount to represent package size. For example, 1000 here would divide
              # usage by 1000 before multiplying by package_amount in rating
              sig { returns(Integer) }
              attr_accessor :package_size

              sig do
                params(package_amount: String, package_size: Integer).returns(
                  T.attached_class
                )
              end
              def self.new(
                # A currency amount to rate usage by
                package_amount:,
                # An integer amount to represent package size. For example, 1000 here would divide
                # usage by 1000 before multiplying by package_amount in rating
                package_size:
              )
              end

              sig do
                override.returns(
                  { package_amount: String, package_size: Integer }
                )
              end
              def to_hash
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Matrix < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig
              )
            end
            attr_reader :matrix_config

            sig do
              params(
                matrix_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig::OrHash
              ).void
            end
            attr_writer :matrix_config

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::OrSymbol,
                item_id: String,
                matrix_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig::OrHash,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              matrix_config:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :matrix
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::OrSymbol,
                  item_id: String,
                  matrix_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class MatrixConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Default per unit rate for any usage not bucketed into a specified matrix_value
              sig { returns(String) }
              attr_accessor :default_unit_amount

              # One or two event property values to evaluate matrix groups by
              sig { returns(T::Array[T.nilable(String)]) }
              attr_accessor :dimensions

              # Matrix values for specified matrix grouping keys
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue
                  ]
                )
              end
              attr_accessor :matrix_values

              sig do
                params(
                  default_unit_amount: String,
                  dimensions: T::Array[T.nilable(String)],
                  matrix_values:
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Default per unit rate for any usage not bucketed into a specified matrix_value
                default_unit_amount:,
                # One or two event property values to evaluate matrix groups by
                dimensions:,
                # Matrix values for specified matrix grouping keys
                matrix_values:
              )
              end

              sig do
                override.returns(
                  {
                    default_unit_amount: String,
                    dimensions: T::Array[T.nilable(String)],
                    matrix_values:
                      T::Array[
                        Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue
                      ]
                  }
                )
              end
              def to_hash
              end

              class MatrixValue < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue,
                      Orb::Internal::AnyHash
                    )
                  end

                # One or two matrix keys to filter usage to this Matrix value by. For example,
                # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                # instance tier.
                sig { returns(T::Array[T.nilable(String)]) }
                attr_accessor :dimension_values

                # Unit price for the specified dimension_values
                sig { returns(String) }
                attr_accessor :unit_amount

                sig do
                  params(
                    dimension_values: T::Array[T.nilable(String)],
                    unit_amount: String
                  ).returns(T.attached_class)
                end
                def self.new(
                  # One or two matrix keys to filter usage to this Matrix value by. For example,
                  # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                  # instance tier.
                  dimension_values:,
                  # Unit price for the specified dimension_values
                  unit_amount:
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[T.nilable(String)],
                      unit_amount: String
                    }
                  )
                end
                def to_hash
                end
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Tiered < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig
              )
            end
            attr_reader :tiered_config

            sig do
              params(
                tiered_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig::OrHash
              ).void
            end
            attr_writer :tiered_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig::OrHash,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class TieredConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Tiers for rating based on total usage quantities into the specified tier
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig::Tier
                  ]
                )
              end
              attr_accessor :tiers

              sig do
                params(
                  tiers:
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig::Tier::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Tiers for rating based on total usage quantities into the specified tier
                tiers:
              )
              end

              sig do
                override.returns(
                  {
                    tiers:
                      T::Array[
                        Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig::Tier
                      ]
                  }
                )
              end
              def to_hash
              end

              class Tier < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::TieredConfig::Tier,
                      Orb::Internal::AnyHash
                    )
                  end

                # Exclusive tier starting value
                sig { returns(Float) }
                attr_accessor :first_unit

                # Amount per unit
                sig { returns(String) }
                attr_accessor :unit_amount

                # Inclusive tier ending value. If null, this is treated as the last tier
                sig { returns(T.nilable(Float)) }
                attr_accessor :last_unit

                sig do
                  params(
                    first_unit: Float,
                    unit_amount: String,
                    last_unit: T.nilable(Float)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Exclusive tier starting value
                  first_unit:,
                  # Amount per unit
                  unit_amount:,
                  # Inclusive tier ending value. If null, this is treated as the last tier
                  last_unit: nil
                )
                end

                sig do
                  override.returns(
                    {
                      first_unit: Float,
                      unit_amount: String,
                      last_unit: T.nilable(Float)
                    }
                  )
                end
                def to_hash
                end
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredBps < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig
              )
            end
            attr_reader :tiered_bps_config

            sig do
              params(
                tiered_bps_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig::OrHash
              ).void
            end
            attr_writer :tiered_bps_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_bps_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig::OrHash,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_bps_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_bps
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_bps_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class TieredBpsConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
              # tiers
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier
                  ]
                )
              end
              attr_accessor :tiers

              sig do
                params(
                  tiers:
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                # tiers
                tiers:
              )
              end

              sig do
                override.returns(
                  {
                    tiers:
                      T::Array[
                        Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier
                      ]
                  }
                )
              end
              def to_hash
              end

              class Tier < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier,
                      Orb::Internal::AnyHash
                    )
                  end

                # Per-event basis point rate
                sig { returns(Float) }
                attr_accessor :bps

                # Exclusive tier starting value
                sig { returns(String) }
                attr_accessor :minimum_amount

                # Inclusive tier ending value
                sig { returns(T.nilable(String)) }
                attr_accessor :maximum_amount

                # Per unit maximum to charge
                sig { returns(T.nilable(String)) }
                attr_accessor :per_unit_maximum

                sig do
                  params(
                    bps: Float,
                    minimum_amount: String,
                    maximum_amount: T.nilable(String),
                    per_unit_maximum: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Per-event basis point rate
                  bps:,
                  # Exclusive tier starting value
                  minimum_amount:,
                  # Inclusive tier ending value
                  maximum_amount: nil,
                  # Per unit maximum to charge
                  per_unit_maximum: nil
                )
                end

                sig do
                  override.returns(
                    {
                      bps: Float,
                      minimum_amount: String,
                      maximum_amount: T.nilable(String),
                      per_unit_maximum: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Bps < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps,
                  Orb::Internal::AnyHash
                )
              end

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BpsConfig
              )
            end
            attr_reader :bps_config

            sig do
              params(
                bps_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BpsConfig::OrHash
              ).void
            end
            attr_writer :bps_config

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                bps_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BpsConfig::OrHash,
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::OrSymbol,
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              bps_config:,
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :bps
            )
            end

            sig do
              override.returns(
                {
                  bps_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BpsConfig,
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            class BpsConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BpsConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Basis point take rate per event
              sig { returns(Float) }
              attr_accessor :bps

              # Optional currency amount maximum to cap spend per event
              sig { returns(T.nilable(String)) }
              attr_accessor :per_unit_maximum

              sig do
                params(bps: Float, per_unit_maximum: T.nilable(String)).returns(
                  T.attached_class
                )
              end
              def self.new(
                # Basis point take rate per event
                bps:,
                # Optional currency amount maximum to cap spend per event
                per_unit_maximum: nil
              )
              end

              sig do
                override.returns(
                  { bps: Float, per_unit_maximum: T.nilable(String) }
                )
              end
              def to_hash
              end
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class BulkBps < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps,
                  Orb::Internal::AnyHash
                )
              end

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig
              )
            end
            attr_reader :bulk_bps_config

            sig do
              params(
                bulk_bps_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig::OrHash
              ).void
            end
            attr_writer :bulk_bps_config

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                bulk_bps_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig::OrHash,
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::OrSymbol,
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              bulk_bps_config:,
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :bulk_bps
            )
            end

            sig do
              override.returns(
                {
                  bulk_bps_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig,
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            class BulkBpsConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
              # tier based on total volume
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier
                  ]
                )
              end
              attr_accessor :tiers

              sig do
                params(
                  tiers:
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                # tier based on total volume
                tiers:
              )
              end

              sig do
                override.returns(
                  {
                    tiers:
                      T::Array[
                        Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier
                      ]
                  }
                )
              end
              def to_hash
              end

              class Tier < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier,
                      Orb::Internal::AnyHash
                    )
                  end

                # Basis points to rate on
                sig { returns(Float) }
                attr_accessor :bps

                # Upper bound for tier
                sig { returns(T.nilable(String)) }
                attr_accessor :maximum_amount

                # The maximum amount to charge for any one event
                sig { returns(T.nilable(String)) }
                attr_accessor :per_unit_maximum

                sig do
                  params(
                    bps: Float,
                    maximum_amount: T.nilable(String),
                    per_unit_maximum: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Basis points to rate on
                  bps:,
                  # Upper bound for tier
                  maximum_amount: nil,
                  # The maximum amount to charge for any one event
                  per_unit_maximum: nil
                )
                end

                sig do
                  override.returns(
                    {
                      bps: Float,
                      maximum_amount: T.nilable(String),
                      per_unit_maximum: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Bulk < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk,
                  Orb::Internal::AnyHash
                )
              end

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig
              )
            end
            attr_reader :bulk_config

            sig do
              params(
                bulk_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig::OrHash
              ).void
            end
            attr_writer :bulk_config

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                bulk_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig::OrHash,
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::OrSymbol,
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              bulk_config:,
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :bulk
            )
            end

            sig do
              override.returns(
                {
                  bulk_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig,
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            class BulkConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Bulk tiers for rating based on total usage volume
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig::Tier
                  ]
                )
              end
              attr_accessor :tiers

              sig do
                params(
                  tiers:
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig::Tier::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Bulk tiers for rating based on total usage volume
                tiers:
              )
              end

              sig do
                override.returns(
                  {
                    tiers:
                      T::Array[
                        Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig::Tier
                      ]
                  }
                )
              end
              def to_hash
              end

              class Tier < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BulkConfig::Tier,
                      Orb::Internal::AnyHash
                    )
                  end

                # Amount per unit
                sig { returns(String) }
                attr_accessor :unit_amount

                # Upper bound for this tier
                sig { returns(T.nilable(Float)) }
                attr_accessor :maximum_units

                sig do
                  params(
                    unit_amount: String,
                    maximum_units: T.nilable(Float)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Amount per unit
                  unit_amount:,
                  # Upper bound for this tier
                  maximum_units: nil
                )
                end

                sig do
                  override.returns(
                    { unit_amount: String, maximum_units: T.nilable(Float) }
                  )
                end
                def to_hash
                end
              end
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :threshold_total_amount_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                item_id: String,
                name: String,
                threshold_total_amount_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              threshold_total_amount_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :threshold_total_amount
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  threshold_total_amount_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredPackage < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :tiered_package_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_package_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_package_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_package
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_package_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredWithMinimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :tiered_with_minimum_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_with_minimum_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_with_minimum
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class UnitWithPercent < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :unit_with_percent_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::OrSymbol,
                item_id: String,
                name: String,
                unit_with_percent_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              unit_with_percent_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :unit_with_percent
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  unit_with_percent_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class PackageWithAllocation < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :package_with_allocation_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::OrSymbol,
                item_id: String,
                name: String,
                package_with_allocation_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              package_with_allocation_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :package_with_allocation
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  package_with_allocation_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredWithProration < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :tiered_with_proration_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_with_proration_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_with_proration_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_with_proration
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_with_proration_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class UnitWithProration < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :unit_with_proration_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::OrSymbol,
                item_id: String,
                name: String,
                unit_with_proration_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              unit_with_proration_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :unit_with_proration
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  unit_with_proration_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedAllocation < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_allocation_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::OrSymbol,
                grouped_allocation_config: T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_allocation_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_allocation
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::OrSymbol,
                  grouped_allocation_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_with_prorated_minimum_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                grouped_with_prorated_minimum_config:
                  T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_with_prorated_minimum_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_with_prorated_minimum
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                  grouped_with_prorated_minimum_config:
                    T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class BulkWithProration < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :bulk_with_proration_config

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                bulk_with_proration_config: T::Hash[Symbol, T.anything],
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::OrSymbol,
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              bulk_with_proration_config:,
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :bulk_with_proration
            )
            end

            sig do
              override.returns(
                {
                  bulk_with_proration_config: T::Hash[Symbol, T.anything],
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :scalable_matrix_with_unit_pricing_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                item_id: String,
                name: String,
                scalable_matrix_with_unit_pricing_config:
                  T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              scalable_matrix_with_unit_pricing_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :scalable_matrix_with_unit_pricing
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  scalable_matrix_with_unit_pricing_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :scalable_matrix_with_tiered_pricing_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                item_id: String,
                name: String,
                scalable_matrix_with_tiered_pricing_config:
                  T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              scalable_matrix_with_tiered_pricing_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :scalable_matrix_with_tiered_pricing
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  scalable_matrix_with_tiered_pricing_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :cumulative_grouped_bulk_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              cumulative_grouped_bulk_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :cumulative_grouped_bulk
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                  cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :max_group_tiered_package_config

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                item_id: String,
                max_group_tiered_package_config: T::Hash[Symbol, T.anything],
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              max_group_tiered_package_config:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :max_group_tiered_package
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                  item_id: String,
                  max_group_tiered_package_config: T::Hash[Symbol, T.anything],
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_with_metered_minimum_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                grouped_with_metered_minimum_config:
                  T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_with_metered_minimum_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_with_metered_minimum
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                  grouped_with_metered_minimum_config:
                    T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :matrix_with_display_name_config

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                item_id: String,
                matrix_with_display_name_config: T::Hash[Symbol, T.anything],
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              matrix_with_display_name_config:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :matrix_with_display_name
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                  item_id: String,
                  matrix_with_display_name_config: T::Hash[Symbol, T.anything],
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedTieredPackage < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_tiered_package_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::OrSymbol,
                grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_tiered_package_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_tiered_package
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::OrSymbol,
                  grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class MatrixWithAllocation < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig
              )
            end
            attr_reader :matrix_with_allocation_config

            sig do
              params(
                matrix_with_allocation_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::OrHash
              ).void
            end
            attr_writer :matrix_with_allocation_config

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::OrSymbol,
                item_id: String,
                matrix_with_allocation_config:
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::OrHash,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              matrix_with_allocation_config:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :matrix_with_allocation
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::OrSymbol,
                  item_id: String,
                  matrix_with_allocation_config:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class MatrixWithAllocationConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Allocation to be used to calculate the price
              sig { returns(Float) }
              attr_accessor :allocation

              # Default per unit rate for any usage not bucketed into a specified matrix_value
              sig { returns(String) }
              attr_accessor :default_unit_amount

              # One or two event property values to evaluate matrix groups by
              sig { returns(T::Array[T.nilable(String)]) }
              attr_accessor :dimensions

              # Matrix values for specified matrix grouping keys
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue
                  ]
                )
              end
              attr_accessor :matrix_values

              sig do
                params(
                  allocation: Float,
                  default_unit_amount: String,
                  dimensions: T::Array[T.nilable(String)],
                  matrix_values:
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Allocation to be used to calculate the price
                allocation:,
                # Default per unit rate for any usage not bucketed into a specified matrix_value
                default_unit_amount:,
                # One or two event property values to evaluate matrix groups by
                dimensions:,
                # Matrix values for specified matrix grouping keys
                matrix_values:
              )
              end

              sig do
                override.returns(
                  {
                    allocation: Float,
                    default_unit_amount: String,
                    dimensions: T::Array[T.nilable(String)],
                    matrix_values:
                      T::Array[
                        Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue
                      ]
                  }
                )
              end
              def to_hash
              end

              class MatrixValue < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue,
                      Orb::Internal::AnyHash
                    )
                  end

                # One or two matrix keys to filter usage to this Matrix value by. For example,
                # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                # instance tier.
                sig { returns(T::Array[T.nilable(String)]) }
                attr_accessor :dimension_values

                # Unit price for the specified dimension_values
                sig { returns(String) }
                attr_accessor :unit_amount

                sig do
                  params(
                    dimension_values: T::Array[T.nilable(String)],
                    unit_amount: String
                  ).returns(T.attached_class)
                end
                def self.new(
                  # One or two matrix keys to filter usage to this Matrix value by. For example,
                  # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                  # instance tier.
                  dimension_values:,
                  # Unit price for the specified dimension_values
                  unit_amount:
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[T.nilable(String)],
                      unit_amount: String
                    }
                  )
                end
                def to_hash
                end
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredPackageWithMinimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :tiered_package_with_minimum_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_package_with_minimum_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_package_with_minimum_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_package_with_minimum
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_package_with_minimum_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedTiered < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_tiered_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::OrSymbol,
                grouped_tiered_config: T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_tiered_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_tiered
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::OrSymbol,
                  grouped_tiered_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          sig do
            override.returns(
              T::Array[Orb::SubscriptionCreateParams::AddPrice::Price::Variants]
            )
          end
          def self.variants
          end
        end
      end

      class BillingCycleAnchorConfiguration < Orb::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Orb::SubscriptionCreateParams::BillingCycleAnchorConfiguration,
              Orb::Internal::AnyHash
            )
          end

        # The day of the month on which the billing cycle is anchored. If the maximum
        # number of days in a month is greater than this value, the last day of the month
        # is the billing cycle day (e.g. billing_cycle_day=31 for April means the billing
        # period begins on the 30th.
        sig { returns(Integer) }
        attr_accessor :day

        # The month on which the billing cycle is anchored (e.g. a quarterly price
        # anchored in February would have cycles starting February, May, August, and
        # November).
        sig { returns(T.nilable(Integer)) }
        attr_accessor :month

        # The year on which the billing cycle is anchored (e.g. a 2 year billing cycle
        # anchored on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
        sig { returns(T.nilable(Integer)) }
        attr_accessor :year

        sig do
          params(
            day: Integer,
            month: T.nilable(Integer),
            year: T.nilable(Integer)
          ).returns(T.attached_class)
        end
        def self.new(
          # The day of the month on which the billing cycle is anchored. If the maximum
          # number of days in a month is greater than this value, the last day of the month
          # is the billing cycle day (e.g. billing_cycle_day=31 for April means the billing
          # period begins on the 30th.
          day:,
          # The month on which the billing cycle is anchored (e.g. a quarterly price
          # anchored in February would have cycles starting February, May, August, and
          # November).
          month: nil,
          # The year on which the billing cycle is anchored (e.g. a 2 year billing cycle
          # anchored on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
          year: nil
        )
        end

        sig do
          override.returns(
            {
              day: Integer,
              month: T.nilable(Integer),
              year: T.nilable(Integer)
            }
          )
        end
        def to_hash
        end
      end

      module ExternalMarketplace
        extend Orb::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(Symbol, Orb::SubscriptionCreateParams::ExternalMarketplace)
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        GOOGLE =
          T.let(
            :google,
            Orb::SubscriptionCreateParams::ExternalMarketplace::TaggedSymbol
          )
        AWS =
          T.let(
            :aws,
            Orb::SubscriptionCreateParams::ExternalMarketplace::TaggedSymbol
          )
        AZURE =
          T.let(
            :azure,
            Orb::SubscriptionCreateParams::ExternalMarketplace::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[
              Orb::SubscriptionCreateParams::ExternalMarketplace::TaggedSymbol
            ]
          )
        end
        def self.values
        end
      end

      class RemoveAdjustment < Orb::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Orb::SubscriptionCreateParams::RemoveAdjustment,
              Orb::Internal::AnyHash
            )
          end

        # The id of the adjustment to remove on the subscription.
        sig { returns(String) }
        attr_accessor :adjustment_id

        sig { params(adjustment_id: String).returns(T.attached_class) }
        def self.new(
          # The id of the adjustment to remove on the subscription.
          adjustment_id:
        )
        end

        sig { override.returns({ adjustment_id: String }) }
        def to_hash
        end
      end

      class RemovePrice < Orb::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Orb::SubscriptionCreateParams::RemovePrice,
              Orb::Internal::AnyHash
            )
          end

        # The external price id of the price to remove on the subscription.
        sig { returns(T.nilable(String)) }
        attr_accessor :external_price_id

        # The id of the price to remove on the subscription.
        sig { returns(T.nilable(String)) }
        attr_accessor :price_id

        sig do
          params(
            external_price_id: T.nilable(String),
            price_id: T.nilable(String)
          ).returns(T.attached_class)
        end
        def self.new(
          # The external price id of the price to remove on the subscription.
          external_price_id: nil,
          # The id of the price to remove on the subscription.
          price_id: nil
        )
        end

        sig do
          override.returns(
            {
              external_price_id: T.nilable(String),
              price_id: T.nilable(String)
            }
          )
        end
        def to_hash
        end
      end

      class ReplaceAdjustment < Orb::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Orb::SubscriptionCreateParams::ReplaceAdjustment,
              Orb::Internal::AnyHash
            )
          end

        # The definition of a new adjustment to create and add to the subscription.
        sig do
          returns(
            T.any(
              Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::PercentageDiscount,
              Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::UsageDiscount,
              Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::AmountDiscount,
              Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Minimum,
              Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Maximum
            )
          )
        end
        attr_accessor :adjustment

        # The id of the adjustment on the plan to replace in the subscription.
        sig { returns(String) }
        attr_accessor :replaces_adjustment_id

        sig do
          params(
            adjustment:
              T.any(
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::PercentageDiscount::OrHash,
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::UsageDiscount::OrHash,
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::AmountDiscount::OrHash,
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Minimum::OrHash,
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Maximum::OrHash
              ),
            replaces_adjustment_id: String
          ).returns(T.attached_class)
        end
        def self.new(
          # The definition of a new adjustment to create and add to the subscription.
          adjustment:,
          # The id of the adjustment on the plan to replace in the subscription.
          replaces_adjustment_id:
        )
        end

        sig do
          override.returns(
            {
              adjustment:
                T.any(
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::PercentageDiscount,
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::UsageDiscount,
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::AmountDiscount,
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Minimum,
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Maximum
                ),
              replaces_adjustment_id: String
            }
          )
        end
        def to_hash
        end

        # The definition of a new adjustment to create and add to the subscription.
        module Adjustment
          extend Orb::Internal::Type::Union

          Variants =
            T.type_alias do
              T.any(
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::PercentageDiscount,
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::UsageDiscount,
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::AmountDiscount,
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Minimum,
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Maximum
              )
            end

          class PercentageDiscount < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::PercentageDiscount,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            sig { returns(Float) }
            attr_accessor :percentage_discount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                percentage_discount: Float,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              percentage_discount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :percentage_discount
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  percentage_discount: Float,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          class UsageDiscount < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::UsageDiscount,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            sig { returns(Float) }
            attr_accessor :usage_discount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                usage_discount: Float,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              usage_discount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :usage_discount
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  usage_discount: Float,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          class AmountDiscount < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::AmountDiscount,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            sig { returns(String) }
            attr_accessor :amount_discount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                amount_discount: String,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              amount_discount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :amount_discount
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  amount_discount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          class Minimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Minimum,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            # The item ID that revenue from this minimum will be attributed to.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(String) }
            attr_accessor :minimum_amount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                item_id: String,
                minimum_amount: String,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The item ID that revenue from this minimum will be attributed to.
              item_id:,
              minimum_amount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :minimum
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  item_id: String,
                  minimum_amount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          class Maximum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Maximum,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Symbol) }
            attr_accessor :adjustment_type

            sig { returns(String) }
            attr_accessor :maximum_amount

            # The set of price IDs to which this adjustment applies.
            sig { returns(T.nilable(T::Array[String])) }
            attr_accessor :applies_to_price_ids

            # When false, this adjustment will be applied to a single price. Otherwise, it
            # will be applied at the invoice level, possibly to multiple prices.
            sig { returns(T.nilable(T::Boolean)) }
            attr_reader :is_invoice_level

            sig { params(is_invoice_level: T::Boolean).void }
            attr_writer :is_invoice_level

            sig do
              params(
                maximum_amount: String,
                applies_to_price_ids: T.nilable(T::Array[String]),
                is_invoice_level: T::Boolean,
                adjustment_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              maximum_amount:,
              # The set of price IDs to which this adjustment applies.
              applies_to_price_ids: nil,
              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              is_invoice_level: nil,
              adjustment_type: :maximum
            )
            end

            sig do
              override.returns(
                {
                  adjustment_type: Symbol,
                  maximum_amount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean
                }
              )
            end
            def to_hash
            end
          end

          sig do
            override.returns(
              T::Array[
                Orb::SubscriptionCreateParams::ReplaceAdjustment::Adjustment::Variants
              ]
            )
          end
          def self.variants
          end
        end
      end

      class ReplacePrice < Orb::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Orb::SubscriptionCreateParams::ReplacePrice,
              Orb::Internal::AnyHash
            )
          end

        # The id of the price on the plan to replace in the subscription.
        sig { returns(String) }
        attr_accessor :replaces_price_id

        # The definition of a new allocation price to create and add to the subscription.
        sig do
          returns(
            T.nilable(
              Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice
            )
          )
        end
        attr_reader :allocation_price

        sig do
          params(
            allocation_price:
              T.nilable(
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::OrHash
              )
          ).void
        end
        attr_writer :allocation_price

        # [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
        # replacement price.
        sig do
          returns(
            T.nilable(
              T::Array[Orb::SubscriptionCreateParams::ReplacePrice::Discount]
            )
          )
        end
        attr_accessor :discounts

        # The external price id of the price to add to the subscription.
        sig { returns(T.nilable(String)) }
        attr_accessor :external_price_id

        # The new quantity of the price, if the price is a fixed price.
        sig { returns(T.nilable(Float)) }
        attr_accessor :fixed_price_quantity

        # [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for
        # the replacement price.
        sig { returns(T.nilable(String)) }
        attr_accessor :maximum_amount

        # [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for
        # the replacement price.
        sig { returns(T.nilable(String)) }
        attr_accessor :minimum_amount

        # The definition of a new price to create and add to the subscription.
        sig do
          returns(
            T.nilable(
              T.any(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Package,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered
              )
            )
          )
        end
        attr_accessor :price

        # The id of the price to add to the subscription.
        sig { returns(T.nilable(String)) }
        attr_accessor :price_id

        sig do
          params(
            replaces_price_id: String,
            allocation_price:
              T.nilable(
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::OrHash
              ),
            discounts:
              T.nilable(
                T::Array[
                  Orb::SubscriptionCreateParams::ReplacePrice::Discount::OrHash
                ]
              ),
            external_price_id: T.nilable(String),
            fixed_price_quantity: T.nilable(Float),
            maximum_amount: T.nilable(String),
            minimum_amount: T.nilable(String),
            price:
              T.nilable(
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::OrHash,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::OrHash
                )
              ),
            price_id: T.nilable(String)
          ).returns(T.attached_class)
        end
        def self.new(
          # The id of the price on the plan to replace in the subscription.
          replaces_price_id:,
          # The definition of a new allocation price to create and add to the subscription.
          allocation_price: nil,
          # [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
          # replacement price.
          discounts: nil,
          # The external price id of the price to add to the subscription.
          external_price_id: nil,
          # The new quantity of the price, if the price is a fixed price.
          fixed_price_quantity: nil,
          # [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for
          # the replacement price.
          maximum_amount: nil,
          # [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for
          # the replacement price.
          minimum_amount: nil,
          # The definition of a new price to create and add to the subscription.
          price: nil,
          # The id of the price to add to the subscription.
          price_id: nil
        )
        end

        sig do
          override.returns(
            {
              replaces_price_id: String,
              allocation_price:
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice
                ),
              discounts:
                T.nilable(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Discount
                  ]
                ),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              maximum_amount: T.nilable(String),
              minimum_amount: T.nilable(String),
              price:
                T.nilable(
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered
                  )
                ),
              price_id: T.nilable(String)
            }
          )
        end
        def to_hash
        end

        class AllocationPrice < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice,
                Orb::Internal::AnyHash
              )
            end

          # An amount of the currency to allocate to the customer at the specified cadence.
          sig { returns(String) }
          attr_accessor :amount

          # The cadence at which to allocate the amount to the customer.
          sig do
            returns(
              Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # An ISO 4217 currency string or a custom pricing unit identifier in which to bill
          # this price.
          sig { returns(String) }
          attr_accessor :currency

          # The custom expiration for the allocation.
          sig do
            returns(
              T.nilable(
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration
              )
            )
          end
          attr_reader :custom_expiration

          sig do
            params(
              custom_expiration:
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::OrHash
                )
            ).void
          end
          attr_writer :custom_expiration

          # Whether the allocated amount should expire at the end of the cadence or roll
          # over to the next period. Set to null if using custom_expiration.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :expires_at_end_of_cadence

          # The definition of a new allocation price to create and add to the subscription.
          sig do
            params(
              amount: String,
              cadence:
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::OrSymbol,
              currency: String,
              custom_expiration:
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::OrHash
                ),
              expires_at_end_of_cadence: T.nilable(T::Boolean)
            ).returns(T.attached_class)
          end
          def self.new(
            # An amount of the currency to allocate to the customer at the specified cadence.
            amount:,
            # The cadence at which to allocate the amount to the customer.
            cadence:,
            # An ISO 4217 currency string or a custom pricing unit identifier in which to bill
            # this price.
            currency:,
            # The custom expiration for the allocation.
            custom_expiration: nil,
            # Whether the allocated amount should expire at the end of the cadence or roll
            # over to the next period. Set to null if using custom_expiration.
            expires_at_end_of_cadence: nil
          )
          end

          sig do
            override.returns(
              {
                amount: String,
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::OrSymbol,
                currency: String,
                custom_expiration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration
                  ),
                expires_at_end_of_cadence: T.nilable(T::Boolean)
              }
            )
          end
          def to_hash
          end

          # The cadence at which to allocate the amount to the customer.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ONE_TIME =
              T.let(
                :one_time,
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
              )
            ANNUAL =
              T.let(
                :annual,
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class CustomExpiration < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(Integer) }
            attr_accessor :duration

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # The custom expiration for the allocation.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(duration:, duration_unit:)
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class Discount < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::SubscriptionCreateParams::ReplacePrice::Discount,
                Orb::Internal::AnyHash
              )
            end

          sig do
            returns(
              Orb::SubscriptionCreateParams::ReplacePrice::Discount::DiscountType::OrSymbol
            )
          end
          attr_accessor :discount_type

          # Only available if discount_type is `amount`.
          sig { returns(T.nilable(String)) }
          attr_accessor :amount_discount

          # Only available if discount_type is `percentage`. This is a number between 0
          # and 1.
          sig { returns(T.nilable(Float)) }
          attr_accessor :percentage_discount

          # Only available if discount_type is `usage`. Number of usage units that this
          # discount is for
          sig { returns(T.nilable(Float)) }
          attr_accessor :usage_discount

          sig do
            params(
              discount_type:
                Orb::SubscriptionCreateParams::ReplacePrice::Discount::DiscountType::OrSymbol,
              amount_discount: T.nilable(String),
              percentage_discount: T.nilable(Float),
              usage_discount: T.nilable(Float)
            ).returns(T.attached_class)
          end
          def self.new(
            discount_type:,
            # Only available if discount_type is `amount`.
            amount_discount: nil,
            # Only available if discount_type is `percentage`. This is a number between 0
            # and 1.
            percentage_discount: nil,
            # Only available if discount_type is `usage`. Number of usage units that this
            # discount is for
            usage_discount: nil
          )
          end

          sig do
            override.returns(
              {
                discount_type:
                  Orb::SubscriptionCreateParams::ReplacePrice::Discount::DiscountType::OrSymbol,
                amount_discount: T.nilable(String),
                percentage_discount: T.nilable(Float),
                usage_discount: T.nilable(Float)
              }
            )
          end
          def to_hash
          end

          module DiscountType
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::SubscriptionCreateParams::ReplacePrice::Discount::DiscountType
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            PERCENTAGE =
              T.let(
                :percentage,
                Orb::SubscriptionCreateParams::ReplacePrice::Discount::DiscountType::TaggedSymbol
              )
            USAGE =
              T.let(
                :usage,
                Orb::SubscriptionCreateParams::ReplacePrice::Discount::DiscountType::TaggedSymbol
              )
            AMOUNT =
              T.let(
                :amount,
                Orb::SubscriptionCreateParams::ReplacePrice::Discount::DiscountType::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::SubscriptionCreateParams::ReplacePrice::Discount::DiscountType::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end
        end

        # The definition of a new price to create and add to the subscription.
        module Price
          extend Orb::Internal::Type::Union

          Variants =
            T.type_alias do
              T.any(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Package,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum,
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered
              )
            end

          class Unit < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::UnitConfig
              )
            end
            attr_reader :unit_config

            sig do
              params(
                unit_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::UnitConfig::OrHash
              ).void
            end
            attr_writer :unit_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::OrSymbol,
                item_id: String,
                name: String,
                unit_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::UnitConfig::OrHash,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              unit_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :unit
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  unit_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::UnitConfig,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class UnitConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::UnitConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Rate per unit of usage
              sig { returns(String) }
              attr_accessor :unit_amount

              sig { params(unit_amount: String).returns(T.attached_class) }
              def self.new(
                # Rate per unit of usage
                unit_amount:
              )
              end

              sig { override.returns({ unit_amount: String }) }
              def to_hash
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Package < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::PackageConfig
              )
            end
            attr_reader :package_config

            sig do
              params(
                package_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::PackageConfig::OrHash
              ).void
            end
            attr_writer :package_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::OrSymbol,
                item_id: String,
                name: String,
                package_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::PackageConfig::OrHash,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              package_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :package
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  package_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::PackageConfig,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class PackageConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::PackageConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # A currency amount to rate usage by
              sig { returns(String) }
              attr_accessor :package_amount

              # An integer amount to represent package size. For example, 1000 here would divide
              # usage by 1000 before multiplying by package_amount in rating
              sig { returns(Integer) }
              attr_accessor :package_size

              sig do
                params(package_amount: String, package_size: Integer).returns(
                  T.attached_class
                )
              end
              def self.new(
                # A currency amount to rate usage by
                package_amount:,
                # An integer amount to represent package size. For example, 1000 here would divide
                # usage by 1000 before multiplying by package_amount in rating
                package_size:
              )
              end

              sig do
                override.returns(
                  { package_amount: String, package_size: Integer }
                )
              end
              def to_hash
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Matrix < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig
              )
            end
            attr_reader :matrix_config

            sig do
              params(
                matrix_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig::OrHash
              ).void
            end
            attr_writer :matrix_config

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::OrSymbol,
                item_id: String,
                matrix_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig::OrHash,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              matrix_config:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :matrix
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::OrSymbol,
                  item_id: String,
                  matrix_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class MatrixConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Default per unit rate for any usage not bucketed into a specified matrix_value
              sig { returns(String) }
              attr_accessor :default_unit_amount

              # One or two event property values to evaluate matrix groups by
              sig { returns(T::Array[T.nilable(String)]) }
              attr_accessor :dimensions

              # Matrix values for specified matrix grouping keys
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue
                  ]
                )
              end
              attr_accessor :matrix_values

              sig do
                params(
                  default_unit_amount: String,
                  dimensions: T::Array[T.nilable(String)],
                  matrix_values:
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Default per unit rate for any usage not bucketed into a specified matrix_value
                default_unit_amount:,
                # One or two event property values to evaluate matrix groups by
                dimensions:,
                # Matrix values for specified matrix grouping keys
                matrix_values:
              )
              end

              sig do
                override.returns(
                  {
                    default_unit_amount: String,
                    dimensions: T::Array[T.nilable(String)],
                    matrix_values:
                      T::Array[
                        Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue
                      ]
                  }
                )
              end
              def to_hash
              end

              class MatrixValue < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue,
                      Orb::Internal::AnyHash
                    )
                  end

                # One or two matrix keys to filter usage to this Matrix value by. For example,
                # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                # instance tier.
                sig { returns(T::Array[T.nilable(String)]) }
                attr_accessor :dimension_values

                # Unit price for the specified dimension_values
                sig { returns(String) }
                attr_accessor :unit_amount

                sig do
                  params(
                    dimension_values: T::Array[T.nilable(String)],
                    unit_amount: String
                  ).returns(T.attached_class)
                end
                def self.new(
                  # One or two matrix keys to filter usage to this Matrix value by. For example,
                  # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                  # instance tier.
                  dimension_values:,
                  # Unit price for the specified dimension_values
                  unit_amount:
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[T.nilable(String)],
                      unit_amount: String
                    }
                  )
                end
                def to_hash
                end
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Tiered < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig
              )
            end
            attr_reader :tiered_config

            sig do
              params(
                tiered_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig::OrHash
              ).void
            end
            attr_writer :tiered_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig::OrHash,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class TieredConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Tiers for rating based on total usage quantities into the specified tier
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig::Tier
                  ]
                )
              end
              attr_accessor :tiers

              sig do
                params(
                  tiers:
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig::Tier::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Tiers for rating based on total usage quantities into the specified tier
                tiers:
              )
              end

              sig do
                override.returns(
                  {
                    tiers:
                      T::Array[
                        Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig::Tier
                      ]
                  }
                )
              end
              def to_hash
              end

              class Tier < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::TieredConfig::Tier,
                      Orb::Internal::AnyHash
                    )
                  end

                # Exclusive tier starting value
                sig { returns(Float) }
                attr_accessor :first_unit

                # Amount per unit
                sig { returns(String) }
                attr_accessor :unit_amount

                # Inclusive tier ending value. If null, this is treated as the last tier
                sig { returns(T.nilable(Float)) }
                attr_accessor :last_unit

                sig do
                  params(
                    first_unit: Float,
                    unit_amount: String,
                    last_unit: T.nilable(Float)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Exclusive tier starting value
                  first_unit:,
                  # Amount per unit
                  unit_amount:,
                  # Inclusive tier ending value. If null, this is treated as the last tier
                  last_unit: nil
                )
                end

                sig do
                  override.returns(
                    {
                      first_unit: Float,
                      unit_amount: String,
                      last_unit: T.nilable(Float)
                    }
                  )
                end
                def to_hash
                end
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredBps < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig
              )
            end
            attr_reader :tiered_bps_config

            sig do
              params(
                tiered_bps_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::OrHash
              ).void
            end
            attr_writer :tiered_bps_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_bps_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::OrHash,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_bps_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_bps
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_bps_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class TieredBpsConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
              # tiers
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier
                  ]
                )
              end
              attr_accessor :tiers

              sig do
                params(
                  tiers:
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                # tiers
                tiers:
              )
              end

              sig do
                override.returns(
                  {
                    tiers:
                      T::Array[
                        Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier
                      ]
                  }
                )
              end
              def to_hash
              end

              class Tier < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier,
                      Orb::Internal::AnyHash
                    )
                  end

                # Per-event basis point rate
                sig { returns(Float) }
                attr_accessor :bps

                # Exclusive tier starting value
                sig { returns(String) }
                attr_accessor :minimum_amount

                # Inclusive tier ending value
                sig { returns(T.nilable(String)) }
                attr_accessor :maximum_amount

                # Per unit maximum to charge
                sig { returns(T.nilable(String)) }
                attr_accessor :per_unit_maximum

                sig do
                  params(
                    bps: Float,
                    minimum_amount: String,
                    maximum_amount: T.nilable(String),
                    per_unit_maximum: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Per-event basis point rate
                  bps:,
                  # Exclusive tier starting value
                  minimum_amount:,
                  # Inclusive tier ending value
                  maximum_amount: nil,
                  # Per unit maximum to charge
                  per_unit_maximum: nil
                )
                end

                sig do
                  override.returns(
                    {
                      bps: Float,
                      minimum_amount: String,
                      maximum_amount: T.nilable(String),
                      per_unit_maximum: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Bps < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps,
                  Orb::Internal::AnyHash
                )
              end

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BpsConfig
              )
            end
            attr_reader :bps_config

            sig do
              params(
                bps_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BpsConfig::OrHash
              ).void
            end
            attr_writer :bps_config

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                bps_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BpsConfig::OrHash,
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::OrSymbol,
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              bps_config:,
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :bps
            )
            end

            sig do
              override.returns(
                {
                  bps_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BpsConfig,
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            class BpsConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BpsConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Basis point take rate per event
              sig { returns(Float) }
              attr_accessor :bps

              # Optional currency amount maximum to cap spend per event
              sig { returns(T.nilable(String)) }
              attr_accessor :per_unit_maximum

              sig do
                params(bps: Float, per_unit_maximum: T.nilable(String)).returns(
                  T.attached_class
                )
              end
              def self.new(
                # Basis point take rate per event
                bps:,
                # Optional currency amount maximum to cap spend per event
                per_unit_maximum: nil
              )
              end

              sig do
                override.returns(
                  { bps: Float, per_unit_maximum: T.nilable(String) }
                )
              end
              def to_hash
              end
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class BulkBps < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps,
                  Orb::Internal::AnyHash
                )
              end

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig
              )
            end
            attr_reader :bulk_bps_config

            sig do
              params(
                bulk_bps_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::OrHash
              ).void
            end
            attr_writer :bulk_bps_config

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                bulk_bps_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::OrHash,
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::OrSymbol,
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              bulk_bps_config:,
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :bulk_bps
            )
            end

            sig do
              override.returns(
                {
                  bulk_bps_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            class BulkBpsConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
              # tier based on total volume
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier
                  ]
                )
              end
              attr_accessor :tiers

              sig do
                params(
                  tiers:
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                # tier based on total volume
                tiers:
              )
              end

              sig do
                override.returns(
                  {
                    tiers:
                      T::Array[
                        Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier
                      ]
                  }
                )
              end
              def to_hash
              end

              class Tier < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier,
                      Orb::Internal::AnyHash
                    )
                  end

                # Basis points to rate on
                sig { returns(Float) }
                attr_accessor :bps

                # Upper bound for tier
                sig { returns(T.nilable(String)) }
                attr_accessor :maximum_amount

                # The maximum amount to charge for any one event
                sig { returns(T.nilable(String)) }
                attr_accessor :per_unit_maximum

                sig do
                  params(
                    bps: Float,
                    maximum_amount: T.nilable(String),
                    per_unit_maximum: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Basis points to rate on
                  bps:,
                  # Upper bound for tier
                  maximum_amount: nil,
                  # The maximum amount to charge for any one event
                  per_unit_maximum: nil
                )
                end

                sig do
                  override.returns(
                    {
                      bps: Float,
                      maximum_amount: T.nilable(String),
                      per_unit_maximum: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class Bulk < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk,
                  Orb::Internal::AnyHash
                )
              end

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig
              )
            end
            attr_reader :bulk_config

            sig do
              params(
                bulk_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig::OrHash
              ).void
            end
            attr_writer :bulk_config

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                bulk_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig::OrHash,
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::OrSymbol,
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              bulk_config:,
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :bulk
            )
            end

            sig do
              override.returns(
                {
                  bulk_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig,
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            class BulkConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Bulk tiers for rating based on total usage volume
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig::Tier
                  ]
                )
              end
              attr_accessor :tiers

              sig do
                params(
                  tiers:
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig::Tier::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Bulk tiers for rating based on total usage volume
                tiers:
              )
              end

              sig do
                override.returns(
                  {
                    tiers:
                      T::Array[
                        Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig::Tier
                      ]
                  }
                )
              end
              def to_hash
              end

              class Tier < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BulkConfig::Tier,
                      Orb::Internal::AnyHash
                    )
                  end

                # Amount per unit
                sig { returns(String) }
                attr_accessor :unit_amount

                # Upper bound for this tier
                sig { returns(T.nilable(Float)) }
                attr_accessor :maximum_units

                sig do
                  params(
                    unit_amount: String,
                    maximum_units: T.nilable(Float)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Amount per unit
                  unit_amount:,
                  # Upper bound for this tier
                  maximum_units: nil
                )
                end

                sig do
                  override.returns(
                    { unit_amount: String, maximum_units: T.nilable(Float) }
                  )
                end
                def to_hash
                end
              end
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :threshold_total_amount_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                item_id: String,
                name: String,
                threshold_total_amount_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              threshold_total_amount_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :threshold_total_amount
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  threshold_total_amount_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredPackage < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :tiered_package_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_package_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_package_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_package
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_package_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredWithMinimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :tiered_with_minimum_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_with_minimum_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_with_minimum
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class UnitWithPercent < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :unit_with_percent_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::OrSymbol,
                item_id: String,
                name: String,
                unit_with_percent_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              unit_with_percent_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :unit_with_percent
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  unit_with_percent_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class PackageWithAllocation < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :package_with_allocation_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::OrSymbol,
                item_id: String,
                name: String,
                package_with_allocation_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              package_with_allocation_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :package_with_allocation
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  package_with_allocation_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredWithProration < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :tiered_with_proration_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_with_proration_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_with_proration_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_with_proration
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_with_proration_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class UnitWithProration < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :unit_with_proration_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::OrSymbol,
                item_id: String,
                name: String,
                unit_with_proration_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              unit_with_proration_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :unit_with_proration
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  unit_with_proration_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedAllocation < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_allocation_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::OrSymbol,
                grouped_allocation_config: T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_allocation_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_allocation
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::OrSymbol,
                  grouped_allocation_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_with_prorated_minimum_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                grouped_with_prorated_minimum_config:
                  T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_with_prorated_minimum_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_with_prorated_minimum
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                  grouped_with_prorated_minimum_config:
                    T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class BulkWithProration < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration,
                  Orb::Internal::AnyHash
                )
              end

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :bulk_with_proration_config

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                bulk_with_proration_config: T::Hash[Symbol, T.anything],
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::OrSymbol,
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              bulk_with_proration_config:,
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :bulk_with_proration
            )
            end

            sig do
              override.returns(
                {
                  bulk_with_proration_config: T::Hash[Symbol, T.anything],
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :scalable_matrix_with_unit_pricing_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                item_id: String,
                name: String,
                scalable_matrix_with_unit_pricing_config:
                  T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              scalable_matrix_with_unit_pricing_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :scalable_matrix_with_unit_pricing
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  scalable_matrix_with_unit_pricing_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :scalable_matrix_with_tiered_pricing_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                item_id: String,
                name: String,
                scalable_matrix_with_tiered_pricing_config:
                  T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              scalable_matrix_with_tiered_pricing_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :scalable_matrix_with_tiered_pricing
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  scalable_matrix_with_tiered_pricing_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :cumulative_grouped_bulk_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              cumulative_grouped_bulk_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :cumulative_grouped_bulk
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                  cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :max_group_tiered_package_config

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                item_id: String,
                max_group_tiered_package_config: T::Hash[Symbol, T.anything],
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              max_group_tiered_package_config:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :max_group_tiered_package
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                  item_id: String,
                  max_group_tiered_package_config: T::Hash[Symbol, T.anything],
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_with_metered_minimum_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                grouped_with_metered_minimum_config:
                  T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_with_metered_minimum_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_with_metered_minimum
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                  grouped_with_metered_minimum_config:
                    T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :matrix_with_display_name_config

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                item_id: String,
                matrix_with_display_name_config: T::Hash[Symbol, T.anything],
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              matrix_with_display_name_config:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :matrix_with_display_name
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                  item_id: String,
                  matrix_with_display_name_config: T::Hash[Symbol, T.anything],
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedTieredPackage < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_tiered_package_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::OrSymbol,
                grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_tiered_package_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_tiered_package
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::OrSymbol,
                  grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class MatrixWithAllocation < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig
              )
            end
            attr_reader :matrix_with_allocation_config

            sig do
              params(
                matrix_with_allocation_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::OrHash
              ).void
            end
            attr_writer :matrix_with_allocation_config

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::OrSymbol,
                item_id: String,
                matrix_with_allocation_config:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::OrHash,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              matrix_with_allocation_config:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :matrix_with_allocation
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::OrSymbol,
                  item_id: String,
                  matrix_with_allocation_config:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class MatrixWithAllocationConfig < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                    Orb::Internal::AnyHash
                  )
                end

              # Allocation to be used to calculate the price
              sig { returns(Float) }
              attr_accessor :allocation

              # Default per unit rate for any usage not bucketed into a specified matrix_value
              sig { returns(String) }
              attr_accessor :default_unit_amount

              # One or two event property values to evaluate matrix groups by
              sig { returns(T::Array[T.nilable(String)]) }
              attr_accessor :dimensions

              # Matrix values for specified matrix grouping keys
              sig do
                returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue
                  ]
                )
              end
              attr_accessor :matrix_values

              sig do
                params(
                  allocation: Float,
                  default_unit_amount: String,
                  dimensions: T::Array[T.nilable(String)],
                  matrix_values:
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue::OrHash
                    ]
                ).returns(T.attached_class)
              end
              def self.new(
                # Allocation to be used to calculate the price
                allocation:,
                # Default per unit rate for any usage not bucketed into a specified matrix_value
                default_unit_amount:,
                # One or two event property values to evaluate matrix groups by
                dimensions:,
                # Matrix values for specified matrix grouping keys
                matrix_values:
              )
              end

              sig do
                override.returns(
                  {
                    allocation: Float,
                    default_unit_amount: String,
                    dimensions: T::Array[T.nilable(String)],
                    matrix_values:
                      T::Array[
                        Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue
                      ]
                  }
                )
              end
              def to_hash
              end

              class MatrixValue < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue,
                      Orb::Internal::AnyHash
                    )
                  end

                # One or two matrix keys to filter usage to this Matrix value by. For example,
                # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                # instance tier.
                sig { returns(T::Array[T.nilable(String)]) }
                attr_accessor :dimension_values

                # Unit price for the specified dimension_values
                sig { returns(String) }
                attr_accessor :unit_amount

                sig do
                  params(
                    dimension_values: T::Array[T.nilable(String)],
                    unit_amount: String
                  ).returns(T.attached_class)
                end
                def self.new(
                  # One or two matrix keys to filter usage to this Matrix value by. For example,
                  # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                  # instance tier.
                  dimension_values:,
                  # Unit price for the specified dimension_values
                  unit_amount:
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[T.nilable(String)],
                      unit_amount: String
                    }
                  )
                end
                def to_hash
                end
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class TieredPackageWithMinimum < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :tiered_package_with_minimum_config

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol,
                item_id: String,
                name: String,
                tiered_package_with_minimum_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              tiered_package_with_minimum_config:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :tiered_package_with_minimum
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol,
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  tiered_package_with_minimum_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          class GroupedTiered < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered,
                  Orb::Internal::AnyHash
                )
              end

            # The cadence to bill for this price on.
            sig do
              returns(
                Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            sig { returns(T::Hash[Symbol, T.anything]) }
            attr_accessor :grouped_tiered_config

            # The id of the item the price will be associated with.
            sig { returns(String) }
            attr_accessor :item_id

            sig { returns(Symbol) }
            attr_accessor :model_type

            # The name of the price.
            sig { returns(String) }
            attr_accessor :name

            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            sig { returns(T.nilable(String)) }
            attr_accessor :billable_metric_id

            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :billed_in_advance

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration
                )
              )
            end
            attr_reader :billing_cycle_configuration

            sig do
              params(
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :billing_cycle_configuration

            # The per unit conversion rate of the price currency to the invoicing currency.
            sig { returns(T.nilable(Float)) }
            attr_accessor :conversion_rate

            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            sig { returns(T.nilable(String)) }
            attr_accessor :currency

            # For dimensional price: specifies a price group and dimension values
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration
                )
              )
            end
            attr_reader :dimensional_price_configuration

            sig do
              params(
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :dimensional_price_configuration

            # An alias for the price.
            sig { returns(T.nilable(String)) }
            attr_accessor :external_price_id

            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            sig { returns(T.nilable(Float)) }
            attr_accessor :fixed_price_quantity

            # The property used to group this price on an invoice
            sig { returns(T.nilable(String)) }
            attr_accessor :invoice_grouping_key

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              returns(
                T.nilable(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration
                )
              )
            end
            attr_reader :invoicing_cycle_configuration

            sig do
              params(
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::OrHash
                  )
              ).void
            end
            attr_writer :invoicing_cycle_configuration

            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
            attr_accessor :metadata

            # A transient ID that can be used to reference this price when adding adjustments
            # in the same API call.
            sig { returns(T.nilable(String)) }
            attr_accessor :reference_id

            sig do
              params(
                cadence:
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::OrSymbol,
                grouped_tiered_config: T::Hash[Symbol, T.anything],
                item_id: String,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::OrHash
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                dimensional_price_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration::OrHash
                  ),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::OrHash
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                reference_id: T.nilable(String),
                model_type: Symbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The cadence to bill for this price on.
              cadence:,
              grouped_tiered_config:,
              # The id of the item the price will be associated with.
              item_id:,
              # The name of the price.
              name:,
              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              billable_metric_id: nil,
              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              billed_in_advance: nil,
              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              billing_cycle_configuration: nil,
              # The per unit conversion rate of the price currency to the invoicing currency.
              conversion_rate: nil,
              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              currency: nil,
              # For dimensional price: specifies a price group and dimension values
              dimensional_price_configuration: nil,
              # An alias for the price.
              external_price_id: nil,
              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              fixed_price_quantity: nil,
              # The property used to group this price on an invoice
              invoice_grouping_key: nil,
              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              invoicing_cycle_configuration: nil,
              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              metadata: nil,
              # A transient ID that can be used to reference this price when adding adjustments
              # in the same API call.
              reference_id: nil,
              model_type: :grouped_tiered
            )
            end

            sig do
              override.returns(
                {
                  cadence:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::OrSymbol,
                  grouped_tiered_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  model_type: Symbol,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  reference_id: T.nilable(String)
                }
              )
            end
            def to_hash
            end

            # The cadence to bill for this price on.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ANNUAL =
                T.let(
                  :annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The list of dimension values matching (in order) the dimensions of the price
              # group
              sig { returns(T::Array[String]) }
              attr_accessor :dimension_values

              # The id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :dimensional_price_group_id

              # The external id of the dimensional price group to include this price in
              sig { returns(T.nilable(String)) }
              attr_accessor :external_dimensional_price_group_id

              # For dimensional price: specifies a price group and dimension values
              sig do
                params(
                  dimension_values: T::Array[String],
                  dimensional_price_group_id: T.nilable(String),
                  external_dimensional_price_group_id: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # The list of dimension values matching (in order) the dimensions of the price
                # group
                dimension_values:,
                # The id of the dimensional price group to include this price in
                dimensional_price_group_id: nil,
                # The external id of the dimensional price group to include this price in
                external_dimensional_price_group_id: nil
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration,
                    Orb::Internal::AnyHash
                  )
                end

              # The duration of the billing period.
              sig { returns(Integer) }
              attr_accessor :duration

              # The unit of billing period duration.
              sig do
                returns(
                  Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The duration of the billing period.
                duration:,
                # The unit of billing period duration.
                duration_unit:
              )
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              # The unit of billing period duration.
              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::SubscriptionCreateParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          sig do
            override.returns(
              T::Array[
                Orb::SubscriptionCreateParams::ReplacePrice::Price::Variants
              ]
            )
          end
          def self.variants
          end
        end
      end
    end
  end
end
