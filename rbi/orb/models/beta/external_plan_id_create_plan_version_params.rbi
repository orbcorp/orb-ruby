# typed: strong

module Orb
  module Models
    module Beta
      class ExternalPlanIDCreatePlanVersionParams < Orb::Internal::Type::BaseModel
        extend Orb::Internal::Type::RequestParameters::Converter
        include Orb::Internal::Type::RequestParameters

        OrHash =
          T.type_alias do
            T.any(
              Orb::Beta::ExternalPlanIDCreatePlanVersionParams,
              Orb::Internal::AnyHash
            )
          end

        # New version number.
        sig { returns(Integer) }
        attr_accessor :version

        # Additional adjustments to be added to the plan.
        sig do
          returns(
            T.nilable(
              T::Array[
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment
              ]
            )
          )
        end
        attr_accessor :add_adjustments

        # Additional prices to be added to the plan.
        sig do
          returns(
            T.nilable(
              T::Array[
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice
              ]
            )
          )
        end
        attr_accessor :add_prices

        # Adjustments to be removed from the plan.
        sig do
          returns(
            T.nilable(
              T::Array[
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemoveAdjustment
              ]
            )
          )
        end
        attr_accessor :remove_adjustments

        # Prices to be removed from the plan.
        sig do
          returns(
            T.nilable(
              T::Array[
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemovePrice
              ]
            )
          )
        end
        attr_accessor :remove_prices

        # Adjustments to be replaced with additional adjustments on the plan.
        sig do
          returns(
            T.nilable(
              T::Array[
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment
              ]
            )
          )
        end
        attr_accessor :replace_adjustments

        # Prices to be replaced with additional prices on the plan.
        sig do
          returns(
            T.nilable(
              T::Array[
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice
              ]
            )
          )
        end
        attr_accessor :replace_prices

        # Set this new plan version as the default
        sig { returns(T.nilable(T::Boolean)) }
        attr_accessor :set_as_default

        sig do
          params(
            version: Integer,
            add_adjustments:
              T.nilable(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::OrHash
                ]
              ),
            add_prices:
              T.nilable(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::OrHash
                ]
              ),
            remove_adjustments:
              T.nilable(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemoveAdjustment::OrHash
                ]
              ),
            remove_prices:
              T.nilable(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemovePrice::OrHash
                ]
              ),
            replace_adjustments:
              T.nilable(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::OrHash
                ]
              ),
            replace_prices:
              T.nilable(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::OrHash
                ]
              ),
            set_as_default: T.nilable(T::Boolean),
            request_options: Orb::RequestOptions::OrHash
          ).returns(T.attached_class)
        end
        def self.new(
          # New version number.
          version:,
          # Additional adjustments to be added to the plan.
          add_adjustments: nil,
          # Additional prices to be added to the plan.
          add_prices: nil,
          # Adjustments to be removed from the plan.
          remove_adjustments: nil,
          # Prices to be removed from the plan.
          remove_prices: nil,
          # Adjustments to be replaced with additional adjustments on the plan.
          replace_adjustments: nil,
          # Prices to be replaced with additional prices on the plan.
          replace_prices: nil,
          # Set this new plan version as the default
          set_as_default: nil,
          request_options: {}
        )
        end

        sig do
          override.returns(
            {
              version: Integer,
              add_adjustments:
                T.nilable(
                  T::Array[
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment
                  ]
                ),
              add_prices:
                T.nilable(
                  T::Array[
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice
                  ]
                ),
              remove_adjustments:
                T.nilable(
                  T::Array[
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemoveAdjustment
                  ]
                ),
              remove_prices:
                T.nilable(
                  T::Array[
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemovePrice
                  ]
                ),
              replace_adjustments:
                T.nilable(
                  T::Array[
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment
                  ]
                ),
              replace_prices:
                T.nilable(
                  T::Array[
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice
                  ]
                ),
              set_as_default: T.nilable(T::Boolean),
              request_options: Orb::RequestOptions
            }
          )
        end
        def to_hash
        end

        class AddAdjustment < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment,
                Orb::Internal::AnyHash
              )
            end

          # The definition of a new adjustment to create and add to the plan.
          sig do
            returns(
              T.any(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount,
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount,
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount,
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum,
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum
              )
            )
          end
          attr_accessor :adjustment

          # The phase to add this adjustment to.
          sig { returns(T.nilable(Integer)) }
          attr_accessor :plan_phase_order

          sig do
            params(
              adjustment:
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::OrHash,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::OrHash,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::OrHash,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::OrHash,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::OrHash
                ),
              plan_phase_order: T.nilable(Integer)
            ).returns(T.attached_class)
          end
          def self.new(
            # The definition of a new adjustment to create and add to the plan.
            adjustment:,
            # The phase to add this adjustment to.
            plan_phase_order: nil
          )
          end

          sig do
            override.returns(
              {
                adjustment:
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum
                  ),
                plan_phase_order: T.nilable(Integer)
              }
            )
          end
          def to_hash
          end

          # The definition of a new adjustment to create and add to the plan.
          module Adjustment
            extend Orb::Internal::Type::Union

            Variants =
              T.type_alias do
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum
                )
              end

            class PercentageDiscount < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              sig { returns(Float) }
              attr_accessor :percentage_discount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  percentage_discount: Float,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                percentage_discount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :percentage_discount
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    percentage_discount: Float,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            class UsageDiscount < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              sig { returns(Float) }
              attr_accessor :usage_discount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  usage_discount: Float,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                usage_discount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :usage_discount
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    usage_discount: Float,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            class AmountDiscount < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              sig { returns(String) }
              attr_accessor :amount_discount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  amount_discount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                amount_discount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :amount_discount
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    amount_discount: String,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            class Minimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              # The item ID that revenue from this minimum will be attributed to.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(String) }
              attr_accessor :minimum_amount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  item_id: String,
                  minimum_amount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The item ID that revenue from this minimum will be attributed to.
                item_id:,
                minimum_amount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :minimum
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    item_id: String,
                    minimum_amount: String,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            class Maximum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              sig { returns(String) }
              attr_accessor :maximum_amount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  maximum_amount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                maximum_amount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :maximum
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    maximum_amount: String,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            sig do
              override.returns(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Variants
                ]
              )
            end
            def self.variants
            end
          end
        end

        class AddPrice < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice,
                Orb::Internal::AnyHash
              )
            end

          # The allocation price to add to the plan.
          sig do
            returns(
              T.nilable(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice
              )
            )
          end
          attr_reader :allocation_price

          sig do
            params(
              allocation_price:
                T.nilable(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::OrHash
                )
            ).void
          end
          attr_writer :allocation_price

          # The phase to add this price to.
          sig { returns(T.nilable(Integer)) }
          attr_accessor :plan_phase_order

          # The price to add to the plan
          sig do
            returns(
              T.nilable(
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered
                )
              )
            )
          end
          attr_accessor :price

          sig do
            params(
              allocation_price:
                T.nilable(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::OrHash
                ),
              plan_phase_order: T.nilable(Integer),
              price:
                T.nilable(
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::OrHash
                  )
                )
            ).returns(T.attached_class)
          end
          def self.new(
            # The allocation price to add to the plan.
            allocation_price: nil,
            # The phase to add this price to.
            plan_phase_order: nil,
            # The price to add to the plan
            price: nil
          )
          end

          sig do
            override.returns(
              {
                allocation_price:
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice
                  ),
                plan_phase_order: T.nilable(Integer),
                price:
                  T.nilable(
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered
                    )
                  )
              }
            )
          end
          def to_hash
          end

          class AllocationPrice < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice,
                  Orb::Internal::AnyHash
                )
              end

            # An amount of the currency to allocate to the customer at the specified cadence.
            sig { returns(String) }
            attr_accessor :amount

            # The cadence at which to allocate the amount to the customer.
            sig do
              returns(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # An ISO 4217 currency string or a custom pricing unit identifier in which to bill
            # this price.
            sig { returns(String) }
            attr_accessor :currency

            # The custom expiration for the allocation.
            sig do
              returns(
                T.nilable(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration
                )
              )
            end
            attr_reader :custom_expiration

            sig do
              params(
                custom_expiration:
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::OrHash
                  )
              ).void
            end
            attr_writer :custom_expiration

            # Whether the allocated amount should expire at the end of the cadence or roll
            # over to the next period. Set to null if using custom_expiration.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :expires_at_end_of_cadence

            # The allocation price to add to the plan.
            sig do
              params(
                amount: String,
                cadence:
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::OrSymbol,
                currency: String,
                custom_expiration:
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::OrHash
                  ),
                expires_at_end_of_cadence: T.nilable(T::Boolean)
              ).returns(T.attached_class)
            end
            def self.new(
              # An amount of the currency to allocate to the customer at the specified cadence.
              amount:,
              # The cadence at which to allocate the amount to the customer.
              cadence:,
              # An ISO 4217 currency string or a custom pricing unit identifier in which to bill
              # this price.
              currency:,
              # The custom expiration for the allocation.
              custom_expiration: nil,
              # Whether the allocated amount should expire at the end of the cadence or roll
              # over to the next period. Set to null if using custom_expiration.
              expires_at_end_of_cadence: nil
            )
            end

            sig do
              override.returns(
                {
                  amount: String,
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::OrSymbol,
                  currency: String,
                  custom_expiration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration
                    ),
                  expires_at_end_of_cadence: T.nilable(T::Boolean)
                }
              )
            end
            def to_hash
            end

            # The cadence at which to allocate the amount to the customer.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
                )
              ANNUAL =
                T.let(
                  :annual,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class CustomExpiration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Integer) }
              attr_accessor :duration

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # The custom expiration for the allocation.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(duration:, duration_unit:)
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          # The price to add to the plan
          module Price
            extend Orb::Internal::Type::Union

            Variants =
              T.type_alias do
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered
                )
              end

            class Unit < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig
                )
              end
              attr_reader :unit_config

              sig do
                params(
                  unit_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig::OrHash
                ).void
              end
              attr_writer :unit_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  unit_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig::OrHash,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                unit_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :unit
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    unit_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class UnitConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Rate per unit of usage
                sig { returns(String) }
                attr_accessor :unit_amount

                sig { params(unit_amount: String).returns(T.attached_class) }
                def self.new(
                  # Rate per unit of usage
                  unit_amount:
                )
                end

                sig { override.returns({ unit_amount: String }) }
                def to_hash
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Package < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig
                )
              end
              attr_reader :package_config

              sig do
                params(
                  package_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig::OrHash
                ).void
              end
              attr_writer :package_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  package_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig::OrHash,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                package_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :package
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    package_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class PackageConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # A currency amount to rate usage by
                sig { returns(String) }
                attr_accessor :package_amount

                # An integer amount to represent package size. For example, 1000 here would divide
                # usage by 1000 before multiplying by package_amount in rating
                sig { returns(Integer) }
                attr_accessor :package_size

                sig do
                  params(package_amount: String, package_size: Integer).returns(
                    T.attached_class
                  )
                end
                def self.new(
                  # A currency amount to rate usage by
                  package_amount:,
                  # An integer amount to represent package size. For example, 1000 here would divide
                  # usage by 1000 before multiplying by package_amount in rating
                  package_size:
                )
                end

                sig do
                  override.returns(
                    { package_amount: String, package_size: Integer }
                  )
                end
                def to_hash
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Matrix < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig
                )
              end
              attr_reader :matrix_config

              sig do
                params(
                  matrix_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::OrHash
                ).void
              end
              attr_writer :matrix_config

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::OrSymbol,
                  item_id: String,
                  matrix_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::OrHash,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                matrix_config:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :matrix
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::OrSymbol,
                    item_id: String,
                    matrix_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class MatrixConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Default per unit rate for any usage not bucketed into a specified matrix_value
                sig { returns(String) }
                attr_accessor :default_unit_amount

                # One or two event property values to evaluate matrix groups by
                sig { returns(T::Array[T.nilable(String)]) }
                attr_accessor :dimensions

                # Matrix values for specified matrix grouping keys
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue
                    ]
                  )
                end
                attr_accessor :matrix_values

                sig do
                  params(
                    default_unit_amount: String,
                    dimensions: T::Array[T.nilable(String)],
                    matrix_values:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Default per unit rate for any usage not bucketed into a specified matrix_value
                  default_unit_amount:,
                  # One or two event property values to evaluate matrix groups by
                  dimensions:,
                  # Matrix values for specified matrix grouping keys
                  matrix_values:
                )
                end

                sig do
                  override.returns(
                    {
                      default_unit_amount: String,
                      dimensions: T::Array[T.nilable(String)],
                      matrix_values:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue
                        ]
                    }
                  )
                end
                def to_hash
                end

                class MatrixValue < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue,
                        Orb::Internal::AnyHash
                      )
                    end

                  # One or two matrix keys to filter usage to this Matrix value by. For example,
                  # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                  # instance tier.
                  sig { returns(T::Array[T.nilable(String)]) }
                  attr_accessor :dimension_values

                  # Unit price for the specified dimension_values
                  sig { returns(String) }
                  attr_accessor :unit_amount

                  sig do
                    params(
                      dimension_values: T::Array[T.nilable(String)],
                      unit_amount: String
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # One or two matrix keys to filter usage to this Matrix value by. For example,
                    # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                    # instance tier.
                    dimension_values:,
                    # Unit price for the specified dimension_values
                    unit_amount:
                  )
                  end

                  sig do
                    override.returns(
                      {
                        dimension_values: T::Array[T.nilable(String)],
                        unit_amount: String
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Tiered < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig
                )
              end
              attr_reader :tiered_config

              sig do
                params(
                  tiered_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::OrHash
                ).void
              end
              attr_writer :tiered_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::OrHash,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class TieredConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Tiers for rating based on total usage quantities into the specified tier
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::Tier
                    ]
                  )
                end
                attr_accessor :tiers

                sig do
                  params(
                    tiers:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::Tier::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Tiers for rating based on total usage quantities into the specified tier
                  tiers:
                )
                end

                sig do
                  override.returns(
                    {
                      tiers:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::Tier
                        ]
                    }
                  )
                end
                def to_hash
                end

                class Tier < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::Tier,
                        Orb::Internal::AnyHash
                      )
                    end

                  # Exclusive tier starting value
                  sig { returns(Float) }
                  attr_accessor :first_unit

                  # Amount per unit
                  sig { returns(String) }
                  attr_accessor :unit_amount

                  # Inclusive tier ending value. If null, this is treated as the last tier
                  sig { returns(T.nilable(Float)) }
                  attr_accessor :last_unit

                  sig do
                    params(
                      first_unit: Float,
                      unit_amount: String,
                      last_unit: T.nilable(Float)
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # Exclusive tier starting value
                    first_unit:,
                    # Amount per unit
                    unit_amount:,
                    # Inclusive tier ending value. If null, this is treated as the last tier
                    last_unit: nil
                  )
                  end

                  sig do
                    override.returns(
                      {
                        first_unit: Float,
                        unit_amount: String,
                        last_unit: T.nilable(Float)
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredBps < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig
                )
              end
              attr_reader :tiered_bps_config

              sig do
                params(
                  tiered_bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::OrHash
                ).void
              end
              attr_writer :tiered_bps_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::OrHash,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_bps_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_bps
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_bps_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class TieredBpsConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                # tiers
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier
                    ]
                  )
                end
                attr_accessor :tiers

                sig do
                  params(
                    tiers:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                  # tiers
                  tiers:
                )
                end

                sig do
                  override.returns(
                    {
                      tiers:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier
                        ]
                    }
                  )
                end
                def to_hash
                end

                class Tier < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier,
                        Orb::Internal::AnyHash
                      )
                    end

                  # Per-event basis point rate
                  sig { returns(Float) }
                  attr_accessor :bps

                  # Exclusive tier starting value
                  sig { returns(String) }
                  attr_accessor :minimum_amount

                  # Inclusive tier ending value
                  sig { returns(T.nilable(String)) }
                  attr_accessor :maximum_amount

                  # Per unit maximum to charge
                  sig { returns(T.nilable(String)) }
                  attr_accessor :per_unit_maximum

                  sig do
                    params(
                      bps: Float,
                      minimum_amount: String,
                      maximum_amount: T.nilable(String),
                      per_unit_maximum: T.nilable(String)
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # Per-event basis point rate
                    bps:,
                    # Exclusive tier starting value
                    minimum_amount:,
                    # Inclusive tier ending value
                    maximum_amount: nil,
                    # Per unit maximum to charge
                    per_unit_maximum: nil
                  )
                  end

                  sig do
                    override.returns(
                      {
                        bps: Float,
                        minimum_amount: String,
                        maximum_amount: T.nilable(String),
                        per_unit_maximum: T.nilable(String)
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Bps < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps,
                    Orb::Internal::AnyHash
                  )
                end

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig
                )
              end
              attr_reader :bps_config

              sig do
                params(
                  bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig::OrHash
                ).void
              end
              attr_writer :bps_config

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig::OrHash,
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                bps_config:,
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :bps
              )
              end

              sig do
                override.returns(
                  {
                    bps_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig,
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              class BpsConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Basis point take rate per event
                sig { returns(Float) }
                attr_accessor :bps

                # Optional currency amount maximum to cap spend per event
                sig { returns(T.nilable(String)) }
                attr_accessor :per_unit_maximum

                sig do
                  params(
                    bps: Float,
                    per_unit_maximum: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Basis point take rate per event
                  bps:,
                  # Optional currency amount maximum to cap spend per event
                  per_unit_maximum: nil
                )
                end

                sig do
                  override.returns(
                    { bps: Float, per_unit_maximum: T.nilable(String) }
                  )
                end
                def to_hash
                end
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class BulkBps < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps,
                    Orb::Internal::AnyHash
                  )
                end

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig
                )
              end
              attr_reader :bulk_bps_config

              sig do
                params(
                  bulk_bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::OrHash
                ).void
              end
              attr_writer :bulk_bps_config

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  bulk_bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::OrHash,
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                bulk_bps_config:,
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :bulk_bps
              )
              end

              sig do
                override.returns(
                  {
                    bulk_bps_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig,
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              class BulkBpsConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                # tier based on total volume
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier
                    ]
                  )
                end
                attr_accessor :tiers

                sig do
                  params(
                    tiers:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                  # tier based on total volume
                  tiers:
                )
                end

                sig do
                  override.returns(
                    {
                      tiers:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier
                        ]
                    }
                  )
                end
                def to_hash
                end

                class Tier < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier,
                        Orb::Internal::AnyHash
                      )
                    end

                  # Basis points to rate on
                  sig { returns(Float) }
                  attr_accessor :bps

                  # Upper bound for tier
                  sig { returns(T.nilable(String)) }
                  attr_accessor :maximum_amount

                  # The maximum amount to charge for any one event
                  sig { returns(T.nilable(String)) }
                  attr_accessor :per_unit_maximum

                  sig do
                    params(
                      bps: Float,
                      maximum_amount: T.nilable(String),
                      per_unit_maximum: T.nilable(String)
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # Basis points to rate on
                    bps:,
                    # Upper bound for tier
                    maximum_amount: nil,
                    # The maximum amount to charge for any one event
                    per_unit_maximum: nil
                  )
                  end

                  sig do
                    override.returns(
                      {
                        bps: Float,
                        maximum_amount: T.nilable(String),
                        per_unit_maximum: T.nilable(String)
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Bulk < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk,
                    Orb::Internal::AnyHash
                  )
                end

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig
                )
              end
              attr_reader :bulk_config

              sig do
                params(
                  bulk_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::OrHash
                ).void
              end
              attr_writer :bulk_config

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  bulk_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::OrHash,
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                bulk_config:,
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :bulk
              )
              end

              sig do
                override.returns(
                  {
                    bulk_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig,
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              class BulkConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Bulk tiers for rating based on total usage volume
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::Tier
                    ]
                  )
                end
                attr_accessor :tiers

                sig do
                  params(
                    tiers:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::Tier::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Bulk tiers for rating based on total usage volume
                  tiers:
                )
                end

                sig do
                  override.returns(
                    {
                      tiers:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::Tier
                        ]
                    }
                  )
                end
                def to_hash
                end

                class Tier < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::Tier,
                        Orb::Internal::AnyHash
                      )
                    end

                  # Amount per unit
                  sig { returns(String) }
                  attr_accessor :unit_amount

                  # Upper bound for this tier
                  sig { returns(T.nilable(Float)) }
                  attr_accessor :maximum_units

                  sig do
                    params(
                      unit_amount: String,
                      maximum_units: T.nilable(Float)
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # Amount per unit
                    unit_amount:,
                    # Upper bound for this tier
                    maximum_units: nil
                  )
                  end

                  sig do
                    override.returns(
                      { unit_amount: String, maximum_units: T.nilable(Float) }
                    )
                  end
                  def to_hash
                  end
                end
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :threshold_total_amount_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  threshold_total_amount_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                threshold_total_amount_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :threshold_total_amount
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    threshold_total_amount_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredPackage < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :tiered_package_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_package_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_package_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_package
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_package_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredWithMinimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :tiered_with_minimum_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_with_minimum_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_with_minimum
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class UnitWithPercent < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :unit_with_percent_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  unit_with_percent_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                unit_with_percent_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :unit_with_percent
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    unit_with_percent_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class PackageWithAllocation < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :package_with_allocation_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  package_with_allocation_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                package_with_allocation_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :package_with_allocation
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    package_with_allocation_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredWithProration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :tiered_with_proration_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_with_proration_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_with_proration_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_with_proration
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_with_proration_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class UnitWithProration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :unit_with_proration_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  unit_with_proration_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                unit_with_proration_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :unit_with_proration
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    unit_with_proration_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedAllocation < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_allocation_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::OrSymbol,
                  grouped_allocation_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_allocation_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_allocation
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::OrSymbol,
                    grouped_allocation_config: T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_with_prorated_minimum_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                  grouped_with_prorated_minimum_config:
                    T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_with_prorated_minimum_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_with_prorated_minimum
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                    grouped_with_prorated_minimum_config:
                      T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_with_metered_minimum_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                  grouped_with_metered_minimum_config:
                    T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_with_metered_minimum_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_with_metered_minimum
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                    grouped_with_metered_minimum_config:
                      T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :matrix_with_display_name_config

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                  item_id: String,
                  matrix_with_display_name_config: T::Hash[Symbol, T.anything],
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                matrix_with_display_name_config:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :matrix_with_display_name
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                    item_id: String,
                    matrix_with_display_name_config:
                      T::Hash[Symbol, T.anything],
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class BulkWithProration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :bulk_with_proration_config

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  bulk_with_proration_config: T::Hash[Symbol, T.anything],
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                bulk_with_proration_config:,
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :bulk_with_proration
              )
              end

              sig do
                override.returns(
                  {
                    bulk_with_proration_config: T::Hash[Symbol, T.anything],
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedTieredPackage < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_tiered_package_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::OrSymbol,
                  grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_tiered_package_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_tiered_package
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::OrSymbol,
                    grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :max_group_tiered_package_config

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                  item_id: String,
                  max_group_tiered_package_config: T::Hash[Symbol, T.anything],
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                max_group_tiered_package_config:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :max_group_tiered_package
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                    item_id: String,
                    max_group_tiered_package_config:
                      T::Hash[Symbol, T.anything],
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :scalable_matrix_with_unit_pricing_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  scalable_matrix_with_unit_pricing_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                scalable_matrix_with_unit_pricing_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :scalable_matrix_with_unit_pricing
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    scalable_matrix_with_unit_pricing_config:
                      T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :scalable_matrix_with_tiered_pricing_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  scalable_matrix_with_tiered_pricing_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                scalable_matrix_with_tiered_pricing_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :scalable_matrix_with_tiered_pricing
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    scalable_matrix_with_tiered_pricing_config:
                      T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :cumulative_grouped_bulk_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                  cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                cumulative_grouped_bulk_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :cumulative_grouped_bulk
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                    cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredPackageWithMinimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :tiered_package_with_minimum_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_package_with_minimum_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_package_with_minimum_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_package_with_minimum
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_package_with_minimum_config:
                      T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class MatrixWithAllocation < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig
                )
              end
              attr_reader :matrix_with_allocation_config

              sig do
                params(
                  matrix_with_allocation_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::OrHash
                ).void
              end
              attr_writer :matrix_with_allocation_config

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::OrSymbol,
                  item_id: String,
                  matrix_with_allocation_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::OrHash,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                matrix_with_allocation_config:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :matrix_with_allocation
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::OrSymbol,
                    item_id: String,
                    matrix_with_allocation_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class MatrixWithAllocationConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Allocation to be used to calculate the price
                sig { returns(Float) }
                attr_accessor :allocation

                # Default per unit rate for any usage not bucketed into a specified matrix_value
                sig { returns(String) }
                attr_accessor :default_unit_amount

                # One or two event property values to evaluate matrix groups by
                sig { returns(T::Array[T.nilable(String)]) }
                attr_accessor :dimensions

                # Matrix values for specified matrix grouping keys
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue
                    ]
                  )
                end
                attr_accessor :matrix_values

                sig do
                  params(
                    allocation: Float,
                    default_unit_amount: String,
                    dimensions: T::Array[T.nilable(String)],
                    matrix_values:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Allocation to be used to calculate the price
                  allocation:,
                  # Default per unit rate for any usage not bucketed into a specified matrix_value
                  default_unit_amount:,
                  # One or two event property values to evaluate matrix groups by
                  dimensions:,
                  # Matrix values for specified matrix grouping keys
                  matrix_values:
                )
                end

                sig do
                  override.returns(
                    {
                      allocation: Float,
                      default_unit_amount: String,
                      dimensions: T::Array[T.nilable(String)],
                      matrix_values:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue
                        ]
                    }
                  )
                end
                def to_hash
                end

                class MatrixValue < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue,
                        Orb::Internal::AnyHash
                      )
                    end

                  # One or two matrix keys to filter usage to this Matrix value by. For example,
                  # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                  # instance tier.
                  sig { returns(T::Array[T.nilable(String)]) }
                  attr_accessor :dimension_values

                  # Unit price for the specified dimension_values
                  sig { returns(String) }
                  attr_accessor :unit_amount

                  sig do
                    params(
                      dimension_values: T::Array[T.nilable(String)],
                      unit_amount: String
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # One or two matrix keys to filter usage to this Matrix value by. For example,
                    # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                    # instance tier.
                    dimension_values:,
                    # Unit price for the specified dimension_values
                    unit_amount:
                  )
                  end

                  sig do
                    override.returns(
                      {
                        dimension_values: T::Array[T.nilable(String)],
                        unit_amount: String
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedTiered < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_tiered_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::OrSymbol,
                  grouped_tiered_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_tiered_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_tiered
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::OrSymbol,
                    grouped_tiered_config: T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            sig do
              override.returns(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Variants
                ]
              )
            end
            def self.variants
            end
          end
        end

        class RemoveAdjustment < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemoveAdjustment,
                Orb::Internal::AnyHash
              )
            end

          # The id of the adjustment to remove from on the plan.
          sig { returns(String) }
          attr_accessor :adjustment_id

          # The phase to remove this adjustment from.
          sig { returns(T.nilable(Integer)) }
          attr_accessor :plan_phase_order

          sig do
            params(
              adjustment_id: String,
              plan_phase_order: T.nilable(Integer)
            ).returns(T.attached_class)
          end
          def self.new(
            # The id of the adjustment to remove from on the plan.
            adjustment_id:,
            # The phase to remove this adjustment from.
            plan_phase_order: nil
          )
          end

          sig do
            override.returns(
              { adjustment_id: String, plan_phase_order: T.nilable(Integer) }
            )
          end
          def to_hash
          end
        end

        class RemovePrice < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemovePrice,
                Orb::Internal::AnyHash
              )
            end

          # The id of the price to remove from the plan.
          sig { returns(String) }
          attr_accessor :price_id

          # The phase to remove this price from.
          sig { returns(T.nilable(Integer)) }
          attr_accessor :plan_phase_order

          sig do
            params(
              price_id: String,
              plan_phase_order: T.nilable(Integer)
            ).returns(T.attached_class)
          end
          def self.new(
            # The id of the price to remove from the plan.
            price_id:,
            # The phase to remove this price from.
            plan_phase_order: nil
          )
          end

          sig do
            override.returns(
              { price_id: String, plan_phase_order: T.nilable(Integer) }
            )
          end
          def to_hash
          end
        end

        class ReplaceAdjustment < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment,
                Orb::Internal::AnyHash
              )
            end

          # The definition of a new adjustment to create and add to the plan.
          sig do
            returns(
              T.any(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount,
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount,
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount,
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum,
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum
              )
            )
          end
          attr_accessor :adjustment

          # The id of the adjustment on the plan to replace in the plan.
          sig { returns(String) }
          attr_accessor :replaces_adjustment_id

          # The phase to replace this adjustment from.
          sig { returns(T.nilable(Integer)) }
          attr_accessor :plan_phase_order

          sig do
            params(
              adjustment:
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::OrHash,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::OrHash,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::OrHash,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::OrHash,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::OrHash
                ),
              replaces_adjustment_id: String,
              plan_phase_order: T.nilable(Integer)
            ).returns(T.attached_class)
          end
          def self.new(
            # The definition of a new adjustment to create and add to the plan.
            adjustment:,
            # The id of the adjustment on the plan to replace in the plan.
            replaces_adjustment_id:,
            # The phase to replace this adjustment from.
            plan_phase_order: nil
          )
          end

          sig do
            override.returns(
              {
                adjustment:
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum
                  ),
                replaces_adjustment_id: String,
                plan_phase_order: T.nilable(Integer)
              }
            )
          end
          def to_hash
          end

          # The definition of a new adjustment to create and add to the plan.
          module Adjustment
            extend Orb::Internal::Type::Union

            Variants =
              T.type_alias do
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum
                )
              end

            class PercentageDiscount < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              sig { returns(Float) }
              attr_accessor :percentage_discount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  percentage_discount: Float,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                percentage_discount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :percentage_discount
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    percentage_discount: Float,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            class UsageDiscount < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              sig { returns(Float) }
              attr_accessor :usage_discount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  usage_discount: Float,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                usage_discount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :usage_discount
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    usage_discount: Float,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            class AmountDiscount < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              sig { returns(String) }
              attr_accessor :amount_discount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  amount_discount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                amount_discount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :amount_discount
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    amount_discount: String,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            class Minimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              # The item ID that revenue from this minimum will be attributed to.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(String) }
              attr_accessor :minimum_amount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  item_id: String,
                  minimum_amount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The item ID that revenue from this minimum will be attributed to.
                item_id:,
                minimum_amount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :minimum
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    item_id: String,
                    minimum_amount: String,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            class Maximum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Symbol) }
              attr_accessor :adjustment_type

              sig { returns(String) }
              attr_accessor :maximum_amount

              # The set of price IDs to which this adjustment applies.
              sig { returns(T.nilable(T::Array[String])) }
              attr_accessor :applies_to_price_ids

              # When false, this adjustment will be applied to a single price. Otherwise, it
              # will be applied at the invoice level, possibly to multiple prices.
              sig { returns(T.nilable(T::Boolean)) }
              attr_reader :is_invoice_level

              sig { params(is_invoice_level: T::Boolean).void }
              attr_writer :is_invoice_level

              sig do
                params(
                  maximum_amount: String,
                  applies_to_price_ids: T.nilable(T::Array[String]),
                  is_invoice_level: T::Boolean,
                  adjustment_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                maximum_amount:,
                # The set of price IDs to which this adjustment applies.
                applies_to_price_ids: nil,
                # When false, this adjustment will be applied to a single price. Otherwise, it
                # will be applied at the invoice level, possibly to multiple prices.
                is_invoice_level: nil,
                adjustment_type: :maximum
              )
              end

              sig do
                override.returns(
                  {
                    adjustment_type: Symbol,
                    maximum_amount: String,
                    applies_to_price_ids: T.nilable(T::Array[String]),
                    is_invoice_level: T::Boolean
                  }
                )
              end
              def to_hash
              end
            end

            sig do
              override.returns(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Variants
                ]
              )
            end
            def self.variants
            end
          end
        end

        class ReplacePrice < Orb::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice,
                Orb::Internal::AnyHash
              )
            end

          # The id of the price on the plan to replace in the plan.
          sig { returns(String) }
          attr_accessor :replaces_price_id

          # The allocation price to add to the plan.
          sig do
            returns(
              T.nilable(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice
              )
            )
          end
          attr_reader :allocation_price

          sig do
            params(
              allocation_price:
                T.nilable(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::OrHash
                )
            ).void
          end
          attr_writer :allocation_price

          # The phase to replace this price from.
          sig { returns(T.nilable(Integer)) }
          attr_accessor :plan_phase_order

          # The price to add to the plan
          sig do
            returns(
              T.nilable(
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered
                )
              )
            )
          end
          attr_accessor :price

          sig do
            params(
              replaces_price_id: String,
              allocation_price:
                T.nilable(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::OrHash
                ),
              plan_phase_order: T.nilable(Integer),
              price:
                T.nilable(
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::OrHash,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::OrHash
                  )
                )
            ).returns(T.attached_class)
          end
          def self.new(
            # The id of the price on the plan to replace in the plan.
            replaces_price_id:,
            # The allocation price to add to the plan.
            allocation_price: nil,
            # The phase to replace this price from.
            plan_phase_order: nil,
            # The price to add to the plan
            price: nil
          )
          end

          sig do
            override.returns(
              {
                replaces_price_id: String,
                allocation_price:
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice
                  ),
                plan_phase_order: T.nilable(Integer),
                price:
                  T.nilable(
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered
                    )
                  )
              }
            )
          end
          def to_hash
          end

          class AllocationPrice < Orb::Internal::Type::BaseModel
            OrHash =
              T.type_alias do
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice,
                  Orb::Internal::AnyHash
                )
              end

            # An amount of the currency to allocate to the customer at the specified cadence.
            sig { returns(String) }
            attr_accessor :amount

            # The cadence at which to allocate the amount to the customer.
            sig do
              returns(
                Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::OrSymbol
              )
            end
            attr_accessor :cadence

            # An ISO 4217 currency string or a custom pricing unit identifier in which to bill
            # this price.
            sig { returns(String) }
            attr_accessor :currency

            # The custom expiration for the allocation.
            sig do
              returns(
                T.nilable(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration
                )
              )
            end
            attr_reader :custom_expiration

            sig do
              params(
                custom_expiration:
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::OrHash
                  )
              ).void
            end
            attr_writer :custom_expiration

            # Whether the allocated amount should expire at the end of the cadence or roll
            # over to the next period. Set to null if using custom_expiration.
            sig { returns(T.nilable(T::Boolean)) }
            attr_accessor :expires_at_end_of_cadence

            # The allocation price to add to the plan.
            sig do
              params(
                amount: String,
                cadence:
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::OrSymbol,
                currency: String,
                custom_expiration:
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::OrHash
                  ),
                expires_at_end_of_cadence: T.nilable(T::Boolean)
              ).returns(T.attached_class)
            end
            def self.new(
              # An amount of the currency to allocate to the customer at the specified cadence.
              amount:,
              # The cadence at which to allocate the amount to the customer.
              cadence:,
              # An ISO 4217 currency string or a custom pricing unit identifier in which to bill
              # this price.
              currency:,
              # The custom expiration for the allocation.
              custom_expiration: nil,
              # Whether the allocated amount should expire at the end of the cadence or roll
              # over to the next period. Set to null if using custom_expiration.
              expires_at_end_of_cadence: nil
            )
            end

            sig do
              override.returns(
                {
                  amount: String,
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::OrSymbol,
                  currency: String,
                  custom_expiration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration
                    ),
                  expires_at_end_of_cadence: T.nilable(T::Boolean)
                }
              )
            end
            def to_hash
            end

            # The cadence at which to allocate the amount to the customer.
            module Cadence
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              ONE_TIME =
                T.let(
                  :one_time,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
                )
              MONTHLY =
                T.let(
                  :monthly,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
                )
              QUARTERLY =
                T.let(
                  :quarterly,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
                )
              SEMI_ANNUAL =
                T.let(
                  :semi_annual,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
                )
              ANNUAL =
                T.let(
                  :annual,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
                )
              CUSTOM =
                T.let(
                  :custom,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::Cadence::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end

            class CustomExpiration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(Integer) }
              attr_accessor :duration

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
                )
              end
              attr_accessor :duration_unit

              # The custom expiration for the allocation.
              sig do
                params(
                  duration: Integer,
                  duration_unit:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
                ).returns(T.attached_class)
              end
              def self.new(duration:, duration_unit:)
              end

              sig do
                override.returns(
                  {
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::OrSymbol
                  }
                )
              end
              def to_hash
              end

              module DurationUnit
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                DAY =
                  T.let(
                    :day,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                  )
                MONTH =
                  T.let(
                    :month,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::DurationUnit::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end
            end
          end

          # The price to add to the plan
          module Price
            extend Orb::Internal::Type::Union

            Variants =
              T.type_alias do
                T.any(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation,
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered
                )
              end

            class Unit < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig
                )
              end
              attr_reader :unit_config

              sig do
                params(
                  unit_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig::OrHash
                ).void
              end
              attr_writer :unit_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  unit_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig::OrHash,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                unit_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :unit
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    unit_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class UnitConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Rate per unit of usage
                sig { returns(String) }
                attr_accessor :unit_amount

                sig { params(unit_amount: String).returns(T.attached_class) }
                def self.new(
                  # Rate per unit of usage
                  unit_amount:
                )
                end

                sig { override.returns({ unit_amount: String }) }
                def to_hash
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Package < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig
                )
              end
              attr_reader :package_config

              sig do
                params(
                  package_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig::OrHash
                ).void
              end
              attr_writer :package_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  package_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig::OrHash,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                package_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :package
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    package_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class PackageConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # A currency amount to rate usage by
                sig { returns(String) }
                attr_accessor :package_amount

                # An integer amount to represent package size. For example, 1000 here would divide
                # usage by 1000 before multiplying by package_amount in rating
                sig { returns(Integer) }
                attr_accessor :package_size

                sig do
                  params(package_amount: String, package_size: Integer).returns(
                    T.attached_class
                  )
                end
                def self.new(
                  # A currency amount to rate usage by
                  package_amount:,
                  # An integer amount to represent package size. For example, 1000 here would divide
                  # usage by 1000 before multiplying by package_amount in rating
                  package_size:
                )
                end

                sig do
                  override.returns(
                    { package_amount: String, package_size: Integer }
                  )
                end
                def to_hash
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Matrix < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig
                )
              end
              attr_reader :matrix_config

              sig do
                params(
                  matrix_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::OrHash
                ).void
              end
              attr_writer :matrix_config

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::OrSymbol,
                  item_id: String,
                  matrix_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::OrHash,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                matrix_config:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :matrix
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::OrSymbol,
                    item_id: String,
                    matrix_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class MatrixConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Default per unit rate for any usage not bucketed into a specified matrix_value
                sig { returns(String) }
                attr_accessor :default_unit_amount

                # One or two event property values to evaluate matrix groups by
                sig { returns(T::Array[T.nilable(String)]) }
                attr_accessor :dimensions

                # Matrix values for specified matrix grouping keys
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue
                    ]
                  )
                end
                attr_accessor :matrix_values

                sig do
                  params(
                    default_unit_amount: String,
                    dimensions: T::Array[T.nilable(String)],
                    matrix_values:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Default per unit rate for any usage not bucketed into a specified matrix_value
                  default_unit_amount:,
                  # One or two event property values to evaluate matrix groups by
                  dimensions:,
                  # Matrix values for specified matrix grouping keys
                  matrix_values:
                )
                end

                sig do
                  override.returns(
                    {
                      default_unit_amount: String,
                      dimensions: T::Array[T.nilable(String)],
                      matrix_values:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue
                        ]
                    }
                  )
                end
                def to_hash
                end

                class MatrixValue < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue,
                        Orb::Internal::AnyHash
                      )
                    end

                  # One or two matrix keys to filter usage to this Matrix value by. For example,
                  # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                  # instance tier.
                  sig { returns(T::Array[T.nilable(String)]) }
                  attr_accessor :dimension_values

                  # Unit price for the specified dimension_values
                  sig { returns(String) }
                  attr_accessor :unit_amount

                  sig do
                    params(
                      dimension_values: T::Array[T.nilable(String)],
                      unit_amount: String
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # One or two matrix keys to filter usage to this Matrix value by. For example,
                    # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                    # instance tier.
                    dimension_values:,
                    # Unit price for the specified dimension_values
                    unit_amount:
                  )
                  end

                  sig do
                    override.returns(
                      {
                        dimension_values: T::Array[T.nilable(String)],
                        unit_amount: String
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Tiered < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig
                )
              end
              attr_reader :tiered_config

              sig do
                params(
                  tiered_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::OrHash
                ).void
              end
              attr_writer :tiered_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::OrHash,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class TieredConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Tiers for rating based on total usage quantities into the specified tier
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::Tier
                    ]
                  )
                end
                attr_accessor :tiers

                sig do
                  params(
                    tiers:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::Tier::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Tiers for rating based on total usage quantities into the specified tier
                  tiers:
                )
                end

                sig do
                  override.returns(
                    {
                      tiers:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::Tier
                        ]
                    }
                  )
                end
                def to_hash
                end

                class Tier < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::Tier,
                        Orb::Internal::AnyHash
                      )
                    end

                  # Exclusive tier starting value
                  sig { returns(Float) }
                  attr_accessor :first_unit

                  # Amount per unit
                  sig { returns(String) }
                  attr_accessor :unit_amount

                  # Inclusive tier ending value. If null, this is treated as the last tier
                  sig { returns(T.nilable(Float)) }
                  attr_accessor :last_unit

                  sig do
                    params(
                      first_unit: Float,
                      unit_amount: String,
                      last_unit: T.nilable(Float)
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # Exclusive tier starting value
                    first_unit:,
                    # Amount per unit
                    unit_amount:,
                    # Inclusive tier ending value. If null, this is treated as the last tier
                    last_unit: nil
                  )
                  end

                  sig do
                    override.returns(
                      {
                        first_unit: Float,
                        unit_amount: String,
                        last_unit: T.nilable(Float)
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredBps < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig
                )
              end
              attr_reader :tiered_bps_config

              sig do
                params(
                  tiered_bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::OrHash
                ).void
              end
              attr_writer :tiered_bps_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::OrHash,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_bps_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_bps
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_bps_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class TieredBpsConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                # tiers
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier
                    ]
                  )
                end
                attr_accessor :tiers

                sig do
                  params(
                    tiers:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
                  # tiers
                  tiers:
                )
                end

                sig do
                  override.returns(
                    {
                      tiers:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier
                        ]
                    }
                  )
                end
                def to_hash
                end

                class Tier < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier,
                        Orb::Internal::AnyHash
                      )
                    end

                  # Per-event basis point rate
                  sig { returns(Float) }
                  attr_accessor :bps

                  # Exclusive tier starting value
                  sig { returns(String) }
                  attr_accessor :minimum_amount

                  # Inclusive tier ending value
                  sig { returns(T.nilable(String)) }
                  attr_accessor :maximum_amount

                  # Per unit maximum to charge
                  sig { returns(T.nilable(String)) }
                  attr_accessor :per_unit_maximum

                  sig do
                    params(
                      bps: Float,
                      minimum_amount: String,
                      maximum_amount: T.nilable(String),
                      per_unit_maximum: T.nilable(String)
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # Per-event basis point rate
                    bps:,
                    # Exclusive tier starting value
                    minimum_amount:,
                    # Inclusive tier ending value
                    maximum_amount: nil,
                    # Per unit maximum to charge
                    per_unit_maximum: nil
                  )
                  end

                  sig do
                    override.returns(
                      {
                        bps: Float,
                        minimum_amount: String,
                        maximum_amount: T.nilable(String),
                        per_unit_maximum: T.nilable(String)
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Bps < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps,
                    Orb::Internal::AnyHash
                  )
                end

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig
                )
              end
              attr_reader :bps_config

              sig do
                params(
                  bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig::OrHash
                ).void
              end
              attr_writer :bps_config

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig::OrHash,
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                bps_config:,
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :bps
              )
              end

              sig do
                override.returns(
                  {
                    bps_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig,
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              class BpsConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Basis point take rate per event
                sig { returns(Float) }
                attr_accessor :bps

                # Optional currency amount maximum to cap spend per event
                sig { returns(T.nilable(String)) }
                attr_accessor :per_unit_maximum

                sig do
                  params(
                    bps: Float,
                    per_unit_maximum: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Basis point take rate per event
                  bps:,
                  # Optional currency amount maximum to cap spend per event
                  per_unit_maximum: nil
                )
                end

                sig do
                  override.returns(
                    { bps: Float, per_unit_maximum: T.nilable(String) }
                  )
                end
                def to_hash
                end
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class BulkBps < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps,
                    Orb::Internal::AnyHash
                  )
                end

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig
                )
              end
              attr_reader :bulk_bps_config

              sig do
                params(
                  bulk_bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::OrHash
                ).void
              end
              attr_writer :bulk_bps_config

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  bulk_bps_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::OrHash,
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                bulk_bps_config:,
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :bulk_bps
              )
              end

              sig do
                override.returns(
                  {
                    bulk_bps_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              class BulkBpsConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                # tier based on total volume
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier
                    ]
                  )
                end
                attr_accessor :tiers

                sig do
                  params(
                    tiers:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                  # tier based on total volume
                  tiers:
                )
                end

                sig do
                  override.returns(
                    {
                      tiers:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier
                        ]
                    }
                  )
                end
                def to_hash
                end

                class Tier < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier,
                        Orb::Internal::AnyHash
                      )
                    end

                  # Basis points to rate on
                  sig { returns(Float) }
                  attr_accessor :bps

                  # Upper bound for tier
                  sig { returns(T.nilable(String)) }
                  attr_accessor :maximum_amount

                  # The maximum amount to charge for any one event
                  sig { returns(T.nilable(String)) }
                  attr_accessor :per_unit_maximum

                  sig do
                    params(
                      bps: Float,
                      maximum_amount: T.nilable(String),
                      per_unit_maximum: T.nilable(String)
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # Basis points to rate on
                    bps:,
                    # Upper bound for tier
                    maximum_amount: nil,
                    # The maximum amount to charge for any one event
                    per_unit_maximum: nil
                  )
                  end

                  sig do
                    override.returns(
                      {
                        bps: Float,
                        maximum_amount: T.nilable(String),
                        per_unit_maximum: T.nilable(String)
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class Bulk < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk,
                    Orb::Internal::AnyHash
                  )
                end

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig
                )
              end
              attr_reader :bulk_config

              sig do
                params(
                  bulk_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::OrHash
                ).void
              end
              attr_writer :bulk_config

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  bulk_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::OrHash,
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                bulk_config:,
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :bulk
              )
              end

              sig do
                override.returns(
                  {
                    bulk_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig,
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              class BulkConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Bulk tiers for rating based on total usage volume
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::Tier
                    ]
                  )
                end
                attr_accessor :tiers

                sig do
                  params(
                    tiers:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::Tier::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Bulk tiers for rating based on total usage volume
                  tiers:
                )
                end

                sig do
                  override.returns(
                    {
                      tiers:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::Tier
                        ]
                    }
                  )
                end
                def to_hash
                end

                class Tier < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::Tier,
                        Orb::Internal::AnyHash
                      )
                    end

                  # Amount per unit
                  sig { returns(String) }
                  attr_accessor :unit_amount

                  # Upper bound for this tier
                  sig { returns(T.nilable(Float)) }
                  attr_accessor :maximum_units

                  sig do
                    params(
                      unit_amount: String,
                      maximum_units: T.nilable(Float)
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # Amount per unit
                    unit_amount:,
                    # Upper bound for this tier
                    maximum_units: nil
                  )
                  end

                  sig do
                    override.returns(
                      { unit_amount: String, maximum_units: T.nilable(Float) }
                    )
                  end
                  def to_hash
                  end
                end
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :threshold_total_amount_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  threshold_total_amount_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                threshold_total_amount_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :threshold_total_amount
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    threshold_total_amount_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredPackage < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :tiered_package_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_package_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_package_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_package
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_package_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredWithMinimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :tiered_with_minimum_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_with_minimum_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_with_minimum
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class UnitWithPercent < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :unit_with_percent_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  unit_with_percent_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                unit_with_percent_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :unit_with_percent
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    unit_with_percent_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class PackageWithAllocation < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :package_with_allocation_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  package_with_allocation_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                package_with_allocation_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :package_with_allocation
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    package_with_allocation_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredWithProration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :tiered_with_proration_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_with_proration_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_with_proration_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_with_proration
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_with_proration_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class UnitWithProration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :unit_with_proration_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  unit_with_proration_config: T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                unit_with_proration_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :unit_with_proration
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    unit_with_proration_config: T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedAllocation < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_allocation_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::OrSymbol,
                  grouped_allocation_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_allocation_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_allocation
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::OrSymbol,
                    grouped_allocation_config: T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_with_prorated_minimum_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                  grouped_with_prorated_minimum_config:
                    T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_with_prorated_minimum_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_with_prorated_minimum
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                    grouped_with_prorated_minimum_config:
                      T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_with_metered_minimum_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                  grouped_with_metered_minimum_config:
                    T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_with_metered_minimum_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_with_metered_minimum
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                    grouped_with_metered_minimum_config:
                      T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :matrix_with_display_name_config

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                  item_id: String,
                  matrix_with_display_name_config: T::Hash[Symbol, T.anything],
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                matrix_with_display_name_config:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :matrix_with_display_name
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                    item_id: String,
                    matrix_with_display_name_config:
                      T::Hash[Symbol, T.anything],
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class BulkWithProration < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration,
                    Orb::Internal::AnyHash
                  )
                end

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :bulk_with_proration_config

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  bulk_with_proration_config: T::Hash[Symbol, T.anything],
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                bulk_with_proration_config:,
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :bulk_with_proration
              )
              end

              sig do
                override.returns(
                  {
                    bulk_with_proration_config: T::Hash[Symbol, T.anything],
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedTieredPackage < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_tiered_package_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::OrSymbol,
                  grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_tiered_package_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_tiered_package
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::OrSymbol,
                    grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :max_group_tiered_package_config

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                  item_id: String,
                  max_group_tiered_package_config: T::Hash[Symbol, T.anything],
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                max_group_tiered_package_config:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :max_group_tiered_package
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                    item_id: String,
                    max_group_tiered_package_config:
                      T::Hash[Symbol, T.anything],
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :scalable_matrix_with_unit_pricing_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  scalable_matrix_with_unit_pricing_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                scalable_matrix_with_unit_pricing_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :scalable_matrix_with_unit_pricing
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    scalable_matrix_with_unit_pricing_config:
                      T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :scalable_matrix_with_tiered_pricing_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  scalable_matrix_with_tiered_pricing_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                scalable_matrix_with_tiered_pricing_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :scalable_matrix_with_tiered_pricing
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    scalable_matrix_with_tiered_pricing_config:
                      T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :cumulative_grouped_bulk_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                  cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                cumulative_grouped_bulk_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :cumulative_grouped_bulk
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                    cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class TieredPackageWithMinimum < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :tiered_package_with_minimum_config

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol,
                  item_id: String,
                  name: String,
                  tiered_package_with_minimum_config:
                    T::Hash[Symbol, T.anything],
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                tiered_package_with_minimum_config:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :tiered_package_with_minimum
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::OrSymbol,
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    tiered_package_with_minimum_config:
                      T::Hash[Symbol, T.anything],
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class MatrixWithAllocation < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig
                )
              end
              attr_reader :matrix_with_allocation_config

              sig do
                params(
                  matrix_with_allocation_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::OrHash
                ).void
              end
              attr_writer :matrix_with_allocation_config

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::OrSymbol,
                  item_id: String,
                  matrix_with_allocation_config:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::OrHash,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                # The id of the item the price will be associated with.
                item_id:,
                matrix_with_allocation_config:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :matrix_with_allocation
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::OrSymbol,
                    item_id: String,
                    matrix_with_allocation_config:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class MatrixWithAllocationConfig < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                      Orb::Internal::AnyHash
                    )
                  end

                # Allocation to be used to calculate the price
                sig { returns(Float) }
                attr_accessor :allocation

                # Default per unit rate for any usage not bucketed into a specified matrix_value
                sig { returns(String) }
                attr_accessor :default_unit_amount

                # One or two event property values to evaluate matrix groups by
                sig { returns(T::Array[T.nilable(String)]) }
                attr_accessor :dimensions

                # Matrix values for specified matrix grouping keys
                sig do
                  returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue
                    ]
                  )
                end
                attr_accessor :matrix_values

                sig do
                  params(
                    allocation: Float,
                    default_unit_amount: String,
                    dimensions: T::Array[T.nilable(String)],
                    matrix_values:
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue::OrHash
                      ]
                  ).returns(T.attached_class)
                end
                def self.new(
                  # Allocation to be used to calculate the price
                  allocation:,
                  # Default per unit rate for any usage not bucketed into a specified matrix_value
                  default_unit_amount:,
                  # One or two event property values to evaluate matrix groups by
                  dimensions:,
                  # Matrix values for specified matrix grouping keys
                  matrix_values:
                )
                end

                sig do
                  override.returns(
                    {
                      allocation: Float,
                      default_unit_amount: String,
                      dimensions: T::Array[T.nilable(String)],
                      matrix_values:
                        T::Array[
                          Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue
                        ]
                    }
                  )
                end
                def to_hash
                end

                class MatrixValue < Orb::Internal::Type::BaseModel
                  OrHash =
                    T.type_alias do
                      T.any(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue,
                        Orb::Internal::AnyHash
                      )
                    end

                  # One or two matrix keys to filter usage to this Matrix value by. For example,
                  # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                  # instance tier.
                  sig { returns(T::Array[T.nilable(String)]) }
                  attr_accessor :dimension_values

                  # Unit price for the specified dimension_values
                  sig { returns(String) }
                  attr_accessor :unit_amount

                  sig do
                    params(
                      dimension_values: T::Array[T.nilable(String)],
                      unit_amount: String
                    ).returns(T.attached_class)
                  end
                  def self.new(
                    # One or two matrix keys to filter usage to this Matrix value by. For example,
                    # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                    # instance tier.
                    dimension_values:,
                    # Unit price for the specified dimension_values
                    unit_amount:
                  )
                  end

                  sig do
                    override.returns(
                      {
                        dimension_values: T::Array[T.nilable(String)],
                        unit_amount: String
                      }
                    )
                  end
                  def to_hash
                  end
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            class GroupedTiered < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias do
                  T.any(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered,
                    Orb::Internal::AnyHash
                  )
                end

              # The cadence to bill for this price on.
              sig do
                returns(
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::OrSymbol
                )
              end
              attr_accessor :cadence

              sig { returns(T::Hash[Symbol, T.anything]) }
              attr_accessor :grouped_tiered_config

              # The id of the item the price will be associated with.
              sig { returns(String) }
              attr_accessor :item_id

              sig { returns(Symbol) }
              attr_accessor :model_type

              # The name of the price.
              sig { returns(String) }
              attr_accessor :name

              # The id of the billable metric for the price. Only needed if the price is
              # usage-based.
              sig { returns(T.nilable(String)) }
              attr_accessor :billable_metric_id

              # If the Price represents a fixed cost, the price will be billed in-advance if
              # this is true, and in-arrears if this is false.
              sig { returns(T.nilable(T::Boolean)) }
              attr_accessor :billed_in_advance

              # For custom cadence: specifies the duration of the billing period in days or
              # months.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration
                  )
                )
              end
              attr_reader :billing_cycle_configuration

              sig do
                params(
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :billing_cycle_configuration

              # The per unit conversion rate of the price currency to the invoicing currency.
              sig { returns(T.nilable(Float)) }
              attr_accessor :conversion_rate

              # An ISO 4217 currency string, or custom pricing unit identifier, in which this
              # price is billed.
              sig { returns(T.nilable(String)) }
              attr_accessor :currency

              # For dimensional price: specifies a price group and dimension values
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration
                  )
                )
              end
              attr_reader :dimensional_price_configuration

              sig do
                params(
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :dimensional_price_configuration

              # An alias for the price.
              sig { returns(T.nilable(String)) }
              attr_accessor :external_price_id

              # If the Price represents a fixed cost, this represents the quantity of units
              # applied.
              sig { returns(T.nilable(Float)) }
              attr_accessor :fixed_price_quantity

              # The property used to group this price on an invoice
              sig { returns(T.nilable(String)) }
              attr_accessor :invoice_grouping_key

              # Within each billing cycle, specifies the cadence at which invoices are produced.
              # If unspecified, a single invoice is produced per billing cycle.
              sig do
                returns(
                  T.nilable(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration
                  )
                )
              end
              attr_reader :invoicing_cycle_configuration

              sig do
                params(
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::OrHash
                    )
                ).void
              end
              attr_writer :invoicing_cycle_configuration

              # User-specified key/value pairs for the resource. Individual keys can be removed
              # by setting the value to `null`, and the entire metadata mapping can be cleared
              # by setting `metadata` to `null`.
              sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
              attr_accessor :metadata

              sig do
                params(
                  cadence:
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::OrSymbol,
                  grouped_tiered_config: T::Hash[Symbol, T.anything],
                  item_id: String,
                  name: String,
                  billable_metric_id: T.nilable(String),
                  billed_in_advance: T.nilable(T::Boolean),
                  billing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::OrHash
                    ),
                  conversion_rate: T.nilable(Float),
                  currency: T.nilable(String),
                  dimensional_price_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration::OrHash
                    ),
                  external_price_id: T.nilable(String),
                  fixed_price_quantity: T.nilable(Float),
                  invoice_grouping_key: T.nilable(String),
                  invoicing_cycle_configuration:
                    T.nilable(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::OrHash
                    ),
                  metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
                  model_type: Symbol
                ).returns(T.attached_class)
              end
              def self.new(
                # The cadence to bill for this price on.
                cadence:,
                grouped_tiered_config:,
                # The id of the item the price will be associated with.
                item_id:,
                # The name of the price.
                name:,
                # The id of the billable metric for the price. Only needed if the price is
                # usage-based.
                billable_metric_id: nil,
                # If the Price represents a fixed cost, the price will be billed in-advance if
                # this is true, and in-arrears if this is false.
                billed_in_advance: nil,
                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                billing_cycle_configuration: nil,
                # The per unit conversion rate of the price currency to the invoicing currency.
                conversion_rate: nil,
                # An ISO 4217 currency string, or custom pricing unit identifier, in which this
                # price is billed.
                currency: nil,
                # For dimensional price: specifies a price group and dimension values
                dimensional_price_configuration: nil,
                # An alias for the price.
                external_price_id: nil,
                # If the Price represents a fixed cost, this represents the quantity of units
                # applied.
                fixed_price_quantity: nil,
                # The property used to group this price on an invoice
                invoice_grouping_key: nil,
                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                invoicing_cycle_configuration: nil,
                # User-specified key/value pairs for the resource. Individual keys can be removed
                # by setting the value to `null`, and the entire metadata mapping can be cleared
                # by setting `metadata` to `null`.
                metadata: nil,
                model_type: :grouped_tiered
              )
              end

              sig do
                override.returns(
                  {
                    cadence:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::OrSymbol,
                    grouped_tiered_config: T::Hash[Symbol, T.anything],
                    item_id: String,
                    model_type: Symbol,
                    name: String,
                    billable_metric_id: T.nilable(String),
                    billed_in_advance: T.nilable(T::Boolean),
                    billing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration
                      ),
                    conversion_rate: T.nilable(Float),
                    currency: T.nilable(String),
                    dimensional_price_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration
                      ),
                    external_price_id: T.nilable(String),
                    fixed_price_quantity: T.nilable(Float),
                    invoice_grouping_key: T.nilable(String),
                    invoicing_cycle_configuration:
                      T.nilable(
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration
                      ),
                    metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
                  }
                )
              end
              def to_hash
              end

              # The cadence to bill for this price on.
              module Cadence
                extend Orb::Internal::Type::Enum

                TaggedSymbol =
                  T.type_alias do
                    T.all(
                      Symbol,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence
                    )
                  end
                OrSymbol = T.type_alias { T.any(Symbol, String) }

                ANNUAL =
                  T.let(
                    :annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                SEMI_ANNUAL =
                  T.let(
                    :semi_annual,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                MONTHLY =
                  T.let(
                    :monthly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                QUARTERLY =
                  T.let(
                    :quarterly,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                ONE_TIME =
                  T.let(
                    :one_time,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )
                CUSTOM =
                  T.let(
                    :custom,
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                  )

                sig do
                  override.returns(
                    T::Array[
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::Cadence::TaggedSymbol
                    ]
                  )
                end
                def self.values
                end
              end

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # For custom cadence: specifies the duration of the billing period in days or
                # months.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The list of dimension values matching (in order) the dimensions of the price
                # group
                sig { returns(T::Array[String]) }
                attr_accessor :dimension_values

                # The id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :dimensional_price_group_id

                # The external id of the dimensional price group to include this price in
                sig { returns(T.nilable(String)) }
                attr_accessor :external_dimensional_price_group_id

                # For dimensional price: specifies a price group and dimension values
                sig do
                  params(
                    dimension_values: T::Array[String],
                    dimensional_price_group_id: T.nilable(String),
                    external_dimensional_price_group_id: T.nilable(String)
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The list of dimension values matching (in order) the dimensions of the price
                  # group
                  dimension_values:,
                  # The id of the dimensional price group to include this price in
                  dimensional_price_group_id: nil,
                  # The external id of the dimensional price group to include this price in
                  external_dimensional_price_group_id: nil
                )
                end

                sig do
                  override.returns(
                    {
                      dimension_values: T::Array[String],
                      dimensional_price_group_id: T.nilable(String),
                      external_dimensional_price_group_id: T.nilable(String)
                    }
                  )
                end
                def to_hash
                end
              end

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                OrHash =
                  T.type_alias do
                    T.any(
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration,
                      Orb::Internal::AnyHash
                    )
                  end

                # The duration of the billing period.
                sig { returns(Integer) }
                attr_accessor :duration

                # The unit of billing period duration.
                sig do
                  returns(
                    Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  )
                end
                attr_accessor :duration_unit

                # Within each billing cycle, specifies the cadence at which invoices are produced.
                # If unspecified, a single invoice is produced per billing cycle.
                sig do
                  params(
                    duration: Integer,
                    duration_unit:
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                  ).returns(T.attached_class)
                end
                def self.new(
                  # The duration of the billing period.
                  duration:,
                  # The unit of billing period duration.
                  duration_unit:
                )
                end

                sig do
                  override.returns(
                    {
                      duration: Integer,
                      duration_unit:
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                    }
                  )
                end
                def to_hash
                end

                # The unit of billing period duration.
                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  TaggedSymbol =
                    T.type_alias do
                      T.all(
                        Symbol,
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit
                      )
                    end
                  OrSymbol = T.type_alias { T.any(Symbol, String) }

                  DAY =
                    T.let(
                      :day,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )
                  MONTH =
                    T.let(
                      :month,
                      Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                    )

                  sig do
                    override.returns(
                      T::Array[
                        Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                      ]
                    )
                  end
                  def self.values
                  end
                end
              end
            end

            sig do
              override.returns(
                T::Array[
                  Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Variants
                ]
              )
            end
            def self.variants
            end
          end
        end
      end
    end
  end
end
