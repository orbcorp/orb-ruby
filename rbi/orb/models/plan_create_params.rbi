# typed: strong

module Orb
  module Models
    class PlanCreateParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

      # An ISO 4217 currency string for invoices generated by subscriptions on this
      # plan.
      sig { returns(String) }
      attr_accessor :currency

      sig { returns(String) }
      attr_accessor :name

      # Prices for this plan. If the plan has phases, this includes prices across all
      # phases of the plan.
      sig do
        returns(
          T::Array[
            T.any(
              Orb::PlanCreateParams::Price::Unit,
              Orb::PlanCreateParams::Price::Package,
              Orb::PlanCreateParams::Price::Matrix,
              Orb::PlanCreateParams::Price::Tiered,
              Orb::PlanCreateParams::Price::TieredBps,
              Orb::PlanCreateParams::Price::Bps,
              Orb::PlanCreateParams::Price::BulkBps,
              Orb::PlanCreateParams::Price::Bulk,
              Orb::PlanCreateParams::Price::ThresholdTotalAmount,
              Orb::PlanCreateParams::Price::TieredPackage,
              Orb::PlanCreateParams::Price::TieredWithMinimum,
              Orb::PlanCreateParams::Price::UnitWithPercent,
              Orb::PlanCreateParams::Price::PackageWithAllocation,
              Orb::PlanCreateParams::Price::TieredWithProration,
              Orb::PlanCreateParams::Price::UnitWithProration,
              Orb::PlanCreateParams::Price::GroupedAllocation,
              Orb::PlanCreateParams::Price::GroupedWithProratedMinimum,
              Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum,
              Orb::PlanCreateParams::Price::MatrixWithDisplayName,
              Orb::PlanCreateParams::Price::BulkWithProration,
              Orb::PlanCreateParams::Price::GroupedTieredPackage,
              Orb::PlanCreateParams::Price::MaxGroupTieredPackage,
              Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing,
              Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing,
              Orb::PlanCreateParams::Price::CumulativeGroupedBulk
            )
          ]
        )
      end
      attr_accessor :prices

      # Free-form text which is available on the invoice PDF and the Orb invoice portal.
      sig { returns(T.nilable(String)) }
      attr_accessor :default_invoice_memo

      sig { returns(T.nilable(String)) }
      attr_accessor :external_plan_id

      # User-specified key/value pairs for the resource. Individual keys can be removed
      # by setting the value to `null`, and the entire metadata mapping can be cleared
      # by setting `metadata` to `null`.
      sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
      attr_accessor :metadata

      # The net terms determines the difference between the invoice date and the issue
      # date for the invoice. If you intend the invoice to be due on issue, set this
      # to 0.
      sig { returns(T.nilable(Integer)) }
      attr_accessor :net_terms

      # The status of the plan to create (either active or draft). If not specified,
      # this defaults to active.
      sig { returns(T.nilable(Orb::PlanCreateParams::Status::OrSymbol)) }
      attr_reader :status

      sig { params(status: Orb::PlanCreateParams::Status::OrSymbol).void }
      attr_writer :status

      sig do
        params(
          currency: String,
          name: String,
          prices:
            T::Array[
              T.any(
                Orb::PlanCreateParams::Price::Unit::OrHash,
                Orb::PlanCreateParams::Price::Package::OrHash,
                Orb::PlanCreateParams::Price::Matrix::OrHash,
                Orb::PlanCreateParams::Price::Tiered::OrHash,
                Orb::PlanCreateParams::Price::TieredBps::OrHash,
                Orb::PlanCreateParams::Price::Bps::OrHash,
                Orb::PlanCreateParams::Price::BulkBps::OrHash,
                Orb::PlanCreateParams::Price::Bulk::OrHash,
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::OrHash,
                Orb::PlanCreateParams::Price::TieredPackage::OrHash,
                Orb::PlanCreateParams::Price::TieredWithMinimum::OrHash,
                Orb::PlanCreateParams::Price::UnitWithPercent::OrHash,
                Orb::PlanCreateParams::Price::PackageWithAllocation::OrHash,
                Orb::PlanCreateParams::Price::TieredWithProration::OrHash,
                Orb::PlanCreateParams::Price::UnitWithProration::OrHash,
                Orb::PlanCreateParams::Price::GroupedAllocation::OrHash,
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::OrHash,
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::OrHash,
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::OrHash,
                Orb::PlanCreateParams::Price::BulkWithProration::OrHash,
                Orb::PlanCreateParams::Price::GroupedTieredPackage::OrHash,
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::OrHash,
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::OrHash,
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::OrHash,
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::OrHash
              )
            ],
          default_invoice_memo: T.nilable(String),
          external_plan_id: T.nilable(String),
          metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
          net_terms: T.nilable(Integer),
          status: Orb::PlanCreateParams::Status::OrSymbol,
          request_options: Orb::RequestOptions::OrHash
        ).returns(T.attached_class)
      end
      def self.new(
        # An ISO 4217 currency string for invoices generated by subscriptions on this
        # plan.
        currency:,
        name:,
        # Prices for this plan. If the plan has phases, this includes prices across all
        # phases of the plan.
        prices:,
        # Free-form text which is available on the invoice PDF and the Orb invoice portal.
        default_invoice_memo: nil,
        external_plan_id: nil,
        # User-specified key/value pairs for the resource. Individual keys can be removed
        # by setting the value to `null`, and the entire metadata mapping can be cleared
        # by setting `metadata` to `null`.
        metadata: nil,
        # The net terms determines the difference between the invoice date and the issue
        # date for the invoice. If you intend the invoice to be due on issue, set this
        # to 0.
        net_terms: nil,
        # The status of the plan to create (either active or draft). If not specified,
        # this defaults to active.
        status: nil,
        request_options: {}
      )
      end

      sig do
        override.returns(
          {
            currency: String,
            name: String,
            prices:
              T::Array[
                T.any(
                  Orb::PlanCreateParams::Price::Unit,
                  Orb::PlanCreateParams::Price::Package,
                  Orb::PlanCreateParams::Price::Matrix,
                  Orb::PlanCreateParams::Price::Tiered,
                  Orb::PlanCreateParams::Price::TieredBps,
                  Orb::PlanCreateParams::Price::Bps,
                  Orb::PlanCreateParams::Price::BulkBps,
                  Orb::PlanCreateParams::Price::Bulk,
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount,
                  Orb::PlanCreateParams::Price::TieredPackage,
                  Orb::PlanCreateParams::Price::TieredWithMinimum,
                  Orb::PlanCreateParams::Price::UnitWithPercent,
                  Orb::PlanCreateParams::Price::PackageWithAllocation,
                  Orb::PlanCreateParams::Price::TieredWithProration,
                  Orb::PlanCreateParams::Price::UnitWithProration,
                  Orb::PlanCreateParams::Price::GroupedAllocation,
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum,
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum,
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName,
                  Orb::PlanCreateParams::Price::BulkWithProration,
                  Orb::PlanCreateParams::Price::GroupedTieredPackage,
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing,
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk
                )
              ],
            default_invoice_memo: T.nilable(String),
            external_plan_id: T.nilable(String),
            metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
            net_terms: T.nilable(Integer),
            status: Orb::PlanCreateParams::Status::OrSymbol,
            request_options: Orb::RequestOptions
          }
        )
      end
      def to_hash
      end

      module Price
        extend Orb::Internal::Type::Union

        Variants =
          T.type_alias do
            T.any(
              Orb::PlanCreateParams::Price::Unit,
              Orb::PlanCreateParams::Price::Package,
              Orb::PlanCreateParams::Price::Matrix,
              Orb::PlanCreateParams::Price::Tiered,
              Orb::PlanCreateParams::Price::TieredBps,
              Orb::PlanCreateParams::Price::Bps,
              Orb::PlanCreateParams::Price::BulkBps,
              Orb::PlanCreateParams::Price::Bulk,
              Orb::PlanCreateParams::Price::ThresholdTotalAmount,
              Orb::PlanCreateParams::Price::TieredPackage,
              Orb::PlanCreateParams::Price::TieredWithMinimum,
              Orb::PlanCreateParams::Price::UnitWithPercent,
              Orb::PlanCreateParams::Price::PackageWithAllocation,
              Orb::PlanCreateParams::Price::TieredWithProration,
              Orb::PlanCreateParams::Price::UnitWithProration,
              Orb::PlanCreateParams::Price::GroupedAllocation,
              Orb::PlanCreateParams::Price::GroupedWithProratedMinimum,
              Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum,
              Orb::PlanCreateParams::Price::MatrixWithDisplayName,
              Orb::PlanCreateParams::Price::BulkWithProration,
              Orb::PlanCreateParams::Price::GroupedTieredPackage,
              Orb::PlanCreateParams::Price::MaxGroupTieredPackage,
              Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing,
              Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing,
              Orb::PlanCreateParams::Price::CumulativeGroupedBulk
            )
          end

        class Unit < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig { returns(Orb::PlanCreateParams::Price::Unit::Cadence::OrSymbol) }
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(Orb::PlanCreateParams::Price::Unit::UnitConfig) }
          attr_reader :unit_config

          sig do
            params(
              unit_config:
                Orb::PlanCreateParams::Price::Unit::UnitConfig::OrHash
            ).void
          end
          attr_writer :unit_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence: Orb::PlanCreateParams::Price::Unit::Cadence::OrSymbol,
              item_id: String,
              name: String,
              unit_config:
                Orb::PlanCreateParams::Price::Unit::UnitConfig::OrHash,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            unit_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :unit
          )
          end

          sig do
            override.returns(
              {
                cadence: Orb::PlanCreateParams::Price::Unit::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                unit_config: Orb::PlanCreateParams::Price::Unit::UnitConfig,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, Orb::PlanCreateParams::Price::Unit::Cadence)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::Unit::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::Unit::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::Unit::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::Unit::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::Unit::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::Unit::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::Unit::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class UnitConfig < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # Rate per unit of usage
            sig { returns(String) }
            attr_accessor :unit_amount

            sig { params(unit_amount: String).returns(T.attached_class) }
            def self.new(
              # Rate per unit of usage
              unit_amount:
            )
            end

            sig { override.returns({ unit_amount: String }) }
            def to_hash
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class Package < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(Orb::PlanCreateParams::Price::Package::Cadence::OrSymbol)
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(Orb::PlanCreateParams::Price::Package::PackageConfig) }
          attr_reader :package_config

          sig do
            params(
              package_config:
                Orb::PlanCreateParams::Price::Package::PackageConfig::OrHash
            ).void
          end
          attr_writer :package_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence: Orb::PlanCreateParams::Price::Package::Cadence::OrSymbol,
              item_id: String,
              name: String,
              package_config:
                Orb::PlanCreateParams::Price::Package::PackageConfig::OrHash,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            package_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :package
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::Package::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                package_config:
                  Orb::PlanCreateParams::Price::Package::PackageConfig,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, Orb::PlanCreateParams::Price::Package::Cadence)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::Package::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::Package::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::Package::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::Package::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::Package::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::Package::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::Package::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class PackageConfig < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # A currency amount to rate usage by
            sig { returns(String) }
            attr_accessor :package_amount

            # An integer amount to represent package size. For example, 1000 here would divide
            # usage by 1000 before multiplying by package_amount in rating
            sig { returns(Integer) }
            attr_accessor :package_size

            sig do
              params(package_amount: String, package_size: Integer).returns(
                T.attached_class
              )
            end
            def self.new(
              # A currency amount to rate usage by
              package_amount:,
              # An integer amount to represent package size. For example, 1000 here would divide
              # usage by 1000 before multiplying by package_amount in rating
              package_size:
            )
            end

            sig do
              override.returns(
                { package_amount: String, package_size: Integer }
              )
            end
            def to_hash
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class Matrix < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(Orb::PlanCreateParams::Price::Matrix::Cadence::OrSymbol)
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Orb::PlanCreateParams::Price::Matrix::MatrixConfig) }
          attr_reader :matrix_config

          sig do
            params(
              matrix_config:
                Orb::PlanCreateParams::Price::Matrix::MatrixConfig::OrHash
            ).void
          end
          attr_writer :matrix_config

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence: Orb::PlanCreateParams::Price::Matrix::Cadence::OrSymbol,
              item_id: String,
              matrix_config:
                Orb::PlanCreateParams::Price::Matrix::MatrixConfig::OrHash,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            matrix_config:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :matrix
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::Matrix::Cadence::OrSymbol,
                item_id: String,
                matrix_config:
                  Orb::PlanCreateParams::Price::Matrix::MatrixConfig,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, Orb::PlanCreateParams::Price::Matrix::Cadence)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::Matrix::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::Matrix::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::Matrix::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::Matrix::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::Matrix::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::Matrix::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::Matrix::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class MatrixConfig < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # Default per unit rate for any usage not bucketed into a specified matrix_value
            sig { returns(String) }
            attr_accessor :default_unit_amount

            # One or two event property values to evaluate matrix groups by
            sig { returns(T::Array[T.nilable(String)]) }
            attr_accessor :dimensions

            # Matrix values for specified matrix grouping keys
            sig do
              returns(
                T::Array[
                  Orb::PlanCreateParams::Price::Matrix::MatrixConfig::MatrixValue
                ]
              )
            end
            attr_accessor :matrix_values

            sig do
              params(
                default_unit_amount: String,
                dimensions: T::Array[T.nilable(String)],
                matrix_values:
                  T::Array[
                    Orb::PlanCreateParams::Price::Matrix::MatrixConfig::MatrixValue::OrHash
                  ]
              ).returns(T.attached_class)
            end
            def self.new(
              # Default per unit rate for any usage not bucketed into a specified matrix_value
              default_unit_amount:,
              # One or two event property values to evaluate matrix groups by
              dimensions:,
              # Matrix values for specified matrix grouping keys
              matrix_values:
            )
            end

            sig do
              override.returns(
                {
                  default_unit_amount: String,
                  dimensions: T::Array[T.nilable(String)],
                  matrix_values:
                    T::Array[
                      Orb::PlanCreateParams::Price::Matrix::MatrixConfig::MatrixValue
                    ]
                }
              )
            end
            def to_hash
            end

            class MatrixValue < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

              # One or two matrix keys to filter usage to this Matrix value by. For example,
              # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
              # instance tier.
              sig { returns(T::Array[T.nilable(String)]) }
              attr_accessor :dimension_values

              # Unit price for the specified dimension_values
              sig { returns(String) }
              attr_accessor :unit_amount

              sig do
                params(
                  dimension_values: T::Array[T.nilable(String)],
                  unit_amount: String
                ).returns(T.attached_class)
              end
              def self.new(
                # One or two matrix keys to filter usage to this Matrix value by. For example,
                # ["region", "tier"] could be used to filter cloud usage by a cloud region and an
                # instance tier.
                dimension_values:,
                # Unit price for the specified dimension_values
                unit_amount:
              )
              end

              sig do
                override.returns(
                  {
                    dimension_values: T::Array[T.nilable(String)],
                    unit_amount: String
                  }
                )
              end
              def to_hash
              end
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class Tiered < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(Orb::PlanCreateParams::Price::Tiered::Cadence::OrSymbol)
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(Orb::PlanCreateParams::Price::Tiered::TieredConfig) }
          attr_reader :tiered_config

          sig do
            params(
              tiered_config:
                Orb::PlanCreateParams::Price::Tiered::TieredConfig::OrHash
            ).void
          end
          attr_writer :tiered_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence: Orb::PlanCreateParams::Price::Tiered::Cadence::OrSymbol,
              item_id: String,
              name: String,
              tiered_config:
                Orb::PlanCreateParams::Price::Tiered::TieredConfig::OrHash,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            tiered_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :tiered
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::Tiered::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                tiered_config:
                  Orb::PlanCreateParams::Price::Tiered::TieredConfig,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, Orb::PlanCreateParams::Price::Tiered::Cadence)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::Tiered::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::Tiered::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::Tiered::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::Tiered::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::Tiered::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::Tiered::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::Tiered::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class TieredConfig < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # Tiers for rating based on total usage quantities into the specified tier
            sig do
              returns(
                T::Array[
                  Orb::PlanCreateParams::Price::Tiered::TieredConfig::Tier
                ]
              )
            end
            attr_accessor :tiers

            sig do
              params(
                tiers:
                  T::Array[
                    Orb::PlanCreateParams::Price::Tiered::TieredConfig::Tier::OrHash
                  ]
              ).returns(T.attached_class)
            end
            def self.new(
              # Tiers for rating based on total usage quantities into the specified tier
              tiers:
            )
            end

            sig do
              override.returns(
                {
                  tiers:
                    T::Array[
                      Orb::PlanCreateParams::Price::Tiered::TieredConfig::Tier
                    ]
                }
              )
            end
            def to_hash
            end

            class Tier < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

              # Exclusive tier starting value
              sig { returns(Float) }
              attr_accessor :first_unit

              # Amount per unit
              sig { returns(String) }
              attr_accessor :unit_amount

              # Inclusive tier ending value. If null, this is treated as the last tier
              sig { returns(T.nilable(Float)) }
              attr_accessor :last_unit

              sig do
                params(
                  first_unit: Float,
                  unit_amount: String,
                  last_unit: T.nilable(Float)
                ).returns(T.attached_class)
              end
              def self.new(
                # Exclusive tier starting value
                first_unit:,
                # Amount per unit
                unit_amount:,
                # Inclusive tier ending value. If null, this is treated as the last tier
                last_unit: nil
              )
              end

              sig do
                override.returns(
                  {
                    first_unit: Float,
                    unit_amount: String,
                    last_unit: T.nilable(Float)
                  }
                )
              end
              def to_hash
              end
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class TieredBps < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(Orb::PlanCreateParams::Price::TieredBps::Cadence::OrSymbol)
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig do
            returns(Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig)
          end
          attr_reader :tiered_bps_config

          sig do
            params(
              tiered_bps_config:
                Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig::OrHash
            ).void
          end
          attr_writer :tiered_bps_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::TieredBps::Cadence::OrSymbol,
              item_id: String,
              name: String,
              tiered_bps_config:
                Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig::OrHash,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            tiered_bps_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :tiered_bps
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::TieredBps::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                tiered_bps_config:
                  Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, Orb::PlanCreateParams::Price::TieredBps::Cadence)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::TieredBps::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::TieredBps::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::TieredBps::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::TieredBps::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::TieredBps::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::TieredBps::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::TieredBps::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class TieredBpsConfig < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
            # tiers
            sig do
              returns(
                T::Array[
                  Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig::Tier
                ]
              )
            end
            attr_accessor :tiers

            sig do
              params(
                tiers:
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig::Tier::OrHash
                  ]
              ).returns(T.attached_class)
            end
            def self.new(
              # Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
              # tiers
              tiers:
            )
            end

            sig do
              override.returns(
                {
                  tiers:
                    T::Array[
                      Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig::Tier
                    ]
                }
              )
            end
            def to_hash
            end

            class Tier < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

              # Per-event basis point rate
              sig { returns(Float) }
              attr_accessor :bps

              # Exclusive tier starting value
              sig { returns(String) }
              attr_accessor :minimum_amount

              # Inclusive tier ending value
              sig { returns(T.nilable(String)) }
              attr_accessor :maximum_amount

              # Per unit maximum to charge
              sig { returns(T.nilable(String)) }
              attr_accessor :per_unit_maximum

              sig do
                params(
                  bps: Float,
                  minimum_amount: String,
                  maximum_amount: T.nilable(String),
                  per_unit_maximum: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # Per-event basis point rate
                bps:,
                # Exclusive tier starting value
                minimum_amount:,
                # Inclusive tier ending value
                maximum_amount: nil,
                # Per unit maximum to charge
                per_unit_maximum: nil
              )
              end

              sig do
                override.returns(
                  {
                    bps: Float,
                    minimum_amount: String,
                    maximum_amount: T.nilable(String),
                    per_unit_maximum: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class Bps < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          sig { returns(Orb::PlanCreateParams::Price::Bps::BpsConfig) }
          attr_reader :bps_config

          sig do
            params(
              bps_config: Orb::PlanCreateParams::Price::Bps::BpsConfig::OrHash
            ).void
          end
          attr_writer :bps_config

          # The cadence to bill for this price on.
          sig { returns(Orb::PlanCreateParams::Price::Bps::Cadence::OrSymbol) }
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              bps_config: Orb::PlanCreateParams::Price::Bps::BpsConfig::OrHash,
              cadence: Orb::PlanCreateParams::Price::Bps::Cadence::OrSymbol,
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            bps_config:,
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :bps
          )
          end

          sig do
            override.returns(
              {
                bps_config: Orb::PlanCreateParams::Price::Bps::BpsConfig,
                cadence: Orb::PlanCreateParams::Price::Bps::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          class BpsConfig < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # Basis point take rate per event
            sig { returns(Float) }
            attr_accessor :bps

            # Optional currency amount maximum to cap spend per event
            sig { returns(T.nilable(String)) }
            attr_accessor :per_unit_maximum

            sig do
              params(bps: Float, per_unit_maximum: T.nilable(String)).returns(
                T.attached_class
              )
            end
            def self.new(
              # Basis point take rate per event
              bps:,
              # Optional currency amount maximum to cap spend per event
              per_unit_maximum: nil
            )
            end

            sig do
              override.returns(
                { bps: Float, per_unit_maximum: T.nilable(String) }
              )
            end
            def to_hash
            end
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, Orb::PlanCreateParams::Price::Bps::Cadence)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::Bps::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::Bps::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::Bps::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::Bps::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::Bps::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::Bps::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::Bps::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class BulkBps < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          sig { returns(Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig) }
          attr_reader :bulk_bps_config

          sig do
            params(
              bulk_bps_config:
                Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig::OrHash
            ).void
          end
          attr_writer :bulk_bps_config

          # The cadence to bill for this price on.
          sig do
            returns(Orb::PlanCreateParams::Price::BulkBps::Cadence::OrSymbol)
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              bulk_bps_config:
                Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig::OrHash,
              cadence: Orb::PlanCreateParams::Price::BulkBps::Cadence::OrSymbol,
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            bulk_bps_config:,
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :bulk_bps
          )
          end

          sig do
            override.returns(
              {
                bulk_bps_config:
                  Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig,
                cadence:
                  Orb::PlanCreateParams::Price::BulkBps::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          class BulkBpsConfig < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
            # tier based on total volume
            sig do
              returns(
                T::Array[
                  Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig::Tier
                ]
              )
            end
            attr_accessor :tiers

            sig do
              params(
                tiers:
                  T::Array[
                    Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig::Tier::OrHash
                  ]
              ).returns(T.attached_class)
            end
            def self.new(
              # Tiers for a bulk BPS pricing model where all usage is aggregated to a single
              # tier based on total volume
              tiers:
            )
            end

            sig do
              override.returns(
                {
                  tiers:
                    T::Array[
                      Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig::Tier
                    ]
                }
              )
            end
            def to_hash
            end

            class Tier < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

              # Basis points to rate on
              sig { returns(Float) }
              attr_accessor :bps

              # Upper bound for tier
              sig { returns(T.nilable(String)) }
              attr_accessor :maximum_amount

              # The maximum amount to charge for any one event
              sig { returns(T.nilable(String)) }
              attr_accessor :per_unit_maximum

              sig do
                params(
                  bps: Float,
                  maximum_amount: T.nilable(String),
                  per_unit_maximum: T.nilable(String)
                ).returns(T.attached_class)
              end
              def self.new(
                # Basis points to rate on
                bps:,
                # Upper bound for tier
                maximum_amount: nil,
                # The maximum amount to charge for any one event
                per_unit_maximum: nil
              )
              end

              sig do
                override.returns(
                  {
                    bps: Float,
                    maximum_amount: T.nilable(String),
                    per_unit_maximum: T.nilable(String)
                  }
                )
              end
              def to_hash
              end
            end
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, Orb::PlanCreateParams::Price::BulkBps::Cadence)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::BulkBps::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::BulkBps::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::BulkBps::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::BulkBps::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::BulkBps::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::BulkBps::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::BulkBps::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class Bulk < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          sig { returns(Orb::PlanCreateParams::Price::Bulk::BulkConfig) }
          attr_reader :bulk_config

          sig do
            params(
              bulk_config:
                Orb::PlanCreateParams::Price::Bulk::BulkConfig::OrHash
            ).void
          end
          attr_writer :bulk_config

          # The cadence to bill for this price on.
          sig { returns(Orb::PlanCreateParams::Price::Bulk::Cadence::OrSymbol) }
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              bulk_config:
                Orb::PlanCreateParams::Price::Bulk::BulkConfig::OrHash,
              cadence: Orb::PlanCreateParams::Price::Bulk::Cadence::OrSymbol,
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            bulk_config:,
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :bulk
          )
          end

          sig do
            override.returns(
              {
                bulk_config: Orb::PlanCreateParams::Price::Bulk::BulkConfig,
                cadence: Orb::PlanCreateParams::Price::Bulk::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          class BulkConfig < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # Bulk tiers for rating based on total usage volume
            sig do
              returns(
                T::Array[Orb::PlanCreateParams::Price::Bulk::BulkConfig::Tier]
              )
            end
            attr_accessor :tiers

            sig do
              params(
                tiers:
                  T::Array[
                    Orb::PlanCreateParams::Price::Bulk::BulkConfig::Tier::OrHash
                  ]
              ).returns(T.attached_class)
            end
            def self.new(
              # Bulk tiers for rating based on total usage volume
              tiers:
            )
            end

            sig do
              override.returns(
                {
                  tiers:
                    T::Array[
                      Orb::PlanCreateParams::Price::Bulk::BulkConfig::Tier
                    ]
                }
              )
            end
            def to_hash
            end

            class Tier < Orb::Internal::Type::BaseModel
              OrHash =
                T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

              # Amount per unit
              sig { returns(String) }
              attr_accessor :unit_amount

              # Upper bound for this tier
              sig { returns(T.nilable(Float)) }
              attr_accessor :maximum_units

              sig do
                params(
                  unit_amount: String,
                  maximum_units: T.nilable(Float)
                ).returns(T.attached_class)
              end
              def self.new(
                # Amount per unit
                unit_amount:,
                # Upper bound for this tier
                maximum_units: nil
              )
              end

              sig do
                override.returns(
                  { unit_amount: String, maximum_units: T.nilable(Float) }
                )
              end
              def to_hash
              end
            end
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(Symbol, Orb::PlanCreateParams::Price::Bulk::Cadence)
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::Bulk::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::Bulk::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::Bulk::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::Bulk::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::Bulk::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::Bulk::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::Bulk::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :threshold_total_amount_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::OrSymbol,
              item_id: String,
              name: String,
              threshold_total_amount_config: T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            threshold_total_amount_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :threshold_total_amount
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                threshold_total_amount_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class TieredPackage < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::TieredPackage::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :tiered_package_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::TieredPackage::Cadence::OrSymbol,
              item_id: String,
              name: String,
              tiered_package_config: T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            tiered_package_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :tiered_package
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::TieredPackage::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                tiered_package_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::TieredPackage::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::TieredPackage::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::TieredPackage::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::TieredPackage::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::TieredPackage::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::TieredPackage::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::TieredPackage::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::TieredPackage::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class TieredWithMinimum < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :tiered_with_minimum_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::OrSymbol,
              item_id: String,
              name: String,
              tiered_with_minimum_config: T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            tiered_with_minimum_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :tiered_with_minimum
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                tiered_with_minimum_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::TieredWithMinimum::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class UnitWithPercent < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :unit_with_percent_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::OrSymbol,
              item_id: String,
              name: String,
              unit_with_percent_config: T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            unit_with_percent_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :unit_with_percent
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                unit_with_percent_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::UnitWithPercent::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::UnitWithPercent::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class PackageWithAllocation < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :package_with_allocation_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::OrSymbol,
              item_id: String,
              name: String,
              package_with_allocation_config: T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            package_with_allocation_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :package_with_allocation
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                package_with_allocation_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::PackageWithAllocation::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class TieredWithProration < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::TieredWithProration::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :tiered_with_proration_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::TieredWithProration::Cadence::OrSymbol,
              item_id: String,
              name: String,
              tiered_with_proration_config: T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            tiered_with_proration_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :tiered_with_proration
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::TieredWithProration::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                tiered_with_proration_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::TieredWithProration::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::TieredWithProration::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::TieredWithProration::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::TieredWithProration::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::TieredWithProration::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::TieredWithProration::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::TieredWithProration::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::TieredWithProration::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class UnitWithProration < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::UnitWithProration::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :unit_with_proration_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::UnitWithProration::Cadence::OrSymbol,
              item_id: String,
              name: String,
              unit_with_proration_config: T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            unit_with_proration_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :unit_with_proration
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::UnitWithProration::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                unit_with_proration_config: T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::UnitWithProration::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::UnitWithProration::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::UnitWithProration::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::UnitWithProration::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::UnitWithProration::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::UnitWithProration::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::UnitWithProration::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::UnitWithProration::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class GroupedAllocation < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :grouped_allocation_config

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::OrSymbol,
              grouped_allocation_config: T::Hash[Symbol, T.anything],
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            grouped_allocation_config:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :grouped_allocation
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::OrSymbol,
                grouped_allocation_config: T::Hash[Symbol, T.anything],
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::GroupedAllocation::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::GroupedAllocation::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :grouped_with_prorated_minimum_config

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
              grouped_with_prorated_minimum_config: T::Hash[Symbol, T.anything],
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            grouped_with_prorated_minimum_config:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :grouped_with_prorated_minimum
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::OrSymbol,
                grouped_with_prorated_minimum_config:
                  T::Hash[Symbol, T.anything],
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :grouped_with_metered_minimum_config

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
              grouped_with_metered_minimum_config: T::Hash[Symbol, T.anything],
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            grouped_with_metered_minimum_config:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :grouped_with_metered_minimum
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::OrSymbol,
                grouped_with_metered_minimum_config:
                  T::Hash[Symbol, T.anything],
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :matrix_with_display_name_config

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::OrSymbol,
              item_id: String,
              matrix_with_display_name_config: T::Hash[Symbol, T.anything],
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            matrix_with_display_name_config:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :matrix_with_display_name
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::OrSymbol,
                item_id: String,
                matrix_with_display_name_config: T::Hash[Symbol, T.anything],
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class BulkWithProration < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :bulk_with_proration_config

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::BulkWithProration::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              bulk_with_proration_config: T::Hash[Symbol, T.anything],
              cadence:
                Orb::PlanCreateParams::Price::BulkWithProration::Cadence::OrSymbol,
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            bulk_with_proration_config:,
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :bulk_with_proration
          )
          end

          sig do
            override.returns(
              {
                bulk_with_proration_config: T::Hash[Symbol, T.anything],
                cadence:
                  Orb::PlanCreateParams::Price::BulkWithProration::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::BulkWithProration::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::BulkWithProration::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::BulkWithProration::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::BulkWithProration::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::BulkWithProration::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::BulkWithProration::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::BulkWithProration::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::BulkWithProration::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class GroupedTieredPackage < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :grouped_tiered_package_config

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::OrSymbol,
              grouped_tiered_package_config: T::Hash[Symbol, T.anything],
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            grouped_tiered_package_config:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :grouped_tiered_package
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::OrSymbol,
                grouped_tiered_package_config: T::Hash[Symbol, T.anything],
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :max_group_tiered_package_config

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
              item_id: String,
              max_group_tiered_package_config: T::Hash[Symbol, T.anything],
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            max_group_tiered_package_config:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :max_group_tiered_package
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::OrSymbol,
                item_id: String,
                max_group_tiered_package_config: T::Hash[Symbol, T.anything],
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :scalable_matrix_with_unit_pricing_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
              item_id: String,
              name: String,
              scalable_matrix_with_unit_pricing_config:
                T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            scalable_matrix_with_unit_pricing_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :scalable_matrix_with_unit_pricing
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                scalable_matrix_with_unit_pricing_config:
                  T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :scalable_matrix_with_tiered_pricing_config

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
              item_id: String,
              name: String,
              scalable_matrix_with_tiered_pricing_config:
                T::Hash[Symbol, T.anything],
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            scalable_matrix_with_tiered_pricing_config:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :scalable_matrix_with_tiered_pricing
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::OrSymbol,
                item_id: String,
                model_type: Symbol,
                name: String,
                scalable_matrix_with_tiered_pricing_config:
                  T::Hash[Symbol, T.anything],
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
          OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

          # The cadence to bill for this price on.
          sig do
            returns(
              Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::OrSymbol
            )
          end
          attr_accessor :cadence

          sig { returns(T::Hash[Symbol, T.anything]) }
          attr_accessor :cumulative_grouped_bulk_config

          # The id of the item the price will be associated with.
          sig { returns(String) }
          attr_accessor :item_id

          sig { returns(Symbol) }
          attr_accessor :model_type

          # The name of the price.
          sig { returns(String) }
          attr_accessor :name

          # The id of the billable metric for the price. Only needed if the price is
          # usage-based.
          sig { returns(T.nilable(String)) }
          attr_accessor :billable_metric_id

          # If the Price represents a fixed cost, the price will be billed in-advance if
          # this is true, and in-arrears if this is false.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :billed_in_advance

          # For custom cadence: specifies the duration of the billing period in days or
          # months.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration
              )
            )
          end
          attr_reader :billing_cycle_configuration

          sig do
            params(
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :billing_cycle_configuration

          # The per unit conversion rate of the price currency to the invoicing currency.
          sig { returns(T.nilable(Float)) }
          attr_accessor :conversion_rate

          # An ISO 4217 currency string, or custom pricing unit identifier, in which this
          # price is billed.
          sig { returns(T.nilable(String)) }
          attr_accessor :currency

          # An alias for the price.
          sig { returns(T.nilable(String)) }
          attr_accessor :external_price_id

          # If the Price represents a fixed cost, this represents the quantity of units
          # applied.
          sig { returns(T.nilable(Float)) }
          attr_accessor :fixed_price_quantity

          # The property used to group this price on an invoice
          sig { returns(T.nilable(String)) }
          attr_accessor :invoice_grouping_key

          # Within each billing cycle, specifies the cadence at which invoices are produced.
          # If unspecified, a single invoice is produced per billing cycle.
          sig do
            returns(
              T.nilable(
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
              )
            )
          end
          attr_reader :invoicing_cycle_configuration

          sig do
            params(
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                )
            ).void
          end
          attr_writer :invoicing_cycle_configuration

          # User-specified key/value pairs for the resource. Individual keys can be removed
          # by setting the value to `null`, and the entire metadata mapping can be cleared
          # by setting `metadata` to `null`.
          sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
          attr_accessor :metadata

          sig do
            params(
              cadence:
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
              cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
              item_id: String,
              name: String,
              billable_metric_id: T.nilable(String),
              billed_in_advance: T.nilable(T::Boolean),
              billing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::OrHash
                ),
              conversion_rate: T.nilable(Float),
              currency: T.nilable(String),
              external_price_id: T.nilable(String),
              fixed_price_quantity: T.nilable(Float),
              invoice_grouping_key: T.nilable(String),
              invoicing_cycle_configuration:
                T.nilable(
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::OrHash
                ),
              metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
              model_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The cadence to bill for this price on.
            cadence:,
            cumulative_grouped_bulk_config:,
            # The id of the item the price will be associated with.
            item_id:,
            # The name of the price.
            name:,
            # The id of the billable metric for the price. Only needed if the price is
            # usage-based.
            billable_metric_id: nil,
            # If the Price represents a fixed cost, the price will be billed in-advance if
            # this is true, and in-arrears if this is false.
            billed_in_advance: nil,
            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            billing_cycle_configuration: nil,
            # The per unit conversion rate of the price currency to the invoicing currency.
            conversion_rate: nil,
            # An ISO 4217 currency string, or custom pricing unit identifier, in which this
            # price is billed.
            currency: nil,
            # An alias for the price.
            external_price_id: nil,
            # If the Price represents a fixed cost, this represents the quantity of units
            # applied.
            fixed_price_quantity: nil,
            # The property used to group this price on an invoice
            invoice_grouping_key: nil,
            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            invoicing_cycle_configuration: nil,
            # User-specified key/value pairs for the resource. Individual keys can be removed
            # by setting the value to `null`, and the entire metadata mapping can be cleared
            # by setting `metadata` to `null`.
            metadata: nil,
            model_type: :cumulative_grouped_bulk
          )
          end

          sig do
            override.returns(
              {
                cadence:
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::OrSymbol,
                cumulative_grouped_bulk_config: T::Hash[Symbol, T.anything],
                item_id: String,
                model_type: Symbol,
                name: String,
                billable_metric_id: T.nilable(String),
                billed_in_advance: T.nilable(T::Boolean),
                billing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration
                  ),
                conversion_rate: T.nilable(Float),
                currency: T.nilable(String),
                external_price_id: T.nilable(String),
                fixed_price_quantity: T.nilable(Float),
                invoice_grouping_key: T.nilable(String),
                invoicing_cycle_configuration:
                  T.nilable(
                    Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration
                  ),
                metadata: T.nilable(T::Hash[Symbol, T.nilable(String)])
              }
            )
          end
          def to_hash
          end

          # The cadence to bill for this price on.
          module Cadence
            extend Orb::Internal::Type::Enum

            TaggedSymbol =
              T.type_alias do
                T.all(
                  Symbol,
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence
                )
              end
            OrSymbol = T.type_alias { T.any(Symbol, String) }

            ANNUAL =
              T.let(
                :annual,
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
              )
            SEMI_ANNUAL =
              T.let(
                :semi_annual,
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
              )
            MONTHLY =
              T.let(
                :monthly,
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
              )
            QUARTERLY =
              T.let(
                :quarterly,
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
              )
            ONE_TIME =
              T.let(
                :one_time,
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
              )
            CUSTOM =
              T.let(
                :custom,
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
              )

            sig do
              override.returns(
                T::Array[
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::Cadence::TaggedSymbol
                ]
              )
            end
            def self.values
            end
          end

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # For custom cadence: specifies the duration of the billing period in days or
            # months.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            OrHash = T.type_alias { T.any(T.self_type, Orb::Internal::AnyHash) }

            # The duration of the billing period.
            sig { returns(Integer) }
            attr_accessor :duration

            # The unit of billing period duration.
            sig do
              returns(
                Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              )
            end
            attr_accessor :duration_unit

            # Within each billing cycle, specifies the cadence at which invoices are produced.
            # If unspecified, a single invoice is produced per billing cycle.
            sig do
              params(
                duration: Integer,
                duration_unit:
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
              ).returns(T.attached_class)
            end
            def self.new(
              # The duration of the billing period.
              duration:,
              # The unit of billing period duration.
              duration_unit:
            )
            end

            sig do
              override.returns(
                {
                  duration: Integer,
                  duration_unit:
                    Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::OrSymbol
                }
              )
            end
            def to_hash
            end

            # The unit of billing period duration.
            module DurationUnit
              extend Orb::Internal::Type::Enum

              TaggedSymbol =
                T.type_alias do
                  T.all(
                    Symbol,
                    Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit
                  )
                end
              OrSymbol = T.type_alias { T.any(Symbol, String) }

              DAY =
                T.let(
                  :day,
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )
              MONTH =
                T.let(
                  :month,
                  Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                )

              sig do
                override.returns(
                  T::Array[
                    Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::DurationUnit::TaggedSymbol
                  ]
                )
              end
              def self.values
              end
            end
          end
        end

        sig do
          override.returns(T::Array[Orb::PlanCreateParams::Price::Variants])
        end
        def self.variants
        end
      end

      # The status of the plan to create (either active or draft). If not specified,
      # this defaults to active.
      module Status
        extend Orb::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias { T.all(Symbol, Orb::PlanCreateParams::Status) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        ACTIVE = T.let(:active, Orb::PlanCreateParams::Status::TaggedSymbol)
        DRAFT = T.let(:draft, Orb::PlanCreateParams::Status::TaggedSymbol)

        sig do
          override.returns(
            T::Array[Orb::PlanCreateParams::Status::TaggedSymbol]
          )
        end
        def self.values
        end
      end
    end
  end
end
