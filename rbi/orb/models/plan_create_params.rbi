# typed: strong

module Orb
  module Models
    class PlanCreateParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      OrHash =
        T.type_alias { T.any(Orb::PlanCreateParams, Orb::Internal::AnyHash) }

      # An ISO 4217 currency string for invoices generated by subscriptions on this
      # plan.
      sig { returns(String) }
      attr_accessor :currency

      sig { returns(String) }
      attr_accessor :name

      # Prices for this plan. If the plan has phases, this includes prices across all
      # phases of the plan.
      sig do
        returns(
          T::Array[
            T.any(
              Orb::NewPlanUnitPrice,
              Orb::NewPlanPackagePrice,
              Orb::NewPlanMatrixPrice,
              Orb::NewPlanTieredPrice,
              Orb::NewPlanTieredBPSPrice,
              Orb::NewPlanBPSPrice,
              Orb::NewPlanBulkBPSPrice,
              Orb::NewPlanBulkPrice,
              Orb::NewPlanThresholdTotalAmountPrice,
              Orb::NewPlanTieredPackagePrice,
              Orb::NewPlanTieredWithMinimumPrice,
              Orb::NewPlanUnitWithPercentPrice,
              Orb::NewPlanPackageWithAllocationPrice,
              Orb::NewPlanTierWithProrationPrice,
              Orb::NewPlanUnitWithProrationPrice,
              Orb::NewPlanGroupedAllocationPrice,
              Orb::NewPlanGroupedWithProratedMinimumPrice,
              Orb::NewPlanGroupedWithMeteredMinimumPrice,
              Orb::NewPlanMatrixWithDisplayNamePrice,
              Orb::NewPlanBulkWithProrationPrice,
              Orb::NewPlanGroupedTieredPackagePrice,
              Orb::NewPlanMaxGroupTieredPackagePrice,
              Orb::NewPlanScalableMatrixWithUnitPricingPrice,
              Orb::NewPlanScalableMatrixWithTieredPricingPrice,
              Orb::NewPlanCumulativeGroupedBulkPrice,
              Orb::NewPlanTieredPackageWithMinimumPrice,
              Orb::NewPlanMatrixWithAllocationPrice,
              Orb::NewPlanGroupedTieredPrice
            )
          ]
        )
      end
      attr_accessor :prices

      # Free-form text which is available on the invoice PDF and the Orb invoice portal.
      sig { returns(T.nilable(String)) }
      attr_accessor :default_invoice_memo

      sig { returns(T.nilable(String)) }
      attr_accessor :external_plan_id

      # User-specified key/value pairs for the resource. Individual keys can be removed
      # by setting the value to `null`, and the entire metadata mapping can be cleared
      # by setting `metadata` to `null`.
      sig { returns(T.nilable(T::Hash[Symbol, T.nilable(String)])) }
      attr_accessor :metadata

      # The net terms determines the difference between the invoice date and the issue
      # date for the invoice. If you intend the invoice to be due on issue, set this
      # to 0.
      sig { returns(T.nilable(Integer)) }
      attr_accessor :net_terms

      # The status of the plan to create (either active or draft). If not specified,
      # this defaults to active.
      sig { returns(T.nilable(Orb::PlanCreateParams::Status::OrSymbol)) }
      attr_reader :status

      sig { params(status: Orb::PlanCreateParams::Status::OrSymbol).void }
      attr_writer :status

      sig do
        params(
          currency: String,
          name: String,
          prices:
            T::Array[
              T.any(
                Orb::NewPlanUnitPrice::OrHash,
                Orb::NewPlanPackagePrice::OrHash,
                Orb::NewPlanMatrixPrice::OrHash,
                Orb::NewPlanTieredPrice::OrHash,
                Orb::NewPlanTieredBPSPrice::OrHash,
                Orb::NewPlanBPSPrice::OrHash,
                Orb::NewPlanBulkBPSPrice::OrHash,
                Orb::NewPlanBulkPrice::OrHash,
                Orb::NewPlanThresholdTotalAmountPrice::OrHash,
                Orb::NewPlanTieredPackagePrice::OrHash,
                Orb::NewPlanTieredWithMinimumPrice::OrHash,
                Orb::NewPlanUnitWithPercentPrice::OrHash,
                Orb::NewPlanPackageWithAllocationPrice::OrHash,
                Orb::NewPlanTierWithProrationPrice::OrHash,
                Orb::NewPlanUnitWithProrationPrice::OrHash,
                Orb::NewPlanGroupedAllocationPrice::OrHash,
                Orb::NewPlanGroupedWithProratedMinimumPrice::OrHash,
                Orb::NewPlanGroupedWithMeteredMinimumPrice::OrHash,
                Orb::NewPlanMatrixWithDisplayNamePrice::OrHash,
                Orb::NewPlanBulkWithProrationPrice::OrHash,
                Orb::NewPlanGroupedTieredPackagePrice::OrHash,
                Orb::NewPlanMaxGroupTieredPackagePrice::OrHash,
                Orb::NewPlanScalableMatrixWithUnitPricingPrice::OrHash,
                Orb::NewPlanScalableMatrixWithTieredPricingPrice::OrHash,
                Orb::NewPlanCumulativeGroupedBulkPrice::OrHash,
                Orb::NewPlanTieredPackageWithMinimumPrice::OrHash,
                Orb::NewPlanMatrixWithAllocationPrice::OrHash,
                Orb::NewPlanGroupedTieredPrice::OrHash
              )
            ],
          default_invoice_memo: T.nilable(String),
          external_plan_id: T.nilable(String),
          metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
          net_terms: T.nilable(Integer),
          status: Orb::PlanCreateParams::Status::OrSymbol,
          request_options: Orb::RequestOptions::OrHash
        ).returns(T.attached_class)
      end
      def self.new(
        # An ISO 4217 currency string for invoices generated by subscriptions on this
        # plan.
        currency:,
        name:,
        # Prices for this plan. If the plan has phases, this includes prices across all
        # phases of the plan.
        prices:,
        # Free-form text which is available on the invoice PDF and the Orb invoice portal.
        default_invoice_memo: nil,
        external_plan_id: nil,
        # User-specified key/value pairs for the resource. Individual keys can be removed
        # by setting the value to `null`, and the entire metadata mapping can be cleared
        # by setting `metadata` to `null`.
        metadata: nil,
        # The net terms determines the difference between the invoice date and the issue
        # date for the invoice. If you intend the invoice to be due on issue, set this
        # to 0.
        net_terms: nil,
        # The status of the plan to create (either active or draft). If not specified,
        # this defaults to active.
        status: nil,
        request_options: {}
      )
      end

      sig do
        override.returns(
          {
            currency: String,
            name: String,
            prices:
              T::Array[
                T.any(
                  Orb::NewPlanUnitPrice,
                  Orb::NewPlanPackagePrice,
                  Orb::NewPlanMatrixPrice,
                  Orb::NewPlanTieredPrice,
                  Orb::NewPlanTieredBPSPrice,
                  Orb::NewPlanBPSPrice,
                  Orb::NewPlanBulkBPSPrice,
                  Orb::NewPlanBulkPrice,
                  Orb::NewPlanThresholdTotalAmountPrice,
                  Orb::NewPlanTieredPackagePrice,
                  Orb::NewPlanTieredWithMinimumPrice,
                  Orb::NewPlanUnitWithPercentPrice,
                  Orb::NewPlanPackageWithAllocationPrice,
                  Orb::NewPlanTierWithProrationPrice,
                  Orb::NewPlanUnitWithProrationPrice,
                  Orb::NewPlanGroupedAllocationPrice,
                  Orb::NewPlanGroupedWithProratedMinimumPrice,
                  Orb::NewPlanGroupedWithMeteredMinimumPrice,
                  Orb::NewPlanMatrixWithDisplayNamePrice,
                  Orb::NewPlanBulkWithProrationPrice,
                  Orb::NewPlanGroupedTieredPackagePrice,
                  Orb::NewPlanMaxGroupTieredPackagePrice,
                  Orb::NewPlanScalableMatrixWithUnitPricingPrice,
                  Orb::NewPlanScalableMatrixWithTieredPricingPrice,
                  Orb::NewPlanCumulativeGroupedBulkPrice,
                  Orb::NewPlanTieredPackageWithMinimumPrice,
                  Orb::NewPlanMatrixWithAllocationPrice,
                  Orb::NewPlanGroupedTieredPrice
                )
              ],
            default_invoice_memo: T.nilable(String),
            external_plan_id: T.nilable(String),
            metadata: T.nilable(T::Hash[Symbol, T.nilable(String)]),
            net_terms: T.nilable(Integer),
            status: Orb::PlanCreateParams::Status::OrSymbol,
            request_options: Orb::RequestOptions
          }
        )
      end
      def to_hash
      end

      module Price
        extend Orb::Internal::Type::Union

        Variants =
          T.type_alias do
            T.any(
              Orb::NewPlanUnitPrice,
              Orb::NewPlanPackagePrice,
              Orb::NewPlanMatrixPrice,
              Orb::NewPlanTieredPrice,
              Orb::NewPlanTieredBPSPrice,
              Orb::NewPlanBPSPrice,
              Orb::NewPlanBulkBPSPrice,
              Orb::NewPlanBulkPrice,
              Orb::NewPlanThresholdTotalAmountPrice,
              Orb::NewPlanTieredPackagePrice,
              Orb::NewPlanTieredWithMinimumPrice,
              Orb::NewPlanUnitWithPercentPrice,
              Orb::NewPlanPackageWithAllocationPrice,
              Orb::NewPlanTierWithProrationPrice,
              Orb::NewPlanUnitWithProrationPrice,
              Orb::NewPlanGroupedAllocationPrice,
              Orb::NewPlanGroupedWithProratedMinimumPrice,
              Orb::NewPlanGroupedWithMeteredMinimumPrice,
              Orb::NewPlanMatrixWithDisplayNamePrice,
              Orb::NewPlanBulkWithProrationPrice,
              Orb::NewPlanGroupedTieredPackagePrice,
              Orb::NewPlanMaxGroupTieredPackagePrice,
              Orb::NewPlanScalableMatrixWithUnitPricingPrice,
              Orb::NewPlanScalableMatrixWithTieredPricingPrice,
              Orb::NewPlanCumulativeGroupedBulkPrice,
              Orb::NewPlanTieredPackageWithMinimumPrice,
              Orb::NewPlanMatrixWithAllocationPrice,
              Orb::NewPlanGroupedTieredPrice
            )
          end

        sig do
          override.returns(T::Array[Orb::PlanCreateParams::Price::Variants])
        end
        def self.variants
        end
      end

      # The status of the plan to create (either active or draft). If not specified,
      # this defaults to active.
      module Status
        extend Orb::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias { T.all(Symbol, Orb::PlanCreateParams::Status) }
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        ACTIVE = T.let(:active, Orb::PlanCreateParams::Status::TaggedSymbol)
        DRAFT = T.let(:draft, Orb::PlanCreateParams::Status::TaggedSymbol)

        sig do
          override.returns(
            T::Array[Orb::PlanCreateParams::Status::TaggedSymbol]
          )
        end
        def self.values
        end
      end
    end
  end
end
