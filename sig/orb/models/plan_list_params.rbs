module Orb
  module Models
    type plan_list_params =
      {
        created_at_gt: Time?,
        created_at_gte: Time?,
        created_at_lt: Time?,
        created_at_lte: Time?,
        cursor: String?,
        limit: Integer,
        status: Orb::Models::PlanListParams::status
      }
      & Orb::Internal::Type::request_parameters

    class PlanListParams < Orb::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor created_at_gt: Time?

      attr_accessor created_at_gte: Time?

      attr_accessor created_at_lt: Time?

      attr_accessor created_at_lte: Time?

      attr_accessor cursor: String?

      attr_reader limit: Integer?

      def limit=: (Integer) -> Integer

      attr_reader status: Orb::Models::PlanListParams::status?

      def status=: (
        Orb::Models::PlanListParams::status
      ) -> Orb::Models::PlanListParams::status

      def initialize: (
        ?created_at_gt: Time?,
        ?created_at_gte: Time?,
        ?created_at_lt: Time?,
        ?created_at_lte: Time?,
        ?cursor: String?,
        ?limit: Integer,
        ?status: Orb::Models::PlanListParams::status,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> Orb::Models::plan_list_params

      type status = :active | :archived | :draft

      module Status
        extend Orb::Enum

        ACTIVE: :active
        ARCHIVED: :archived
        DRAFT: :draft

        def self?.values: -> ::Array[Orb::Models::PlanListParams::status]
      end
    end
  end
end
