module Orb
  module Models
    type evaluate_price_group =
      {
        amount: String,
        grouping_values: ::Array[Orb::EvaluatePriceGroup::grouping_value],
        quantity: Float
      }

    class EvaluatePriceGroup < Orb::Internal::Type::BaseModel
      attr_accessor amount: String

      attr_accessor grouping_values: ::Array[Orb::EvaluatePriceGroup::grouping_value]

      attr_accessor quantity: Float

      def initialize: (
        amount: String,
        grouping_values: ::Array[Orb::EvaluatePriceGroup::grouping_value],
        quantity: Float
      ) -> void

      type grouping_value = String | Float | bool

      module GroupingValue
        extend Orb::Internal::Type::Union

        def self?.variants: -> ::Array[Orb::EvaluatePriceGroup::grouping_value]
      end
    end
  end
end
