module Orb
  module Models
    type billable_metric =
      {
        id: String,
        description: String?,
        item: Orb::Item,
        metadata: ::Hash[Symbol, String],
        name: String,
        status: Orb::Models::BillableMetric::status
      }

    class BillableMetric < Orb::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor description: String?

      attr_accessor item: Orb::Item

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor name: String

      attr_accessor status: Orb::Models::BillableMetric::status

      def initialize: (
        id: String,
        description: String?,
        item: Orb::Item,
        metadata: ::Hash[Symbol, String],
        name: String,
        status: Orb::Models::BillableMetric::status
      ) -> void

      def to_hash: -> {
        id: String,
        description: String?,
        item: Orb::Item,
        metadata: ::Hash[Symbol, String],
        name: String,
        status: Orb::Models::BillableMetric::status
      }

      type status = :active | :draft | :archived

      module Status
        extend Orb::Internal::Type::Enum

        ACTIVE: :active
        DRAFT: :draft
        ARCHIVED: :archived

        def self?.values: -> ::Array[Orb::Models::BillableMetric::status]
      end
    end
  end
end
