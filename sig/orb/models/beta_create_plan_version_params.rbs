module Orb
  module Models
    type beta_create_plan_version_params =
      {
        version: Integer,
        add_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::AddAdjustment]?,
        add_prices: ::Array[Orb::BetaCreatePlanVersionParams::AddPrice]?,
        remove_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::RemoveAdjustment]?,
        remove_prices: ::Array[Orb::BetaCreatePlanVersionParams::RemovePrice]?,
        replace_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::ReplaceAdjustment]?,
        replace_prices: ::Array[Orb::BetaCreatePlanVersionParams::ReplacePrice]?,
        set_as_default: bool?
      }
      & Orb::Internal::Type::request_parameters

    class BetaCreatePlanVersionParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor version: Integer

      attr_accessor add_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::AddAdjustment]?

      attr_accessor add_prices: ::Array[Orb::BetaCreatePlanVersionParams::AddPrice]?

      attr_accessor remove_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::RemoveAdjustment]?

      attr_accessor remove_prices: ::Array[Orb::BetaCreatePlanVersionParams::RemovePrice]?

      attr_accessor replace_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::ReplaceAdjustment]?

      attr_accessor replace_prices: ::Array[Orb::BetaCreatePlanVersionParams::ReplacePrice]?

      attr_accessor set_as_default: bool?

      def initialize: (
        version: Integer,
        ?add_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::AddAdjustment]?,
        ?add_prices: ::Array[Orb::BetaCreatePlanVersionParams::AddPrice]?,
        ?remove_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::RemoveAdjustment]?,
        ?remove_prices: ::Array[Orb::BetaCreatePlanVersionParams::RemovePrice]?,
        ?replace_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::ReplaceAdjustment]?,
        ?replace_prices: ::Array[Orb::BetaCreatePlanVersionParams::ReplacePrice]?,
        ?set_as_default: bool?,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> {
        version: Integer,
        add_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::AddAdjustment]?,
        add_prices: ::Array[Orb::BetaCreatePlanVersionParams::AddPrice]?,
        remove_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::RemoveAdjustment]?,
        remove_prices: ::Array[Orb::BetaCreatePlanVersionParams::RemovePrice]?,
        replace_adjustments: ::Array[Orb::BetaCreatePlanVersionParams::ReplaceAdjustment]?,
        replace_prices: ::Array[Orb::BetaCreatePlanVersionParams::ReplacePrice]?,
        set_as_default: bool?,
        request_options: Orb::RequestOptions
      }

      type add_adjustment =
        {
          adjustment: Orb::Models::BetaCreatePlanVersionParams::AddAdjustment::adjustment,
          plan_phase_order: Integer?
        }

      class AddAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment: Orb::Models::BetaCreatePlanVersionParams::AddAdjustment::adjustment

        attr_accessor plan_phase_order: Integer?

        def initialize: (
          adjustment: Orb::Models::BetaCreatePlanVersionParams::AddAdjustment::adjustment,
          ?plan_phase_order: Integer?
        ) -> void

        def to_hash: -> {
          adjustment: Orb::Models::BetaCreatePlanVersionParams::AddAdjustment::adjustment,
          plan_phase_order: Integer?
        }

        type adjustment =
          Orb::NewPercentageDiscount
          | Orb::NewUsageDiscount
          | Orb::NewAmountDiscount
          | Orb::NewMinimum
          | Orb::NewMaximum

        module Adjustment
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::BetaCreatePlanVersionParams::AddAdjustment::adjustment]
        end
      end

      type add_price =
        {
          allocation_price: Orb::NewAllocationPrice?,
          plan_phase_order: Integer?,
          price: Orb::Models::BetaCreatePlanVersionParams::AddPrice::price?
        }

      class AddPrice < Orb::Internal::Type::BaseModel
        attr_accessor allocation_price: Orb::NewAllocationPrice?

        attr_accessor plan_phase_order: Integer?

        attr_accessor price: Orb::Models::BetaCreatePlanVersionParams::AddPrice::price?

        def initialize: (
          ?allocation_price: Orb::NewAllocationPrice?,
          ?plan_phase_order: Integer?,
          ?price: Orb::Models::BetaCreatePlanVersionParams::AddPrice::price?
        ) -> void

        def to_hash: -> {
          allocation_price: Orb::NewAllocationPrice?,
          plan_phase_order: Integer?,
          price: Orb::Models::BetaCreatePlanVersionParams::AddPrice::price?
        }

        type price =
          Orb::NewPlanUnitPrice
          | Orb::NewPlanPackagePrice
          | Orb::NewPlanMatrixPrice
          | Orb::NewPlanTieredPrice
          | Orb::NewPlanTieredBPSPrice
          | Orb::NewPlanBPSPrice
          | Orb::NewPlanBulkBPSPrice
          | Orb::NewPlanBulkPrice
          | Orb::NewPlanThresholdTotalAmountPrice
          | Orb::NewPlanTieredPackagePrice
          | Orb::NewPlanTieredWithMinimumPrice
          | Orb::NewPlanUnitWithPercentPrice
          | Orb::NewPlanPackageWithAllocationPrice
          | Orb::NewPlanTierWithProrationPrice
          | Orb::NewPlanUnitWithProrationPrice
          | Orb::NewPlanGroupedAllocationPrice
          | Orb::NewPlanGroupedWithProratedMinimumPrice
          | Orb::NewPlanGroupedWithMeteredMinimumPrice
          | Orb::NewPlanMatrixWithDisplayNamePrice
          | Orb::NewPlanBulkWithProrationPrice
          | Orb::NewPlanGroupedTieredPackagePrice
          | Orb::NewPlanMaxGroupTieredPackagePrice
          | Orb::NewPlanScalableMatrixWithUnitPricingPrice
          | Orb::NewPlanScalableMatrixWithTieredPricingPrice
          | Orb::NewPlanCumulativeGroupedBulkPrice
          | Orb::NewPlanTieredPackageWithMinimumPrice
          | Orb::NewPlanMatrixWithAllocationPrice
          | Orb::NewPlanGroupedTieredPrice

        module Price
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::BetaCreatePlanVersionParams::AddPrice::price]
        end
      end

      type remove_adjustment =
        { adjustment_id: String, plan_phase_order: Integer? }

      class RemoveAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment_id: String

        attr_accessor plan_phase_order: Integer?

        def initialize: (
          adjustment_id: String,
          ?plan_phase_order: Integer?
        ) -> void

        def to_hash: -> { adjustment_id: String, plan_phase_order: Integer? }
      end

      type remove_price = { price_id: String, plan_phase_order: Integer? }

      class RemovePrice < Orb::Internal::Type::BaseModel
        attr_accessor price_id: String

        attr_accessor plan_phase_order: Integer?

        def initialize: (price_id: String, ?plan_phase_order: Integer?) -> void

        def to_hash: -> { price_id: String, plan_phase_order: Integer? }
      end

      type replace_adjustment =
        {
          adjustment: Orb::Models::BetaCreatePlanVersionParams::ReplaceAdjustment::adjustment,
          replaces_adjustment_id: String,
          plan_phase_order: Integer?
        }

      class ReplaceAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment: Orb::Models::BetaCreatePlanVersionParams::ReplaceAdjustment::adjustment

        attr_accessor replaces_adjustment_id: String

        attr_accessor plan_phase_order: Integer?

        def initialize: (
          adjustment: Orb::Models::BetaCreatePlanVersionParams::ReplaceAdjustment::adjustment,
          replaces_adjustment_id: String,
          ?plan_phase_order: Integer?
        ) -> void

        def to_hash: -> {
          adjustment: Orb::Models::BetaCreatePlanVersionParams::ReplaceAdjustment::adjustment,
          replaces_adjustment_id: String,
          plan_phase_order: Integer?
        }

        type adjustment =
          Orb::NewPercentageDiscount
          | Orb::NewUsageDiscount
          | Orb::NewAmountDiscount
          | Orb::NewMinimum
          | Orb::NewMaximum

        module Adjustment
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::BetaCreatePlanVersionParams::ReplaceAdjustment::adjustment]
        end
      end

      type replace_price =
        {
          replaces_price_id: String,
          allocation_price: Orb::NewAllocationPrice?,
          plan_phase_order: Integer?,
          price: Orb::Models::BetaCreatePlanVersionParams::ReplacePrice::price?
        }

      class ReplacePrice < Orb::Internal::Type::BaseModel
        attr_accessor replaces_price_id: String

        attr_accessor allocation_price: Orb::NewAllocationPrice?

        attr_accessor plan_phase_order: Integer?

        attr_accessor price: Orb::Models::BetaCreatePlanVersionParams::ReplacePrice::price?

        def initialize: (
          replaces_price_id: String,
          ?allocation_price: Orb::NewAllocationPrice?,
          ?plan_phase_order: Integer?,
          ?price: Orb::Models::BetaCreatePlanVersionParams::ReplacePrice::price?
        ) -> void

        def to_hash: -> {
          replaces_price_id: String,
          allocation_price: Orb::NewAllocationPrice?,
          plan_phase_order: Integer?,
          price: Orb::Models::BetaCreatePlanVersionParams::ReplacePrice::price?
        }

        type price =
          Orb::NewPlanUnitPrice
          | Orb::NewPlanPackagePrice
          | Orb::NewPlanMatrixPrice
          | Orb::NewPlanTieredPrice
          | Orb::NewPlanTieredBPSPrice
          | Orb::NewPlanBPSPrice
          | Orb::NewPlanBulkBPSPrice
          | Orb::NewPlanBulkPrice
          | Orb::NewPlanThresholdTotalAmountPrice
          | Orb::NewPlanTieredPackagePrice
          | Orb::NewPlanTieredWithMinimumPrice
          | Orb::NewPlanUnitWithPercentPrice
          | Orb::NewPlanPackageWithAllocationPrice
          | Orb::NewPlanTierWithProrationPrice
          | Orb::NewPlanUnitWithProrationPrice
          | Orb::NewPlanGroupedAllocationPrice
          | Orb::NewPlanGroupedWithProratedMinimumPrice
          | Orb::NewPlanGroupedWithMeteredMinimumPrice
          | Orb::NewPlanMatrixWithDisplayNamePrice
          | Orb::NewPlanBulkWithProrationPrice
          | Orb::NewPlanGroupedTieredPackagePrice
          | Orb::NewPlanMaxGroupTieredPackagePrice
          | Orb::NewPlanScalableMatrixWithUnitPricingPrice
          | Orb::NewPlanScalableMatrixWithTieredPricingPrice
          | Orb::NewPlanCumulativeGroupedBulkPrice
          | Orb::NewPlanTieredPackageWithMinimumPrice
          | Orb::NewPlanMatrixWithAllocationPrice
          | Orb::NewPlanGroupedTieredPrice

        module Price
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::BetaCreatePlanVersionParams::ReplacePrice::price]
        end
      end
    end
  end
end
