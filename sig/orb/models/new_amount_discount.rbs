module Orb
  module Models
    type new_amount_discount =
      {
        adjustment_type: Orb::Models::NewAmountDiscount::adjustment_type,
        amount_discount: String,
        applies_to_all: Orb::Models::NewAmountDiscount::applies_to_all?,
        applies_to_item_ids: ::Array[String]?,
        applies_to_price_ids: ::Array[String]?,
        currency: String?,
        filters: ::Array[Orb::TransformPriceFilter]?,
        is_invoice_level: bool,
        price_type: Orb::Models::NewAmountDiscount::price_type?
      }

    class NewAmountDiscount < Orb::Internal::Type::BaseModel
      attr_accessor adjustment_type: Orb::Models::NewAmountDiscount::adjustment_type

      attr_accessor amount_discount: String

      attr_accessor applies_to_all: Orb::Models::NewAmountDiscount::applies_to_all?

      attr_accessor applies_to_item_ids: ::Array[String]?

      attr_accessor applies_to_price_ids: ::Array[String]?

      attr_accessor currency: String?

      attr_accessor filters: ::Array[Orb::TransformPriceFilter]?

      attr_reader is_invoice_level: bool?

      def is_invoice_level=: (bool) -> bool

      attr_accessor price_type: Orb::Models::NewAmountDiscount::price_type?

      def initialize: (
        adjustment_type: Orb::Models::NewAmountDiscount::adjustment_type,
        amount_discount: String,
        ?applies_to_all: Orb::Models::NewAmountDiscount::applies_to_all?,
        ?applies_to_item_ids: ::Array[String]?,
        ?applies_to_price_ids: ::Array[String]?,
        ?currency: String?,
        ?filters: ::Array[Orb::TransformPriceFilter]?,
        ?is_invoice_level: bool,
        ?price_type: Orb::Models::NewAmountDiscount::price_type?
      ) -> void

      def to_hash: -> {
        adjustment_type: Orb::Models::NewAmountDiscount::adjustment_type,
        amount_discount: String,
        applies_to_all: Orb::Models::NewAmountDiscount::applies_to_all?,
        applies_to_item_ids: ::Array[String]?,
        applies_to_price_ids: ::Array[String]?,
        currency: String?,
        filters: ::Array[Orb::TransformPriceFilter]?,
        is_invoice_level: bool,
        price_type: Orb::Models::NewAmountDiscount::price_type?
      }

      type adjustment_type = :amount_discount

      module AdjustmentType
        extend Orb::Internal::Type::Enum

        AMOUNT_DISCOUNT: :amount_discount

        def self?.values: -> ::Array[Orb::Models::NewAmountDiscount::adjustment_type]
      end

      type applies_to_all = true

      module AppliesToAll
        extend Orb::Internal::Type::Enum

        TRUE: true

        def self?.values: -> ::Array[Orb::Models::NewAmountDiscount::applies_to_all]
      end

      type price_type =
        :usage | :fixed_in_advance | :fixed_in_arrears | :fixed | :in_arrears

      module PriceType
        extend Orb::Internal::Type::Enum

        USAGE: :usage
        FIXED_IN_ADVANCE: :fixed_in_advance
        FIXED_IN_ARREARS: :fixed_in_arrears
        FIXED: :fixed
        IN_ARREARS: :in_arrears

        def self?.values: -> ::Array[Orb::Models::NewAmountDiscount::price_type]
      end
    end
  end
end
