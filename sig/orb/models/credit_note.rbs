module Orb
  module Models
    type credit_note =
      {
        id: String,
        created_at: Time,
        credit_note_number: String,
        credit_note_pdf: String?,
        customer: Orb::CreditNote::Customer,
        invoice_id: String,
        line_items: ::Array[Orb::CreditNote::LineItem],
        maximum_amount_adjustment: Orb::CreditNote::MaximumAmountAdjustment?,
        memo: String?,
        minimum_amount_refunded: String?,
        reason: Orb::Models::CreditNote::reason?,
        subtotal: String,
        total: String,
        type: Orb::Models::CreditNote::type_,
        voided_at: Time?,
        discounts: ::Array[Orb::CreditNote::Discount]
      }

    class CreditNote < Orb::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Time

      attr_accessor credit_note_number: String

      attr_accessor credit_note_pdf: String?

      attr_accessor customer: Orb::CreditNote::Customer

      attr_accessor invoice_id: String

      attr_accessor line_items: ::Array[Orb::CreditNote::LineItem]

      attr_accessor maximum_amount_adjustment: Orb::CreditNote::MaximumAmountAdjustment?

      attr_accessor memo: String?

      attr_accessor minimum_amount_refunded: String?

      attr_accessor reason: Orb::Models::CreditNote::reason?

      attr_accessor subtotal: String

      attr_accessor total: String

      attr_accessor type: Orb::Models::CreditNote::type_

      attr_accessor voided_at: Time?

      attr_reader discounts: ::Array[Orb::CreditNote::Discount]?

      def discounts=: (
        ::Array[Orb::CreditNote::Discount]
      ) -> ::Array[Orb::CreditNote::Discount]

      def initialize: (
        id: String,
        created_at: Time,
        credit_note_number: String,
        credit_note_pdf: String?,
        customer: Orb::CreditNote::Customer,
        invoice_id: String,
        line_items: ::Array[Orb::CreditNote::LineItem],
        maximum_amount_adjustment: Orb::CreditNote::MaximumAmountAdjustment?,
        memo: String?,
        minimum_amount_refunded: String?,
        reason: Orb::Models::CreditNote::reason?,
        subtotal: String,
        total: String,
        type: Orb::Models::CreditNote::type_,
        voided_at: Time?,
        ?discounts: ::Array[Orb::CreditNote::Discount]
      ) -> void

      def to_hash: -> {
        id: String,
        created_at: Time,
        credit_note_number: String,
        credit_note_pdf: String?,
        customer: Orb::CreditNote::Customer,
        invoice_id: String,
        line_items: ::Array[Orb::CreditNote::LineItem],
        maximum_amount_adjustment: Orb::CreditNote::MaximumAmountAdjustment?,
        memo: String?,
        minimum_amount_refunded: String?,
        reason: Orb::Models::CreditNote::reason?,
        subtotal: String,
        total: String,
        type: Orb::Models::CreditNote::type_,
        voided_at: Time?,
        discounts: ::Array[Orb::CreditNote::Discount]
      }

      type customer = { id: String, external_customer_id: String? }

      class Customer < Orb::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor external_customer_id: String?

        def initialize: (id: String, external_customer_id: String?) -> void

        def to_hash: -> { id: String, external_customer_id: String? }
      end

      type line_item =
        {
          id: String,
          amount: String,
          item_id: String,
          name: String,
          quantity: Float?,
          subtotal: String,
          tax_amounts: ::Array[Orb::CreditNote::LineItem::TaxAmount],
          discounts: ::Array[Orb::CreditNote::LineItem::Discount]
        }

      class LineItem < Orb::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor amount: String

        attr_accessor item_id: String

        attr_accessor name: String

        attr_accessor quantity: Float?

        attr_accessor subtotal: String

        attr_accessor tax_amounts: ::Array[Orb::CreditNote::LineItem::TaxAmount]

        attr_reader discounts: ::Array[Orb::CreditNote::LineItem::Discount]?

        def discounts=: (
          ::Array[Orb::CreditNote::LineItem::Discount]
        ) -> ::Array[Orb::CreditNote::LineItem::Discount]

        def initialize: (
          id: String,
          amount: String,
          item_id: String,
          name: String,
          quantity: Float?,
          subtotal: String,
          tax_amounts: ::Array[Orb::CreditNote::LineItem::TaxAmount],
          ?discounts: ::Array[Orb::CreditNote::LineItem::Discount]
        ) -> void

        def to_hash: -> {
          id: String,
          amount: String,
          item_id: String,
          name: String,
          quantity: Float?,
          subtotal: String,
          tax_amounts: ::Array[Orb::CreditNote::LineItem::TaxAmount],
          discounts: ::Array[Orb::CreditNote::LineItem::Discount]
        }

        type tax_amount =
          {
            amount: String,
            tax_rate_description: String,
            tax_rate_percentage: String?
          }

        class TaxAmount < Orb::Internal::Type::BaseModel
          attr_accessor amount: String

          attr_accessor tax_rate_description: String

          attr_accessor tax_rate_percentage: String?

          def initialize: (
            amount: String,
            tax_rate_description: String,
            tax_rate_percentage: String?
          ) -> void

          def to_hash: -> {
            amount: String,
            tax_rate_description: String,
            tax_rate_percentage: String?
          }
        end

        type discount =
          {
            id: String,
            amount_applied: String,
            applies_to_price_ids: ::Array[String],
            discount_type: Orb::Models::CreditNote::LineItem::Discount::discount_type,
            percentage_discount: Float,
            amount_discount: String?,
            reason: String?
          }

        class Discount < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amount_applied: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor discount_type: Orb::Models::CreditNote::LineItem::Discount::discount_type

          attr_accessor percentage_discount: Float

          attr_accessor amount_discount: String?

          attr_accessor reason: String?

          def initialize: (
            id: String,
            amount_applied: String,
            applies_to_price_ids: ::Array[String],
            discount_type: Orb::Models::CreditNote::LineItem::Discount::discount_type,
            percentage_discount: Float,
            ?amount_discount: String?,
            ?reason: String?
          ) -> void

          def to_hash: -> {
            id: String,
            amount_applied: String,
            applies_to_price_ids: ::Array[String],
            discount_type: Orb::Models::CreditNote::LineItem::Discount::discount_type,
            percentage_discount: Float,
            amount_discount: String?,
            reason: String?
          }

          type discount_type = :percentage | :amount

          module DiscountType
            extend Orb::Internal::Type::Enum

            PERCENTAGE: :percentage
            AMOUNT: :amount

            def self?.values: -> ::Array[Orb::Models::CreditNote::LineItem::Discount::discount_type]
          end
        end
      end

      type maximum_amount_adjustment =
        {
          amount_applied: String,
          discount_type: Orb::Models::CreditNote::MaximumAmountAdjustment::discount_type,
          percentage_discount: Float,
          applies_to_prices: ::Array[Orb::CreditNote::MaximumAmountAdjustment::AppliesToPrice]?,
          reason: String?
        }

      class MaximumAmountAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor amount_applied: String

        attr_accessor discount_type: Orb::Models::CreditNote::MaximumAmountAdjustment::discount_type

        attr_accessor percentage_discount: Float

        attr_accessor applies_to_prices: ::Array[Orb::CreditNote::MaximumAmountAdjustment::AppliesToPrice]?

        attr_accessor reason: String?

        def initialize: (
          amount_applied: String,
          discount_type: Orb::Models::CreditNote::MaximumAmountAdjustment::discount_type,
          percentage_discount: Float,
          ?applies_to_prices: ::Array[Orb::CreditNote::MaximumAmountAdjustment::AppliesToPrice]?,
          ?reason: String?
        ) -> void

        def to_hash: -> {
          amount_applied: String,
          discount_type: Orb::Models::CreditNote::MaximumAmountAdjustment::discount_type,
          percentage_discount: Float,
          applies_to_prices: ::Array[Orb::CreditNote::MaximumAmountAdjustment::AppliesToPrice]?,
          reason: String?
        }

        type discount_type = :percentage

        module DiscountType
          extend Orb::Internal::Type::Enum

          PERCENTAGE: :percentage

          def self?.values: -> ::Array[Orb::Models::CreditNote::MaximumAmountAdjustment::discount_type]
        end

        type applies_to_price = { id: String, name: String }

        class AppliesToPrice < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor name: String

          def initialize: (id: String, name: String) -> void

          def to_hash: -> { id: String, name: String }
        end
      end

      type reason =
        :Duplicate | :Fraudulent | :"Order change" | :"Product unsatisfactory"

      module Reason
        extend Orb::Internal::Type::Enum

        DUPLICATE: :Duplicate
        FRAUDULENT: :Fraudulent
        ORDER_CHANGE: :"Order change"
        PRODUCT_UNSATISFACTORY: :"Product unsatisfactory"

        def self?.values: -> ::Array[Orb::Models::CreditNote::reason]
      end

      type type_ = :refund | :adjustment

      module Type
        extend Orb::Internal::Type::Enum

        REFUND: :refund
        ADJUSTMENT: :adjustment

        def self?.values: -> ::Array[Orb::Models::CreditNote::type_]
      end

      type discount =
        {
          amount_applied: String,
          discount_type: Orb::Models::CreditNote::Discount::discount_type,
          percentage_discount: Float,
          applies_to_prices: ::Array[Orb::CreditNote::Discount::AppliesToPrice]?,
          reason: String?
        }

      class Discount < Orb::Internal::Type::BaseModel
        attr_accessor amount_applied: String

        attr_accessor discount_type: Orb::Models::CreditNote::Discount::discount_type

        attr_accessor percentage_discount: Float

        attr_accessor applies_to_prices: ::Array[Orb::CreditNote::Discount::AppliesToPrice]?

        attr_accessor reason: String?

        def initialize: (
          amount_applied: String,
          discount_type: Orb::Models::CreditNote::Discount::discount_type,
          percentage_discount: Float,
          ?applies_to_prices: ::Array[Orb::CreditNote::Discount::AppliesToPrice]?,
          ?reason: String?
        ) -> void

        def to_hash: -> {
          amount_applied: String,
          discount_type: Orb::Models::CreditNote::Discount::discount_type,
          percentage_discount: Float,
          applies_to_prices: ::Array[Orb::CreditNote::Discount::AppliesToPrice]?,
          reason: String?
        }

        type discount_type = :percentage

        module DiscountType
          extend Orb::Internal::Type::Enum

          PERCENTAGE: :percentage

          def self?.values: -> ::Array[Orb::Models::CreditNote::Discount::discount_type]
        end

        type applies_to_price = { id: String, name: String }

        class AppliesToPrice < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor name: String

          def initialize: (id: String, name: String) -> void

          def to_hash: -> { id: String, name: String }
        end
      end
    end
  end
end
