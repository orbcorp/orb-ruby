module Orb
  module Models
    type price_model =
      Orb::Models::PriceModel::UnitPrice
      | Orb::Models::PriceModel::PackagePrice
      | Orb::Models::PriceModel::MatrixPrice
      | Orb::Models::PriceModel::TieredPrice
      | Orb::Models::PriceModel::TieredBpsPrice
      | Orb::Models::PriceModel::BpsPrice
      | Orb::Models::PriceModel::BulkBpsPrice
      | Orb::Models::PriceModel::BulkPrice
      | Orb::Models::PriceModel::ThresholdTotalAmountPrice
      | Orb::Models::PriceModel::TieredPackagePrice
      | Orb::Models::PriceModel::GroupedTieredPrice
      | Orb::Models::PriceModel::TieredWithMinimumPrice
      | Orb::Models::PriceModel::TieredPackageWithMinimumPrice
      | Orb::Models::PriceModel::PackageWithAllocationPrice
      | Orb::Models::PriceModel::UnitWithPercentPrice
      | Orb::Models::PriceModel::MatrixWithAllocationPrice
      | Orb::Models::PriceModel::TieredWithProrationPrice
      | Orb::Models::PriceModel::UnitWithProrationPrice
      | Orb::Models::PriceModel::GroupedAllocationPrice
      | Orb::Models::PriceModel::GroupedWithProratedMinimumPrice
      | Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice
      | Orb::Models::PriceModel::MatrixWithDisplayNamePrice
      | Orb::Models::PriceModel::BulkWithProrationPrice
      | Orb::Models::PriceModel::GroupedTieredPackagePrice
      | Orb::Models::PriceModel::MaxGroupTieredPackagePrice
      | Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice
      | Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice
      | Orb::Models::PriceModel::CumulativeGroupedBulkPrice

    class PriceModel < Orb::Union
      type unit_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::UnitPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :unit,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::UnitPrice::price_type,
          unit_config: Orb::Models::UnitConfigModel,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class UnitPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::UnitPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :unit

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::UnitPrice::price_type

        attr_accessor unit_config: Orb::Models::UnitConfigModel

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::UnitPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::UnitPrice::price_type,
            unit_config: Orb::Models::UnitConfigModel,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :unit
          ) -> void
          | (?Orb::Models::PriceModel::unit_price | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::PriceModel::unit_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::UnitPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::UnitPrice::price_type]
        end
      end

      type package_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::PackagePrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :package,
          name: String,
          package_config: Orb::Models::PackageConfigModel,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::PackagePrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class PackagePrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::PackagePrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :package

        attr_accessor name: String

        attr_accessor package_config: Orb::Models::PackageConfigModel

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::PackagePrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::PackagePrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            package_config: Orb::Models::PackageConfigModel,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::PackagePrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :package
          ) -> void
          | (
            ?Orb::Models::PriceModel::package_price | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::package_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::PackagePrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::PackagePrice::price_type]
        end
      end

      type matrix_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::MatrixPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          matrix_config: Orb::Models::MatrixConfigModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :matrix,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::MatrixPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class MatrixPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::MatrixPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor matrix_config: Orb::Models::MatrixConfigModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :matrix

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::MatrixPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::MatrixPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            matrix_config: Orb::Models::MatrixConfigModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::MatrixPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :matrix
          ) -> void
          | (
            ?Orb::Models::PriceModel::matrix_price | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::matrix_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::MatrixPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::MatrixPrice::price_type]
        end
      end

      type tiered_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::TieredPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :tiered,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::TieredPrice::price_type,
          tiered_config: Orb::Models::TieredConfigModel,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class TieredPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::TieredPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :tiered

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::TieredPrice::price_type

        attr_accessor tiered_config: Orb::Models::TieredConfigModel

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::TieredPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::TieredPrice::price_type,
            tiered_config: Orb::Models::TieredConfigModel,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :tiered
          ) -> void
          | (
            ?Orb::Models::PriceModel::tiered_price | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::tiered_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredPrice::price_type]
        end
      end

      type tiered_bps_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::TieredBpsPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :tiered_bps,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::TieredBpsPrice::price_type,
          tiered_bps_config: Orb::Models::TieredBpsConfigModel,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class TieredBpsPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::TieredBpsPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :tiered_bps

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::TieredBpsPrice::price_type

        attr_accessor tiered_bps_config: Orb::Models::TieredBpsConfigModel

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::TieredBpsPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::TieredBpsPrice::price_type,
            tiered_bps_config: Orb::Models::TieredBpsConfigModel,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :tiered_bps
          ) -> void
          | (
            ?Orb::Models::PriceModel::tiered_bps_price | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::tiered_bps_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredBpsPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredBpsPrice::price_type]
        end
      end

      type bps_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          bps_config: Orb::Models::BpsConfigModel,
          cadence: Orb::Models::PriceModel::BpsPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :bps,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::BpsPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class BpsPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor bps_config: Orb::Models::BpsConfigModel

        attr_accessor cadence: Orb::Models::PriceModel::BpsPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :bps

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::BpsPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            bps_config: Orb::Models::BpsConfigModel,
            cadence: Orb::Models::PriceModel::BpsPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::BpsPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :bps
          ) -> void
          | (?Orb::Models::PriceModel::bps_price | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::PriceModel::bps_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::BpsPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::BpsPrice::price_type]
        end
      end

      type bulk_bps_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          bulk_bps_config: Orb::Models::BulkBpsConfigModel,
          cadence: Orb::Models::PriceModel::BulkBpsPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :bulk_bps,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::BulkBpsPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class BulkBpsPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor bulk_bps_config: Orb::Models::BulkBpsConfigModel

        attr_accessor cadence: Orb::Models::PriceModel::BulkBpsPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :bulk_bps

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::BulkBpsPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            bulk_bps_config: Orb::Models::BulkBpsConfigModel,
            cadence: Orb::Models::PriceModel::BulkBpsPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::BulkBpsPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :bulk_bps
          ) -> void
          | (
            ?Orb::Models::PriceModel::bulk_bps_price | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::bulk_bps_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::BulkBpsPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::BulkBpsPrice::price_type]
        end
      end

      type bulk_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          bulk_config: Orb::Models::BulkConfigModel,
          cadence: Orb::Models::PriceModel::BulkPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :bulk,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::BulkPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class BulkPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor bulk_config: Orb::Models::BulkConfigModel

        attr_accessor cadence: Orb::Models::PriceModel::BulkPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :bulk

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::BulkPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            bulk_config: Orb::Models::BulkConfigModel,
            cadence: Orb::Models::PriceModel::BulkPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::BulkPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :bulk
          ) -> void
          | (?Orb::Models::PriceModel::bulk_price | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::PriceModel::bulk_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::BulkPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::BulkPrice::price_type]
        end
      end

      type threshold_total_amount_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::ThresholdTotalAmountPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :threshold_total_amount,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::ThresholdTotalAmountPrice::price_type,
          threshold_total_amount_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class ThresholdTotalAmountPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::ThresholdTotalAmountPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :threshold_total_amount

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::ThresholdTotalAmountPrice::price_type

        attr_accessor threshold_total_amount_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::ThresholdTotalAmountPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::ThresholdTotalAmountPrice::price_type,
            threshold_total_amount_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :threshold_total_amount
          ) -> void
          | (
            ?Orb::Models::PriceModel::threshold_total_amount_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::threshold_total_amount_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::ThresholdTotalAmountPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::ThresholdTotalAmountPrice::price_type]
        end
      end

      type tiered_package_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::TieredPackagePrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :tiered_package,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::TieredPackagePrice::price_type,
          tiered_package_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class TieredPackagePrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::TieredPackagePrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :tiered_package

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::TieredPackagePrice::price_type

        attr_accessor tiered_package_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::TieredPackagePrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::TieredPackagePrice::price_type,
            tiered_package_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :tiered_package
          ) -> void
          | (
            ?Orb::Models::PriceModel::tiered_package_price | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::tiered_package_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredPackagePrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredPackagePrice::price_type]
        end
      end

      type grouped_tiered_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::GroupedTieredPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          grouped_tiered_config: Orb::Models::custom_rating_function_config_model,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :grouped_tiered,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::GroupedTieredPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class GroupedTieredPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::GroupedTieredPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor grouped_tiered_config: Orb::Models::custom_rating_function_config_model

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :grouped_tiered

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::GroupedTieredPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::GroupedTieredPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            grouped_tiered_config: Orb::Models::custom_rating_function_config_model,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::GroupedTieredPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :grouped_tiered
          ) -> void
          | (
            ?Orb::Models::PriceModel::grouped_tiered_price | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::grouped_tiered_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedTieredPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedTieredPrice::price_type]
        end
      end

      type tiered_with_minimum_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::TieredWithMinimumPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :tiered_with_minimum,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::TieredWithMinimumPrice::price_type,
          tiered_with_minimum_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class TieredWithMinimumPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::TieredWithMinimumPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :tiered_with_minimum

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::TieredWithMinimumPrice::price_type

        attr_accessor tiered_with_minimum_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::TieredWithMinimumPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::TieredWithMinimumPrice::price_type,
            tiered_with_minimum_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :tiered_with_minimum
          ) -> void
          | (
            ?Orb::Models::PriceModel::tiered_with_minimum_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::tiered_with_minimum_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredWithMinimumPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredWithMinimumPrice::price_type]
        end
      end

      type tiered_package_with_minimum_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::TieredPackageWithMinimumPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :tiered_package_with_minimum,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::TieredPackageWithMinimumPrice::price_type,
          tiered_package_with_minimum_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class TieredPackageWithMinimumPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::TieredPackageWithMinimumPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :tiered_package_with_minimum

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::TieredPackageWithMinimumPrice::price_type

        attr_accessor tiered_package_with_minimum_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::TieredPackageWithMinimumPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::TieredPackageWithMinimumPrice::price_type,
            tiered_package_with_minimum_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :tiered_package_with_minimum
          ) -> void
          | (
            ?Orb::Models::PriceModel::tiered_package_with_minimum_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::tiered_package_with_minimum_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredPackageWithMinimumPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredPackageWithMinimumPrice::price_type]
        end
      end

      type package_with_allocation_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::PackageWithAllocationPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :package_with_allocation,
          name: String,
          package_with_allocation_config: Orb::Models::custom_rating_function_config_model,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::PackageWithAllocationPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class PackageWithAllocationPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::PackageWithAllocationPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :package_with_allocation

        attr_accessor name: String

        attr_accessor package_with_allocation_config: Orb::Models::custom_rating_function_config_model

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::PackageWithAllocationPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::PackageWithAllocationPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            package_with_allocation_config: Orb::Models::custom_rating_function_config_model,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::PackageWithAllocationPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :package_with_allocation
          ) -> void
          | (
            ?Orb::Models::PriceModel::package_with_allocation_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::package_with_allocation_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::PackageWithAllocationPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::PackageWithAllocationPrice::price_type]
        end
      end

      type unit_with_percent_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::UnitWithPercentPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :unit_with_percent,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::UnitWithPercentPrice::price_type,
          unit_with_percent_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class UnitWithPercentPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::UnitWithPercentPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :unit_with_percent

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::UnitWithPercentPrice::price_type

        attr_accessor unit_with_percent_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::UnitWithPercentPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::UnitWithPercentPrice::price_type,
            unit_with_percent_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :unit_with_percent
          ) -> void
          | (
            ?Orb::Models::PriceModel::unit_with_percent_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::unit_with_percent_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::UnitWithPercentPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::UnitWithPercentPrice::price_type]
        end
      end

      type matrix_with_allocation_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::MatrixWithAllocationPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          matrix_with_allocation_config: Orb::Models::MatrixWithAllocationConfigModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :matrix_with_allocation,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::MatrixWithAllocationPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class MatrixWithAllocationPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::MatrixWithAllocationPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor matrix_with_allocation_config: Orb::Models::MatrixWithAllocationConfigModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :matrix_with_allocation

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::MatrixWithAllocationPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::MatrixWithAllocationPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            matrix_with_allocation_config: Orb::Models::MatrixWithAllocationConfigModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::MatrixWithAllocationPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :matrix_with_allocation
          ) -> void
          | (
            ?Orb::Models::PriceModel::matrix_with_allocation_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::matrix_with_allocation_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::MatrixWithAllocationPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::MatrixWithAllocationPrice::price_type]
        end
      end

      type tiered_with_proration_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::TieredWithProrationPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :tiered_with_proration,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::TieredWithProrationPrice::price_type,
          tiered_with_proration_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class TieredWithProrationPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::TieredWithProrationPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :tiered_with_proration

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::TieredWithProrationPrice::price_type

        attr_accessor tiered_with_proration_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::TieredWithProrationPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::TieredWithProrationPrice::price_type,
            tiered_with_proration_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :tiered_with_proration
          ) -> void
          | (
            ?Orb::Models::PriceModel::tiered_with_proration_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::tiered_with_proration_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredWithProrationPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::TieredWithProrationPrice::price_type]
        end
      end

      type unit_with_proration_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::UnitWithProrationPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :unit_with_proration,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::UnitWithProrationPrice::price_type,
          unit_with_proration_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class UnitWithProrationPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::UnitWithProrationPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :unit_with_proration

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::UnitWithProrationPrice::price_type

        attr_accessor unit_with_proration_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::UnitWithProrationPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::UnitWithProrationPrice::price_type,
            unit_with_proration_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :unit_with_proration
          ) -> void
          | (
            ?Orb::Models::PriceModel::unit_with_proration_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::unit_with_proration_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::UnitWithProrationPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::UnitWithProrationPrice::price_type]
        end
      end

      type grouped_allocation_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::GroupedAllocationPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          grouped_allocation_config: Orb::Models::custom_rating_function_config_model,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :grouped_allocation,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::GroupedAllocationPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class GroupedAllocationPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::GroupedAllocationPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor grouped_allocation_config: Orb::Models::custom_rating_function_config_model

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :grouped_allocation

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::GroupedAllocationPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::GroupedAllocationPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            grouped_allocation_config: Orb::Models::custom_rating_function_config_model,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::GroupedAllocationPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :grouped_allocation
          ) -> void
          | (
            ?Orb::Models::PriceModel::grouped_allocation_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::grouped_allocation_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedAllocationPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedAllocationPrice::price_type]
        end
      end

      type grouped_with_prorated_minimum_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::GroupedWithProratedMinimumPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          grouped_with_prorated_minimum_config: Orb::Models::custom_rating_function_config_model,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :grouped_with_prorated_minimum,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::GroupedWithProratedMinimumPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class GroupedWithProratedMinimumPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::GroupedWithProratedMinimumPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor grouped_with_prorated_minimum_config: Orb::Models::custom_rating_function_config_model

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :grouped_with_prorated_minimum

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::GroupedWithProratedMinimumPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::GroupedWithProratedMinimumPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            grouped_with_prorated_minimum_config: Orb::Models::custom_rating_function_config_model,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::GroupedWithProratedMinimumPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :grouped_with_prorated_minimum
          ) -> void
          | (
            ?Orb::Models::PriceModel::grouped_with_prorated_minimum_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::grouped_with_prorated_minimum_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedWithProratedMinimumPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedWithProratedMinimumPrice::price_type]
        end
      end

      type grouped_with_metered_minimum_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          grouped_with_metered_minimum_config: Orb::Models::custom_rating_function_config_model,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :grouped_with_metered_minimum,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class GroupedWithMeteredMinimumPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor grouped_with_metered_minimum_config: Orb::Models::custom_rating_function_config_model

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :grouped_with_metered_minimum

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            grouped_with_metered_minimum_config: Orb::Models::custom_rating_function_config_model,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :grouped_with_metered_minimum
          ) -> void
          | (
            ?Orb::Models::PriceModel::grouped_with_metered_minimum_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::grouped_with_metered_minimum_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice::price_type]
        end
      end

      type matrix_with_display_name_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::MatrixWithDisplayNamePrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          matrix_with_display_name_config: Orb::Models::custom_rating_function_config_model,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :matrix_with_display_name,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::MatrixWithDisplayNamePrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class MatrixWithDisplayNamePrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::MatrixWithDisplayNamePrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor matrix_with_display_name_config: Orb::Models::custom_rating_function_config_model

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :matrix_with_display_name

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::MatrixWithDisplayNamePrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::MatrixWithDisplayNamePrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            matrix_with_display_name_config: Orb::Models::custom_rating_function_config_model,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::MatrixWithDisplayNamePrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :matrix_with_display_name
          ) -> void
          | (
            ?Orb::Models::PriceModel::matrix_with_display_name_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::matrix_with_display_name_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::MatrixWithDisplayNamePrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::MatrixWithDisplayNamePrice::price_type]
        end
      end

      type bulk_with_proration_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          bulk_with_proration_config: Orb::Models::custom_rating_function_config_model,
          cadence: Orb::Models::PriceModel::BulkWithProrationPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :bulk_with_proration,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::BulkWithProrationPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class BulkWithProrationPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor bulk_with_proration_config: Orb::Models::custom_rating_function_config_model

        attr_accessor cadence: Orb::Models::PriceModel::BulkWithProrationPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :bulk_with_proration

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::BulkWithProrationPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            bulk_with_proration_config: Orb::Models::custom_rating_function_config_model,
            cadence: Orb::Models::PriceModel::BulkWithProrationPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::BulkWithProrationPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :bulk_with_proration
          ) -> void
          | (
            ?Orb::Models::PriceModel::bulk_with_proration_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::bulk_with_proration_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::BulkWithProrationPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::BulkWithProrationPrice::price_type]
        end
      end

      type grouped_tiered_package_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::GroupedTieredPackagePrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          grouped_tiered_package_config: Orb::Models::custom_rating_function_config_model,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :grouped_tiered_package,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::GroupedTieredPackagePrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class GroupedTieredPackagePrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::GroupedTieredPackagePrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor grouped_tiered_package_config: Orb::Models::custom_rating_function_config_model

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :grouped_tiered_package

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::GroupedTieredPackagePrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::GroupedTieredPackagePrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            grouped_tiered_package_config: Orb::Models::custom_rating_function_config_model,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::GroupedTieredPackagePrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :grouped_tiered_package
          ) -> void
          | (
            ?Orb::Models::PriceModel::grouped_tiered_package_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::grouped_tiered_package_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedTieredPackagePrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::GroupedTieredPackagePrice::price_type]
        end
      end

      type max_group_tiered_package_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::MaxGroupTieredPackagePrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          max_group_tiered_package_config: Orb::Models::custom_rating_function_config_model,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :max_group_tiered_package,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::MaxGroupTieredPackagePrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class MaxGroupTieredPackagePrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::MaxGroupTieredPackagePrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor max_group_tiered_package_config: Orb::Models::custom_rating_function_config_model

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :max_group_tiered_package

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::MaxGroupTieredPackagePrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::MaxGroupTieredPackagePrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            max_group_tiered_package_config: Orb::Models::custom_rating_function_config_model,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::MaxGroupTieredPackagePrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :max_group_tiered_package
          ) -> void
          | (
            ?Orb::Models::PriceModel::max_group_tiered_package_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::max_group_tiered_package_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::MaxGroupTieredPackagePrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::MaxGroupTieredPackagePrice::price_type]
        end
      end

      type scalable_matrix_with_unit_pricing_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :scalable_matrix_with_unit_pricing,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice::price_type,
          scalable_matrix_with_unit_pricing_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class ScalableMatrixWithUnitPricingPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :scalable_matrix_with_unit_pricing

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice::price_type

        attr_accessor scalable_matrix_with_unit_pricing_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice::price_type,
            scalable_matrix_with_unit_pricing_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :scalable_matrix_with_unit_pricing
          ) -> void
          | (
            ?Orb::Models::PriceModel::scalable_matrix_with_unit_pricing_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::scalable_matrix_with_unit_pricing_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice::price_type]
        end
      end

      type scalable_matrix_with_tiered_pricing_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :scalable_matrix_with_tiered_pricing,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice::price_type,
          scalable_matrix_with_tiered_pricing_config: Orb::Models::custom_rating_function_config_model,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class ScalableMatrixWithTieredPricingPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :scalable_matrix_with_tiered_pricing

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice::price_type

        attr_accessor scalable_matrix_with_tiered_pricing_config: Orb::Models::custom_rating_function_config_model

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice::price_type,
            scalable_matrix_with_tiered_pricing_config: Orb::Models::custom_rating_function_config_model,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :scalable_matrix_with_tiered_pricing
          ) -> void
          | (
            ?Orb::Models::PriceModel::scalable_matrix_with_tiered_pricing_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::scalable_matrix_with_tiered_pricing_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice::price_type]
        end
      end

      type cumulative_grouped_bulk_price =
        {
          id: String,
          billable_metric: Orb::Models::BillableMetricTinyModel?,
          billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
          cadence: Orb::Models::PriceModel::CumulativeGroupedBulkPrice::cadence,
          conversion_rate: Float?,
          created_at: Time,
          credit_allocation: Orb::Models::AllocationModel?,
          cumulative_grouped_bulk_config: Orb::Models::custom_rating_function_config_model,
          currency: String,
          discount: Orb::Models::discount?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
          item: Orb::Models::ItemSlimModel,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          model_type: :cumulative_grouped_bulk,
          name: String,
          plan_phase_order: Integer?,
          price_type: Orb::Models::PriceModel::CumulativeGroupedBulkPrice::price_type,
          dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?
        }

      class CumulativeGroupedBulkPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billable_metric: Orb::Models::BillableMetricTinyModel?

        attr_accessor billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel

        attr_accessor cadence: Orb::Models::PriceModel::CumulativeGroupedBulkPrice::cadence

        attr_accessor conversion_rate: Float?

        attr_accessor created_at: Time

        attr_accessor credit_allocation: Orb::Models::AllocationModel?

        attr_accessor cumulative_grouped_bulk_config: Orb::Models::custom_rating_function_config_model

        attr_accessor currency: String

        attr_accessor discount: Orb::Models::discount?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?

        attr_accessor item: Orb::Models::ItemSlimModel

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor metadata: ::Hash[Symbol, String]

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor model_type: :cumulative_grouped_bulk

        attr_accessor name: String

        attr_accessor plan_phase_order: Integer?

        attr_accessor price_type: Orb::Models::PriceModel::CumulativeGroupedBulkPrice::price_type

        attr_accessor dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?

        def initialize:
          (
            id: String,
            billable_metric: Orb::Models::BillableMetricTinyModel?,
            billing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel,
            cadence: Orb::Models::PriceModel::CumulativeGroupedBulkPrice::cadence,
            conversion_rate: Float?,
            created_at: Time,
            credit_allocation: Orb::Models::AllocationModel?,
            cumulative_grouped_bulk_config: Orb::Models::custom_rating_function_config_model,
            currency: String,
            discount: Orb::Models::discount?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoicing_cycle_configuration: Orb::Models::BillingCycleConfigurationModel?,
            item: Orb::Models::ItemSlimModel,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            metadata: ::Hash[Symbol, String],
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            plan_phase_order: Integer?,
            price_type: Orb::Models::PriceModel::CumulativeGroupedBulkPrice::price_type,
            dimensional_price_configuration: Orb::Models::DimensionalPriceConfigurationModel?,
            model_type: :cumulative_grouped_bulk
          ) -> void
          | (
            ?Orb::Models::PriceModel::cumulative_grouped_bulk_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceModel::cumulative_grouped_bulk_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::PriceModel::CumulativeGroupedBulkPrice::cadence]
        end

        type price_type = :usage_price | :fixed_price

        class PriceType < Orb::Enum
          USAGE_PRICE: :usage_price
          FIXED_PRICE: :fixed_price

          def self.values: -> ::Array[Orb::Models::PriceModel::CumulativeGroupedBulkPrice::price_type]
        end
      end

      private def self.variants: -> [[:unit, Orb::Models::PriceModel::UnitPrice], [:package, Orb::Models::PriceModel::PackagePrice], [:matrix, Orb::Models::PriceModel::MatrixPrice], [:tiered, Orb::Models::PriceModel::TieredPrice], [:tiered_bps, Orb::Models::PriceModel::TieredBpsPrice], [:bps, Orb::Models::PriceModel::BpsPrice], [:bulk_bps, Orb::Models::PriceModel::BulkBpsPrice], [:bulk, Orb::Models::PriceModel::BulkPrice], [:threshold_total_amount, Orb::Models::PriceModel::ThresholdTotalAmountPrice], [:tiered_package, Orb::Models::PriceModel::TieredPackagePrice], [:grouped_tiered, Orb::Models::PriceModel::GroupedTieredPrice], [:tiered_with_minimum, Orb::Models::PriceModel::TieredWithMinimumPrice], [:tiered_package_with_minimum, Orb::Models::PriceModel::TieredPackageWithMinimumPrice], [:package_with_allocation, Orb::Models::PriceModel::PackageWithAllocationPrice], [:unit_with_percent, Orb::Models::PriceModel::UnitWithPercentPrice], [:matrix_with_allocation, Orb::Models::PriceModel::MatrixWithAllocationPrice], [:tiered_with_proration, Orb::Models::PriceModel::TieredWithProrationPrice], [:unit_with_proration, Orb::Models::PriceModel::UnitWithProrationPrice], [:grouped_allocation, Orb::Models::PriceModel::GroupedAllocationPrice], [:grouped_with_prorated_minimum, Orb::Models::PriceModel::GroupedWithProratedMinimumPrice], [:grouped_with_metered_minimum, Orb::Models::PriceModel::GroupedWithMeteredMinimumPrice], [:matrix_with_display_name, Orb::Models::PriceModel::MatrixWithDisplayNamePrice], [:bulk_with_proration, Orb::Models::PriceModel::BulkWithProrationPrice], [:grouped_tiered_package, Orb::Models::PriceModel::GroupedTieredPackagePrice], [:max_group_tiered_package, Orb::Models::PriceModel::MaxGroupTieredPackagePrice], [:scalable_matrix_with_unit_pricing, Orb::Models::PriceModel::ScalableMatrixWithUnitPricingPrice], [:scalable_matrix_with_tiered_pricing, Orb::Models::PriceModel::ScalableMatrixWithTieredPricingPrice], [:cumulative_grouped_bulk, Orb::Models::PriceModel::CumulativeGroupedBulkPrice]]
    end
  end
end
