module Orb
  module Models
    type usage_discount =
      {
        discount_type: Orb::Models::UsageDiscount::discount_type,
        usage_discount: Float,
        applies_to_price_ids: ::Array[String]?,
        filters: ::Array[Orb::UsageDiscount::Filter]?,
        reason: String?
      }

    class UsageDiscount < Orb::Internal::Type::BaseModel
      attr_accessor discount_type: Orb::Models::UsageDiscount::discount_type

      attr_accessor usage_discount: Float

      attr_accessor applies_to_price_ids: ::Array[String]?

      attr_accessor filters: ::Array[Orb::UsageDiscount::Filter]?

      attr_accessor reason: String?

      def initialize: (
        discount_type: Orb::Models::UsageDiscount::discount_type,
        usage_discount: Float,
        ?applies_to_price_ids: ::Array[String]?,
        ?filters: ::Array[Orb::UsageDiscount::Filter]?,
        ?reason: String?
      ) -> void

      def to_hash: -> {
        discount_type: Orb::Models::UsageDiscount::discount_type,
        usage_discount: Float,
        applies_to_price_ids: ::Array[String]?,
        filters: ::Array[Orb::UsageDiscount::Filter]?,
        reason: String?
      }

      type discount_type = :usage

      module DiscountType
        extend Orb::Internal::Type::Enum

        USAGE: :usage

        def self?.values: -> ::Array[Orb::Models::UsageDiscount::discount_type]
      end

      type filter =
        {
          field: Orb::Models::UsageDiscount::Filter::field,
          operator: Orb::Models::UsageDiscount::Filter::operator,
          values: ::Array[String]
        }

      class Filter < Orb::Internal::Type::BaseModel
        attr_accessor field: Orb::Models::UsageDiscount::Filter::field

        attr_accessor operator: Orb::Models::UsageDiscount::Filter::operator

        attr_accessor values: ::Array[String]

        def initialize: (
          field: Orb::Models::UsageDiscount::Filter::field,
          operator: Orb::Models::UsageDiscount::Filter::operator,
          values: ::Array[String]
        ) -> void

        def to_hash: -> {
          field: Orb::Models::UsageDiscount::Filter::field,
          operator: Orb::Models::UsageDiscount::Filter::operator,
          values: ::Array[String]
        }

        type field =
          :price_id | :item_id | :price_type | :currency | :pricing_unit_id

        module Field
          extend Orb::Internal::Type::Enum

          PRICE_ID: :price_id
          ITEM_ID: :item_id
          PRICE_TYPE: :price_type
          CURRENCY: :currency
          PRICING_UNIT_ID: :pricing_unit_id

          def self?.values: -> ::Array[Orb::Models::UsageDiscount::Filter::field]
        end

        type operator = :includes | :excludes

        module Operator
          extend Orb::Internal::Type::Enum

          INCLUDES: :includes
          EXCLUDES: :excludes

          def self?.values: -> ::Array[Orb::Models::UsageDiscount::Filter::operator]
        end
      end
    end
  end
end
