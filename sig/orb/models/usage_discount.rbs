module Orb
  module Models
    type usage_discount =
      {
        discount_type: Orb::Models::UsageDiscount::discount_type,
        usage_discount: Float,
        applies_to_price_ids: ::Array[String]?,
        filters: ::Array[Orb::TransformPriceFilter]?,
        reason: String?
      }

    class UsageDiscount < Orb::Internal::Type::BaseModel
      attr_accessor discount_type: Orb::Models::UsageDiscount::discount_type

      attr_accessor usage_discount: Float

      attr_accessor applies_to_price_ids: ::Array[String]?

      attr_accessor filters: ::Array[Orb::TransformPriceFilter]?

      attr_accessor reason: String?

      def initialize: (
        discount_type: Orb::Models::UsageDiscount::discount_type,
        usage_discount: Float,
        ?applies_to_price_ids: ::Array[String]?,
        ?filters: ::Array[Orb::TransformPriceFilter]?,
        ?reason: String?
      ) -> void

      def to_hash: -> {
        discount_type: Orb::Models::UsageDiscount::discount_type,
        usage_discount: Float,
        applies_to_price_ids: ::Array[String]?,
        filters: ::Array[Orb::TransformPriceFilter]?,
        reason: String?
      }

      type discount_type = :usage

      module DiscountType
        extend Orb::Internal::Type::Enum

        USAGE: :usage

        def self?.values: -> ::Array[Orb::Models::UsageDiscount::discount_type]
      end
    end
  end
end
