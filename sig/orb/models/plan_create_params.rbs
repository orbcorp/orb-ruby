module Orb
  module Models
    type plan_create_params =
      {
        currency: String,
        name: String,
        prices: ::Array[Orb::PlanCreateParams::price],
        default_invoice_memo: String?,
        external_plan_id: String?,
        metadata: ::Hash[Symbol, String?]?,
        net_terms: Integer?,
        status: Orb::Models::PlanCreateParams::status
      }
      & Orb::Internal::Type::request_parameters

    class PlanCreateParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor currency: String

      attr_accessor name: String

      attr_accessor prices: ::Array[Orb::PlanCreateParams::price]

      attr_accessor default_invoice_memo: String?

      attr_accessor external_plan_id: String?

      attr_accessor metadata: ::Hash[Symbol, String?]?

      attr_accessor net_terms: Integer?

      attr_reader status: Orb::Models::PlanCreateParams::status?

      def status=: (
        Orb::Models::PlanCreateParams::status
      ) -> Orb::Models::PlanCreateParams::status

      def initialize: (
        currency: String,
        name: String,
        prices: ::Array[Orb::PlanCreateParams::price],
        ?default_invoice_memo: String?,
        ?external_plan_id: String?,
        ?metadata: ::Hash[Symbol, String?]?,
        ?net_terms: Integer?,
        ?status: Orb::Models::PlanCreateParams::status,
        ?request_options: Orb::request_opts
      ) -> void

      type price =
        Orb::PlanCreateParams::Price::Unit
        | Orb::PlanCreateParams::Price::Package
        | Orb::PlanCreateParams::Price::Matrix
        | Orb::PlanCreateParams::Price::Tiered
        | Orb::PlanCreateParams::Price::TieredBps
        | Orb::PlanCreateParams::Price::Bps
        | Orb::PlanCreateParams::Price::BulkBps
        | Orb::PlanCreateParams::Price::Bulk
        | Orb::PlanCreateParams::Price::ThresholdTotalAmount
        | Orb::PlanCreateParams::Price::TieredPackage
        | Orb::PlanCreateParams::Price::TieredWithMinimum
        | Orb::PlanCreateParams::Price::UnitWithPercent
        | Orb::PlanCreateParams::Price::PackageWithAllocation
        | Orb::PlanCreateParams::Price::TieredWithProration
        | Orb::PlanCreateParams::Price::UnitWithProration
        | Orb::PlanCreateParams::Price::GroupedAllocation
        | Orb::PlanCreateParams::Price::GroupedWithProratedMinimum
        | Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum
        | Orb::PlanCreateParams::Price::MatrixWithDisplayName
        | Orb::PlanCreateParams::Price::BulkWithProration
        | Orb::PlanCreateParams::Price::GroupedTieredPackage
        | Orb::PlanCreateParams::Price::MaxGroupTieredPackage
        | Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing
        | Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing
        | Orb::PlanCreateParams::Price::CumulativeGroupedBulk

      module Price
        extend Orb::Internal::Type::Union

        type unit =
          {
            cadence: Orb::PlanCreateParams::Price::Unit::cadence,
            item_id: String,
            model_type: :unit,
            name: String,
            unit_config: Orb::PlanCreateParams::Price::Unit::UnitConfig,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class Unit < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::Unit::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit

          attr_accessor name: String

          attr_accessor unit_config: Orb::PlanCreateParams::Price::Unit::UnitConfig

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::Unit::cadence,
            item_id: String,
            name: String,
            unit_config: Orb::PlanCreateParams::Price::Unit::UnitConfig,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :unit
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Unit::cadence]
          end

          type unit_config = { unit_amount: String }

          class UnitConfig < Orb::Internal::Type::BaseModel
            attr_accessor unit_amount: String

            def initialize: (unit_amount: String) -> void
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Unit::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Unit::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type package =
          {
            cadence: Orb::PlanCreateParams::Price::Package::cadence,
            item_id: String,
            model_type: :package,
            name: String,
            package_config: Orb::PlanCreateParams::Price::Package::PackageConfig,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class Package < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::Package::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :package

          attr_accessor name: String

          attr_accessor package_config: Orb::PlanCreateParams::Price::Package::PackageConfig

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::Package::cadence,
            item_id: String,
            name: String,
            package_config: Orb::PlanCreateParams::Price::Package::PackageConfig,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :package
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Package::cadence]
          end

          type package_config =
            { package_amount: String, package_size: Integer }

          class PackageConfig < Orb::Internal::Type::BaseModel
            attr_accessor package_amount: String

            attr_accessor package_size: Integer

            def initialize: (
              package_amount: String,
              package_size: Integer
            ) -> void
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Package::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Package::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type matrix =
          {
            cadence: Orb::PlanCreateParams::Price::Matrix::cadence,
            item_id: String,
            matrix_config: Orb::PlanCreateParams::Price::Matrix::MatrixConfig,
            model_type: :matrix,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class Matrix < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::Matrix::cadence

          attr_accessor item_id: String

          attr_accessor matrix_config: Orb::PlanCreateParams::Price::Matrix::MatrixConfig

          attr_accessor model_type: :matrix

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::Matrix::cadence,
            item_id: String,
            matrix_config: Orb::PlanCreateParams::Price::Matrix::MatrixConfig,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :matrix
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Matrix::cadence]
          end

          type matrix_config =
            {
              default_unit_amount: String,
              dimensions: ::Array[String?],
              matrix_values: ::Array[Orb::PlanCreateParams::Price::Matrix::MatrixConfig::MatrixValue]
            }

          class MatrixConfig < Orb::Internal::Type::BaseModel
            attr_accessor default_unit_amount: String

            attr_accessor dimensions: ::Array[String?]

            attr_accessor matrix_values: ::Array[Orb::PlanCreateParams::Price::Matrix::MatrixConfig::MatrixValue]

            def initialize: (
              default_unit_amount: String,
              dimensions: ::Array[String?],
              matrix_values: ::Array[Orb::PlanCreateParams::Price::Matrix::MatrixConfig::MatrixValue]
            ) -> void

            type matrix_value =
              { dimension_values: ::Array[String?], unit_amount: String }

            class MatrixValue < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String?]

              attr_accessor unit_amount: String

              def initialize: (
                dimension_values: ::Array[String?],
                unit_amount: String
              ) -> void
            end
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Matrix::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Matrix::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type tiered =
          {
            cadence: Orb::PlanCreateParams::Price::Tiered::cadence,
            item_id: String,
            model_type: :tiered,
            name: String,
            tiered_config: Orb::PlanCreateParams::Price::Tiered::TieredConfig,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class Tiered < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::Tiered::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered

          attr_accessor name: String

          attr_accessor tiered_config: Orb::PlanCreateParams::Price::Tiered::TieredConfig

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::Tiered::cadence,
            item_id: String,
            name: String,
            tiered_config: Orb::PlanCreateParams::Price::Tiered::TieredConfig,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :tiered
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Tiered::cadence]
          end

          type tiered_config =
            {
              tiers: ::Array[Orb::PlanCreateParams::Price::Tiered::TieredConfig::Tier]
            }

          class TieredConfig < Orb::Internal::Type::BaseModel
            attr_accessor tiers: ::Array[Orb::PlanCreateParams::Price::Tiered::TieredConfig::Tier]

            def initialize: (
              tiers: ::Array[Orb::PlanCreateParams::Price::Tiered::TieredConfig::Tier]
            ) -> void

            type tier =
              { first_unit: Float, unit_amount: String, last_unit: Float? }

            class Tier < Orb::Internal::Type::BaseModel
              attr_accessor first_unit: Float

              attr_accessor unit_amount: String

              attr_accessor last_unit: Float?

              def initialize: (
                first_unit: Float,
                unit_amount: String,
                ?last_unit: Float?
              ) -> void
            end
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Tiered::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Tiered::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type tiered_bps =
          {
            cadence: Orb::PlanCreateParams::Price::TieredBps::cadence,
            item_id: String,
            model_type: :tiered_bps,
            name: String,
            tiered_bps_config: Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class TieredBps < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::TieredBps::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_bps

          attr_accessor name: String

          attr_accessor tiered_bps_config: Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::TieredBps::cadence,
            item_id: String,
            name: String,
            tiered_bps_config: Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :tiered_bps
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredBps::cadence]
          end

          type tiered_bps_config =
            {
              tiers: ::Array[Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig::Tier]
            }

          class TieredBpsConfig < Orb::Internal::Type::BaseModel
            attr_accessor tiers: ::Array[Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig::Tier]

            def initialize: (
              tiers: ::Array[Orb::PlanCreateParams::Price::TieredBps::TieredBpsConfig::Tier]
            ) -> void

            type tier =
              {
                bps: Float,
                minimum_amount: String,
                maximum_amount: String?,
                per_unit_maximum: String?
              }

            class Tier < Orb::Internal::Type::BaseModel
              attr_accessor bps: Float

              attr_accessor minimum_amount: String

              attr_accessor maximum_amount: String?

              attr_accessor per_unit_maximum: String?

              def initialize: (
                bps: Float,
                minimum_amount: String,
                ?maximum_amount: String?,
                ?per_unit_maximum: String?
              ) -> void
            end
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredBps::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredBps::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type bps =
          {
            bps_config: Orb::PlanCreateParams::Price::Bps::BpsConfig,
            cadence: Orb::PlanCreateParams::Price::Bps::cadence,
            item_id: String,
            model_type: :bps,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class Bps < Orb::Internal::Type::BaseModel
          attr_accessor bps_config: Orb::PlanCreateParams::Price::Bps::BpsConfig

          attr_accessor cadence: Orb::PlanCreateParams::Price::Bps::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bps

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            bps_config: Orb::PlanCreateParams::Price::Bps::BpsConfig,
            cadence: Orb::PlanCreateParams::Price::Bps::cadence,
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :bps
          ) -> void

          type bps_config = { bps: Float, per_unit_maximum: String? }

          class BpsConfig < Orb::Internal::Type::BaseModel
            attr_accessor bps: Float

            attr_accessor per_unit_maximum: String?

            def initialize: (bps: Float, ?per_unit_maximum: String?) -> void
          end

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Bps::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Bps::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Bps::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type bulk_bps =
          {
            bulk_bps_config: Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig,
            cadence: Orb::PlanCreateParams::Price::BulkBps::cadence,
            item_id: String,
            model_type: :bulk_bps,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class BulkBps < Orb::Internal::Type::BaseModel
          attr_accessor bulk_bps_config: Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig

          attr_accessor cadence: Orb::PlanCreateParams::Price::BulkBps::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk_bps

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            bulk_bps_config: Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig,
            cadence: Orb::PlanCreateParams::Price::BulkBps::cadence,
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :bulk_bps
          ) -> void

          type bulk_bps_config =
            {
              tiers: ::Array[Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig::Tier]
            }

          class BulkBpsConfig < Orb::Internal::Type::BaseModel
            attr_accessor tiers: ::Array[Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig::Tier]

            def initialize: (
              tiers: ::Array[Orb::PlanCreateParams::Price::BulkBps::BulkBpsConfig::Tier]
            ) -> void

            type tier =
              { bps: Float, maximum_amount: String?, per_unit_maximum: String? }

            class Tier < Orb::Internal::Type::BaseModel
              attr_accessor bps: Float

              attr_accessor maximum_amount: String?

              attr_accessor per_unit_maximum: String?

              def initialize: (
                bps: Float,
                ?maximum_amount: String?,
                ?per_unit_maximum: String?
              ) -> void
            end
          end

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::BulkBps::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::BulkBps::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::BulkBps::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type bulk =
          {
            bulk_config: Orb::PlanCreateParams::Price::Bulk::BulkConfig,
            cadence: Orb::PlanCreateParams::Price::Bulk::cadence,
            item_id: String,
            model_type: :bulk,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class Bulk < Orb::Internal::Type::BaseModel
          attr_accessor bulk_config: Orb::PlanCreateParams::Price::Bulk::BulkConfig

          attr_accessor cadence: Orb::PlanCreateParams::Price::Bulk::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            bulk_config: Orb::PlanCreateParams::Price::Bulk::BulkConfig,
            cadence: Orb::PlanCreateParams::Price::Bulk::cadence,
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :bulk
          ) -> void

          type bulk_config =
            {
              tiers: ::Array[Orb::PlanCreateParams::Price::Bulk::BulkConfig::Tier]
            }

          class BulkConfig < Orb::Internal::Type::BaseModel
            attr_accessor tiers: ::Array[Orb::PlanCreateParams::Price::Bulk::BulkConfig::Tier]

            def initialize: (
              tiers: ::Array[Orb::PlanCreateParams::Price::Bulk::BulkConfig::Tier]
            ) -> void

            type tier = { unit_amount: String, maximum_units: Float? }

            class Tier < Orb::Internal::Type::BaseModel
              attr_accessor unit_amount: String

              attr_accessor maximum_units: Float?

              def initialize: (
                unit_amount: String,
                ?maximum_units: Float?
              ) -> void
            end
          end

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Bulk::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Bulk::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::Bulk::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type threshold_total_amount =
          {
            cadence: Orb::PlanCreateParams::Price::ThresholdTotalAmount::cadence,
            item_id: String,
            model_type: :threshold_total_amount,
            name: String,
            threshold_total_amount_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::ThresholdTotalAmount::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :threshold_total_amount

          attr_accessor name: String

          attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::ThresholdTotalAmount::cadence,
            item_id: String,
            name: String,
            threshold_total_amount_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :threshold_total_amount
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ThresholdTotalAmount::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type tiered_package =
          {
            cadence: Orb::PlanCreateParams::Price::TieredPackage::cadence,
            item_id: String,
            model_type: :tiered_package,
            name: String,
            tiered_package_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class TieredPackage < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::TieredPackage::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_package

          attr_accessor name: String

          attr_accessor tiered_package_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::TieredPackage::cadence,
            item_id: String,
            name: String,
            tiered_package_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :tiered_package
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredPackage::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredPackage::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type tiered_with_minimum =
          {
            cadence: Orb::PlanCreateParams::Price::TieredWithMinimum::cadence,
            item_id: String,
            model_type: :tiered_with_minimum,
            name: String,
            tiered_with_minimum_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class TieredWithMinimum < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::TieredWithMinimum::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_with_minimum

          attr_accessor name: String

          attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::TieredWithMinimum::cadence,
            item_id: String,
            name: String,
            tiered_with_minimum_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :tiered_with_minimum
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredWithMinimum::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type unit_with_percent =
          {
            cadence: Orb::PlanCreateParams::Price::UnitWithPercent::cadence,
            item_id: String,
            model_type: :unit_with_percent,
            name: String,
            unit_with_percent_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class UnitWithPercent < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::UnitWithPercent::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit_with_percent

          attr_accessor name: String

          attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::UnitWithPercent::cadence,
            item_id: String,
            name: String,
            unit_with_percent_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :unit_with_percent
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::UnitWithPercent::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type package_with_allocation =
          {
            cadence: Orb::PlanCreateParams::Price::PackageWithAllocation::cadence,
            item_id: String,
            model_type: :package_with_allocation,
            name: String,
            package_with_allocation_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class PackageWithAllocation < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::PackageWithAllocation::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :package_with_allocation

          attr_accessor name: String

          attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::PackageWithAllocation::cadence,
            item_id: String,
            name: String,
            package_with_allocation_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :package_with_allocation
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::PackageWithAllocation::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type tiered_with_proration =
          {
            cadence: Orb::PlanCreateParams::Price::TieredWithProration::cadence,
            item_id: String,
            model_type: :tiered_with_proration,
            name: String,
            tiered_with_proration_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class TieredWithProration < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::TieredWithProration::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_with_proration

          attr_accessor name: String

          attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::TieredWithProration::cadence,
            item_id: String,
            name: String,
            tiered_with_proration_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :tiered_with_proration
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredWithProration::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredWithProration::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type unit_with_proration =
          {
            cadence: Orb::PlanCreateParams::Price::UnitWithProration::cadence,
            item_id: String,
            model_type: :unit_with_proration,
            name: String,
            unit_with_proration_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class UnitWithProration < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::UnitWithProration::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit_with_proration

          attr_accessor name: String

          attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::UnitWithProration::cadence,
            item_id: String,
            name: String,
            unit_with_proration_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :unit_with_proration
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::UnitWithProration::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::UnitWithProration::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type grouped_allocation =
          {
            cadence: Orb::PlanCreateParams::Price::GroupedAllocation::cadence,
            grouped_allocation_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :grouped_allocation,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class GroupedAllocation < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::GroupedAllocation::cadence

          attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_allocation

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::GroupedAllocation::cadence,
            grouped_allocation_config: ::Hash[Symbol, top],
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :grouped_allocation
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedAllocation::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type grouped_with_prorated_minimum =
          {
            cadence: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::cadence,
            grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :grouped_with_prorated_minimum,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::cadence

          attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_with_prorated_minimum

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::cadence,
            grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :grouped_with_prorated_minimum
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type grouped_with_metered_minimum =
          {
            cadence: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::cadence,
            grouped_with_metered_minimum_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :grouped_with_metered_minimum,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::cadence

          attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_with_metered_minimum

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::cadence,
            grouped_with_metered_minimum_config: ::Hash[Symbol, top],
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :grouped_with_metered_minimum
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type matrix_with_display_name =
          {
            cadence: Orb::PlanCreateParams::Price::MatrixWithDisplayName::cadence,
            item_id: String,
            matrix_with_display_name_config: ::Hash[Symbol, top],
            model_type: :matrix_with_display_name,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::MatrixWithDisplayName::cadence

          attr_accessor item_id: String

          attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

          attr_accessor model_type: :matrix_with_display_name

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::MatrixWithDisplayName::cadence,
            item_id: String,
            matrix_with_display_name_config: ::Hash[Symbol, top],
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :matrix_with_display_name
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::MatrixWithDisplayName::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type bulk_with_proration =
          {
            bulk_with_proration_config: ::Hash[Symbol, top],
            cadence: Orb::PlanCreateParams::Price::BulkWithProration::cadence,
            item_id: String,
            model_type: :bulk_with_proration,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class BulkWithProration < Orb::Internal::Type::BaseModel
          attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

          attr_accessor cadence: Orb::PlanCreateParams::Price::BulkWithProration::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk_with_proration

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            bulk_with_proration_config: ::Hash[Symbol, top],
            cadence: Orb::PlanCreateParams::Price::BulkWithProration::cadence,
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :bulk_with_proration
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::BulkWithProration::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::BulkWithProration::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type grouped_tiered_package =
          {
            cadence: Orb::PlanCreateParams::Price::GroupedTieredPackage::cadence,
            grouped_tiered_package_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :grouped_tiered_package,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class GroupedTieredPackage < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::GroupedTieredPackage::cadence

          attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_tiered_package

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::GroupedTieredPackage::cadence,
            grouped_tiered_package_config: ::Hash[Symbol, top],
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :grouped_tiered_package
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedTieredPackage::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type max_group_tiered_package =
          {
            cadence: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::cadence,
            item_id: String,
            max_group_tiered_package_config: ::Hash[Symbol, top],
            model_type: :max_group_tiered_package,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::cadence

          attr_accessor item_id: String

          attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

          attr_accessor model_type: :max_group_tiered_package

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::cadence,
            item_id: String,
            max_group_tiered_package_config: ::Hash[Symbol, top],
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :max_group_tiered_package
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::MaxGroupTieredPackage::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type scalable_matrix_with_unit_pricing =
          {
            cadence: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::cadence,
            item_id: String,
            model_type: :scalable_matrix_with_unit_pricing,
            name: String,
            scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :scalable_matrix_with_unit_pricing

          attr_accessor name: String

          attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::cadence,
            item_id: String,
            name: String,
            scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :scalable_matrix_with_unit_pricing
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type scalable_matrix_with_tiered_pricing =
          {
            cadence: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::cadence,
            item_id: String,
            model_type: :scalable_matrix_with_tiered_pricing,
            name: String,
            scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :scalable_matrix_with_tiered_pricing

          attr_accessor name: String

          attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::cadence,
            item_id: String,
            name: String,
            scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :scalable_matrix_with_tiered_pricing
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type cumulative_grouped_bulk =
          {
            cadence: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::cadence,
            cumulative_grouped_bulk_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :cumulative_grouped_bulk,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?
          }

        class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
          attr_accessor cadence: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::cadence

          attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :cumulative_grouped_bulk

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize: (
            cadence: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::cadence,
            cumulative_grouped_bulk_config: ::Hash[Symbol, top],
            item_id: String,
            name: String,
            ?billable_metric_id: String?,
            ?billed_in_advance: bool?,
            ?billing_cycle_configuration: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
            ?conversion_rate: Float?,
            ?currency: String?,
            ?external_price_id: String?,
            ?fixed_price_quantity: Float?,
            ?invoice_grouping_key: String?,
            ?invoicing_cycle_configuration: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
            ?metadata: ::Hash[Symbol, String?]?,
            ?model_type: :cumulative_grouped_bulk
          ) -> void

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::PlanCreateParams::Price::CumulativeGroupedBulk::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit

            def initialize: (
              duration: Integer,
              duration_unit: Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
            ) -> void

            type duration_unit = :day | :month

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY: :day
              MONTH: :month

              def self?.values: -> ::Array[Orb::PlanCreateParams::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        def self?.variants: -> ::Array[Orb::PlanCreateParams::price]
      end

      type status = :active | :draft

      module Status
        extend Orb::Internal::Type::Enum

        ACTIVE: :active
        DRAFT: :draft

        def self?.values: -> ::Array[Orb::Models::PlanCreateParams::status]
      end
    end
  end
end
