module Orb
  module Models
    type plan_create_params =
      {
        currency: String,
        name: String,
        prices: ::Array[Orb::Models::PlanCreateParams::price],
        default_invoice_memo: String?,
        external_plan_id: String?,
        metadata: ::Hash[Symbol, String?]?,
        net_terms: Integer?,
        status: Orb::Models::PlanCreateParams::status
      }
      & Orb::Internal::Type::request_parameters

    class PlanCreateParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor currency: String

      attr_accessor name: String

      attr_accessor prices: ::Array[Orb::Models::PlanCreateParams::price]

      attr_accessor default_invoice_memo: String?

      attr_accessor external_plan_id: String?

      attr_accessor metadata: ::Hash[Symbol, String?]?

      attr_accessor net_terms: Integer?

      attr_reader status: Orb::Models::PlanCreateParams::status?

      def status=: (
        Orb::Models::PlanCreateParams::status
      ) -> Orb::Models::PlanCreateParams::status

      def initialize: (
        currency: String,
        name: String,
        prices: ::Array[Orb::Models::PlanCreateParams::price],
        ?default_invoice_memo: String?,
        ?external_plan_id: String?,
        ?metadata: ::Hash[Symbol, String?]?,
        ?net_terms: Integer?,
        ?status: Orb::Models::PlanCreateParams::status,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> {
        currency: String,
        name: String,
        prices: ::Array[Orb::Models::PlanCreateParams::price],
        default_invoice_memo: String?,
        external_plan_id: String?,
        metadata: ::Hash[Symbol, String?]?,
        net_terms: Integer?,
        status: Orb::Models::PlanCreateParams::status,
        request_options: Orb::RequestOptions
      }

      type price =
        Orb::NewPlanUnitPrice
        | Orb::NewPlanPackagePrice
        | Orb::NewPlanMatrixPrice
        | Orb::NewPlanTieredPrice
        | Orb::NewPlanTieredBPSPrice
        | Orb::NewPlanBPSPrice
        | Orb::NewPlanBulkBPSPrice
        | Orb::NewPlanBulkPrice
        | Orb::NewPlanThresholdTotalAmountPrice
        | Orb::NewPlanTieredPackagePrice
        | Orb::NewPlanTieredWithMinimumPrice
        | Orb::NewPlanUnitWithPercentPrice
        | Orb::NewPlanPackageWithAllocationPrice
        | Orb::NewPlanTierWithProrationPrice
        | Orb::NewPlanUnitWithProrationPrice
        | Orb::NewPlanGroupedAllocationPrice
        | Orb::NewPlanGroupedWithProratedMinimumPrice
        | Orb::NewPlanGroupedWithMeteredMinimumPrice
        | Orb::NewPlanMatrixWithDisplayNamePrice
        | Orb::NewPlanBulkWithProrationPrice
        | Orb::NewPlanGroupedTieredPackagePrice
        | Orb::NewPlanMaxGroupTieredPackagePrice
        | Orb::NewPlanScalableMatrixWithUnitPricingPrice
        | Orb::NewPlanScalableMatrixWithTieredPricingPrice
        | Orb::NewPlanCumulativeGroupedBulkPrice
        | Orb::NewPlanTieredPackageWithMinimumPrice
        | Orb::NewPlanMatrixWithAllocationPrice
        | Orb::NewPlanGroupedTieredPrice

      module Price
        extend Orb::Internal::Type::Union

        def self?.variants: -> ::Array[Orb::Models::PlanCreateParams::price]
      end

      type status = :active | :draft

      module Status
        extend Orb::Internal::Type::Enum

        ACTIVE: :active
        DRAFT: :draft

        def self?.values: -> ::Array[Orb::Models::PlanCreateParams::status]
      end
    end
  end
end
