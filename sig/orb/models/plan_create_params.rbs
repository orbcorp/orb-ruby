module Orb
  module Models
    type plan_create_params =
      {
        currency: String,
        name: String,
        prices: ::Array[Orb::Models::PlanCreateParams::price],
        default_invoice_memo: String?,
        external_plan_id: String?,
        metadata: ::Hash[Symbol, String?]?,
        net_terms: Integer?,
        status: Orb::Models::PlanCreateParams::status
      }
      & Orb::request_parameters

    class PlanCreateParams < Orb::BaseModel
      extend Orb::RequestParameters::Converter
      include Orb::RequestParameters

      attr_accessor currency: String

      attr_accessor name: String

      attr_accessor prices: ::Array[Orb::Models::PlanCreateParams::price]

      attr_accessor default_invoice_memo: String?

      attr_accessor external_plan_id: String?

      attr_accessor metadata: ::Hash[Symbol, String?]?

      attr_accessor net_terms: Integer?

      attr_reader status: Orb::Models::PlanCreateParams::status?

      def status=: (
        Orb::Models::PlanCreateParams::status
      ) -> Orb::Models::PlanCreateParams::status

      def initialize:
        (
          currency: String,
          name: String,
          prices: ::Array[Orb::Models::PlanCreateParams::price],
          default_invoice_memo: String?,
          external_plan_id: String?,
          metadata: ::Hash[Symbol, String?]?,
          net_terms: Integer?,
          status: Orb::Models::PlanCreateParams::status,
          request_options: Orb::request_opts
        ) -> void
        | (?Orb::Models::plan_create_params | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::plan_create_params

      type price =
        Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice
        | Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice
        | Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice
        | Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice
        | Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice
        | Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice
        | Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice

      class Price < Orb::Union
        type new_plan_unit_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::cadence,
            item_id: String,
            model_type: :unit,
            name: String,
            unit_config: Orb::Models::UnitConfigModel,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanUnitPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit

          attr_accessor name: String

          attr_accessor unit_config: Orb::Models::UnitConfigModel

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::cadence,
              item_id: String,
              name: String,
              unit_config: Orb::Models::UnitConfigModel,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :unit
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_unit_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_unit_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::cadence]
          end
        end

        type new_plan_package_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::cadence,
            item_id: String,
            model_type: :package,
            name: String,
            package_config: Orb::Models::PackageConfigModel,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanPackagePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :package

          attr_accessor name: String

          attr_accessor package_config: Orb::Models::PackageConfigModel

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::cadence,
              item_id: String,
              name: String,
              package_config: Orb::Models::PackageConfigModel,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :package
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_package_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_package_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::cadence]
          end
        end

        type new_plan_matrix_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::cadence,
            item_id: String,
            matrix_config: Orb::Models::MatrixConfigModel,
            model_type: :matrix,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanMatrixPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::cadence

          attr_accessor item_id: String

          attr_accessor matrix_config: Orb::Models::MatrixConfigModel

          attr_accessor model_type: :matrix

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::cadence,
              item_id: String,
              matrix_config: Orb::Models::MatrixConfigModel,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :matrix
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_matrix_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_matrix_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::cadence]
          end
        end

        type new_plan_tiered_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::cadence,
            item_id: String,
            model_type: :tiered,
            name: String,
            tiered_config: Orb::Models::TieredConfigModel,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanTieredPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered

          attr_accessor name: String

          attr_accessor tiered_config: Orb::Models::TieredConfigModel

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::cadence,
              item_id: String,
              name: String,
              tiered_config: Orb::Models::TieredConfigModel,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :tiered
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_tiered_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_tiered_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::cadence]
          end
        end

        type new_plan_tiered_bps_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::cadence,
            item_id: String,
            model_type: :tiered_bps,
            name: String,
            tiered_bps_config: Orb::Models::TieredBpsConfigModel,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanTieredBpsPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_bps

          attr_accessor name: String

          attr_accessor tiered_bps_config: Orb::Models::TieredBpsConfigModel

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::cadence,
              item_id: String,
              name: String,
              tiered_bps_config: Orb::Models::TieredBpsConfigModel,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :tiered_bps
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_tiered_bps_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_tiered_bps_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::cadence]
          end
        end

        type new_plan_bps_price =
          {
            bps_config: Orb::Models::BpsConfigModel,
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::cadence,
            item_id: String,
            model_type: :bps,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanBpsPrice < Orb::BaseModel
          attr_accessor bps_config: Orb::Models::BpsConfigModel

          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bps

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              bps_config: Orb::Models::BpsConfigModel,
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::cadence,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :bps
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_bps_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_bps_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::cadence]
          end
        end

        type new_plan_bulk_bps_price =
          {
            bulk_bps_config: Orb::Models::BulkBpsConfigModel,
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::cadence,
            item_id: String,
            model_type: :bulk_bps,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanBulkBpsPrice < Orb::BaseModel
          attr_accessor bulk_bps_config: Orb::Models::BulkBpsConfigModel

          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk_bps

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              bulk_bps_config: Orb::Models::BulkBpsConfigModel,
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::cadence,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :bulk_bps
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_bulk_bps_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_bulk_bps_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::cadence]
          end
        end

        type new_plan_bulk_price =
          {
            bulk_config: Orb::Models::BulkConfigModel,
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::cadence,
            item_id: String,
            model_type: :bulk,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanBulkPrice < Orb::BaseModel
          attr_accessor bulk_config: Orb::Models::BulkConfigModel

          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              bulk_config: Orb::Models::BulkConfigModel,
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::cadence,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :bulk
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_bulk_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_bulk_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::cadence]
          end
        end

        type new_plan_threshold_total_amount_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::cadence,
            item_id: String,
            model_type: :threshold_total_amount,
            name: String,
            threshold_total_amount_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanThresholdTotalAmountPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :threshold_total_amount

          attr_accessor name: String

          attr_accessor threshold_total_amount_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::cadence,
              item_id: String,
              name: String,
              threshold_total_amount_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :threshold_total_amount
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_threshold_total_amount_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_threshold_total_amount_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::cadence]
          end
        end

        type new_plan_tiered_package_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::cadence,
            item_id: String,
            model_type: :tiered_package,
            name: String,
            tiered_package_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanTieredPackagePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_package

          attr_accessor name: String

          attr_accessor tiered_package_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::cadence,
              item_id: String,
              name: String,
              tiered_package_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :tiered_package
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_tiered_package_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_tiered_package_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::cadence]
          end
        end

        type new_plan_tiered_with_minimum_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::cadence,
            item_id: String,
            model_type: :tiered_with_minimum,
            name: String,
            tiered_with_minimum_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanTieredWithMinimumPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_with_minimum

          attr_accessor name: String

          attr_accessor tiered_with_minimum_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::cadence,
              item_id: String,
              name: String,
              tiered_with_minimum_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :tiered_with_minimum
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_tiered_with_minimum_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_tiered_with_minimum_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::cadence]
          end
        end

        type new_plan_unit_with_percent_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::cadence,
            item_id: String,
            model_type: :unit_with_percent,
            name: String,
            unit_with_percent_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanUnitWithPercentPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit_with_percent

          attr_accessor name: String

          attr_accessor unit_with_percent_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::cadence,
              item_id: String,
              name: String,
              unit_with_percent_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :unit_with_percent
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_unit_with_percent_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_unit_with_percent_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::cadence]
          end
        end

        type new_plan_package_with_allocation_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::cadence,
            item_id: String,
            model_type: :package_with_allocation,
            name: String,
            package_with_allocation_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanPackageWithAllocationPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :package_with_allocation

          attr_accessor name: String

          attr_accessor package_with_allocation_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::cadence,
              item_id: String,
              name: String,
              package_with_allocation_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :package_with_allocation
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_package_with_allocation_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_package_with_allocation_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::cadence]
          end
        end

        type new_plan_tier_with_proration_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::cadence,
            item_id: String,
            model_type: :tiered_with_proration,
            name: String,
            tiered_with_proration_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanTierWithProrationPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_with_proration

          attr_accessor name: String

          attr_accessor tiered_with_proration_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::cadence,
              item_id: String,
              name: String,
              tiered_with_proration_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :tiered_with_proration
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_tier_with_proration_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_tier_with_proration_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::cadence]
          end
        end

        type new_plan_unit_with_proration_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::cadence,
            item_id: String,
            model_type: :unit_with_proration,
            name: String,
            unit_with_proration_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanUnitWithProrationPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit_with_proration

          attr_accessor name: String

          attr_accessor unit_with_proration_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::cadence,
              item_id: String,
              name: String,
              unit_with_proration_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :unit_with_proration
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_unit_with_proration_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_unit_with_proration_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::cadence]
          end
        end

        type new_plan_grouped_allocation_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::cadence,
            grouped_allocation_config: Orb::Models::custom_rating_function_config_model,
            item_id: String,
            model_type: :grouped_allocation,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanGroupedAllocationPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::cadence

          attr_accessor grouped_allocation_config: Orb::Models::custom_rating_function_config_model

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_allocation

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::cadence,
              grouped_allocation_config: Orb::Models::custom_rating_function_config_model,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :grouped_allocation
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_grouped_allocation_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_grouped_allocation_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::cadence]
          end
        end

        type new_plan_grouped_with_prorated_minimum_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::cadence,
            grouped_with_prorated_minimum_config: Orb::Models::custom_rating_function_config_model,
            item_id: String,
            model_type: :grouped_with_prorated_minimum,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanGroupedWithProratedMinimumPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::cadence

          attr_accessor grouped_with_prorated_minimum_config: Orb::Models::custom_rating_function_config_model

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_with_prorated_minimum

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::cadence,
              grouped_with_prorated_minimum_config: Orb::Models::custom_rating_function_config_model,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :grouped_with_prorated_minimum
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_grouped_with_prorated_minimum_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_grouped_with_prorated_minimum_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::cadence]
          end
        end

        type new_plan_grouped_with_metered_minimum_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::cadence,
            grouped_with_metered_minimum_config: Orb::Models::custom_rating_function_config_model,
            item_id: String,
            model_type: :grouped_with_metered_minimum,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanGroupedWithMeteredMinimumPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::cadence

          attr_accessor grouped_with_metered_minimum_config: Orb::Models::custom_rating_function_config_model

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_with_metered_minimum

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::cadence,
              grouped_with_metered_minimum_config: Orb::Models::custom_rating_function_config_model,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :grouped_with_metered_minimum
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_grouped_with_metered_minimum_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_grouped_with_metered_minimum_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::cadence]
          end
        end

        type new_plan_matrix_with_display_name_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::cadence,
            item_id: String,
            matrix_with_display_name_config: Orb::Models::custom_rating_function_config_model,
            model_type: :matrix_with_display_name,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanMatrixWithDisplayNamePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::cadence

          attr_accessor item_id: String

          attr_accessor matrix_with_display_name_config: Orb::Models::custom_rating_function_config_model

          attr_accessor model_type: :matrix_with_display_name

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::cadence,
              item_id: String,
              matrix_with_display_name_config: Orb::Models::custom_rating_function_config_model,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :matrix_with_display_name
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_matrix_with_display_name_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_matrix_with_display_name_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::cadence]
          end
        end

        type new_plan_bulk_with_proration_price =
          {
            bulk_with_proration_config: Orb::Models::custom_rating_function_config_model,
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::cadence,
            item_id: String,
            model_type: :bulk_with_proration,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanBulkWithProrationPrice < Orb::BaseModel
          attr_accessor bulk_with_proration_config: Orb::Models::custom_rating_function_config_model

          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk_with_proration

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              bulk_with_proration_config: Orb::Models::custom_rating_function_config_model,
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::cadence,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :bulk_with_proration
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_bulk_with_proration_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_bulk_with_proration_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::cadence]
          end
        end

        type new_plan_grouped_tiered_package_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::cadence,
            grouped_tiered_package_config: Orb::Models::custom_rating_function_config_model,
            item_id: String,
            model_type: :grouped_tiered_package,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanGroupedTieredPackagePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::cadence

          attr_accessor grouped_tiered_package_config: Orb::Models::custom_rating_function_config_model

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_tiered_package

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::cadence,
              grouped_tiered_package_config: Orb::Models::custom_rating_function_config_model,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :grouped_tiered_package
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_grouped_tiered_package_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_grouped_tiered_package_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::cadence]
          end
        end

        type new_plan_max_group_tiered_package_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::cadence,
            item_id: String,
            max_group_tiered_package_config: Orb::Models::custom_rating_function_config_model,
            model_type: :max_group_tiered_package,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanMaxGroupTieredPackagePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::cadence

          attr_accessor item_id: String

          attr_accessor max_group_tiered_package_config: Orb::Models::custom_rating_function_config_model

          attr_accessor model_type: :max_group_tiered_package

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::cadence,
              item_id: String,
              max_group_tiered_package_config: Orb::Models::custom_rating_function_config_model,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :max_group_tiered_package
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_max_group_tiered_package_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_max_group_tiered_package_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::cadence]
          end
        end

        type new_plan_scalable_matrix_with_unit_pricing_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::cadence,
            item_id: String,
            model_type: :scalable_matrix_with_unit_pricing,
            name: String,
            scalable_matrix_with_unit_pricing_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanScalableMatrixWithUnitPricingPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :scalable_matrix_with_unit_pricing

          attr_accessor name: String

          attr_accessor scalable_matrix_with_unit_pricing_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_unit_pricing_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :scalable_matrix_with_unit_pricing
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_scalable_matrix_with_unit_pricing_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_scalable_matrix_with_unit_pricing_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::cadence]
          end
        end

        type new_plan_scalable_matrix_with_tiered_pricing_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::cadence,
            item_id: String,
            model_type: :scalable_matrix_with_tiered_pricing,
            name: String,
            scalable_matrix_with_tiered_pricing_config: Orb::Models::custom_rating_function_config_model,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanScalableMatrixWithTieredPricingPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :scalable_matrix_with_tiered_pricing

          attr_accessor name: String

          attr_accessor scalable_matrix_with_tiered_pricing_config: Orb::Models::custom_rating_function_config_model

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_tiered_pricing_config: Orb::Models::custom_rating_function_config_model,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :scalable_matrix_with_tiered_pricing
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_scalable_matrix_with_tiered_pricing_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_scalable_matrix_with_tiered_pricing_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::cadence]
          end
        end

        type new_plan_cumulative_grouped_bulk_price =
          {
            cadence: Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::cadence,
            cumulative_grouped_bulk_config: Orb::Models::custom_rating_function_config_model,
            item_id: String,
            model_type: :cumulative_grouped_bulk,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
            metadata: ::Hash[Symbol, String?]?
          }

        class NewPlanCumulativeGroupedBulkPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::cadence

          attr_accessor cumulative_grouped_bulk_config: Orb::Models::custom_rating_function_config_model

          attr_accessor item_id: String

          attr_accessor model_type: :cumulative_grouped_bulk

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          def initialize:
            (
              cadence: Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::cadence,
              cumulative_grouped_bulk_config: Orb::Models::custom_rating_function_config_model,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::NewBillingCycleConfigurationModel?,
              metadata: ::Hash[Symbol, String?]?,
              model_type: :cumulative_grouped_bulk
            ) -> void
            | (
              ?Orb::Models::PlanCreateParams::Price::new_plan_cumulative_grouped_bulk_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::PlanCreateParams::Price::new_plan_cumulative_grouped_bulk_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::cadence]
          end
        end

        private def self.variants: -> [[:unit, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice], [:package, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice], [:matrix, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice], [:tiered, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice], [:tiered_bps, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice], [:bps, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice], [:bulk_bps, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice], [:bulk, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice], [:threshold_total_amount, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice], [:tiered_package, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice], [:tiered_with_minimum, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice], [:unit_with_percent, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice], [:package_with_allocation, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice], [:tiered_with_proration, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice], [:unit_with_proration, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice], [:grouped_allocation, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice], [:grouped_with_prorated_minimum, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice], [:grouped_with_metered_minimum, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice], [:matrix_with_display_name, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice], [:bulk_with_proration, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice], [:grouped_tiered_package, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice], [:max_group_tiered_package, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice], [:scalable_matrix_with_unit_pricing, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice], [:scalable_matrix_with_tiered_pricing, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice], [:cumulative_grouped_bulk, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice]]
      end

      type status = :active | :draft

      class Status < Orb::Enum
        ACTIVE: :active
        DRAFT: :draft

        def self.values: -> ::Array[Orb::Models::PlanCreateParams::status]
      end
    end
  end
end
