module Orb
  module Models
    module Customers
      module Credits
        type ledger_create_entry_by_external_id_response =
          Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment

        module LedgerCreateEntryByExternalIDResponse
          extend Orb::Internal::Type::Union

          type increment =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::entry_status,
              entry_type: :increment,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float
            }

          class Increment < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::entry_status

            attr_accessor entry_type: :increment

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            def initialize: (
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::entry_status,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              ?entry_type: :increment
            ) -> void

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize: (
                id: String,
                expiry_date: Time?,
                per_unit_cost_basis: String?
              ) -> void
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize: (
                id: String,
                external_customer_id: String?
              ) -> void
            end

            type entry_status = :committed | :pending

            module EntryStatus
              extend Orb::Internal::Type::Enum

              COMMITTED: :committed
              PENDING: :pending

              def self?.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Increment::entry_status]
            end
          end

          type decrement =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::entry_status,
              entry_type: :decrement,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              event_id: String?,
              invoice_id: String?,
              price_id: String?
            }

          class Decrement < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::entry_status

            attr_accessor entry_type: :decrement

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            attr_accessor event_id: String?

            attr_accessor invoice_id: String?

            attr_accessor price_id: String?

            def initialize: (
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::entry_status,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              ?event_id: String?,
              ?invoice_id: String?,
              ?price_id: String?,
              ?entry_type: :decrement
            ) -> void

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize: (
                id: String,
                expiry_date: Time?,
                per_unit_cost_basis: String?
              ) -> void
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize: (
                id: String,
                external_customer_id: String?
              ) -> void
            end

            type entry_status = :committed | :pending

            module EntryStatus
              extend Orb::Internal::Type::Enum

              COMMITTED: :committed
              PENDING: :pending

              def self?.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Decrement::entry_status]
            end
          end

          type expiration_change =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::entry_status,
              entry_type: :expiration_change,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              new_block_expiry_date: Time?,
              starting_balance: Float
            }

          class ExpirationChange < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::entry_status

            attr_accessor entry_type: :expiration_change

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor new_block_expiry_date: Time?

            attr_accessor starting_balance: Float

            def initialize: (
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::entry_status,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              new_block_expiry_date: Time?,
              starting_balance: Float,
              ?entry_type: :expiration_change
            ) -> void

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize: (
                id: String,
                expiry_date: Time?,
                per_unit_cost_basis: String?
              ) -> void
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize: (
                id: String,
                external_customer_id: String?
              ) -> void
            end

            type entry_status = :committed | :pending

            module EntryStatus
              extend Orb::Internal::Type::Enum

              COMMITTED: :committed
              PENDING: :pending

              def self?.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChange::entry_status]
            end
          end

          type credit_block_expiry =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::entry_status,
              entry_type: :credit_block_expiry,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float
            }

          class CreditBlockExpiry < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::entry_status

            attr_accessor entry_type: :credit_block_expiry

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            def initialize: (
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::entry_status,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              ?entry_type: :credit_block_expiry
            ) -> void

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize: (
                id: String,
                expiry_date: Time?,
                per_unit_cost_basis: String?
              ) -> void
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize: (
                id: String,
                external_customer_id: String?
              ) -> void
            end

            type entry_status = :committed | :pending

            module EntryStatus
              extend Orb::Internal::Type::Enum

              COMMITTED: :committed
              PENDING: :pending

              def self?.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiry::entry_status]
            end
          end

          type void_ =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::entry_status,
              entry_type: :void,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              void_amount: Float,
              void_reason: String?
            }

          class Void < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::entry_status

            attr_accessor entry_type: :void

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            attr_accessor void_amount: Float

            attr_accessor void_reason: String?

            def initialize: (
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::entry_status,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              void_amount: Float,
              void_reason: String?,
              ?entry_type: :void
            ) -> void

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize: (
                id: String,
                expiry_date: Time?,
                per_unit_cost_basis: String?
              ) -> void
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize: (
                id: String,
                external_customer_id: String?
              ) -> void
            end

            type entry_status = :committed | :pending

            module EntryStatus
              extend Orb::Internal::Type::Enum

              COMMITTED: :committed
              PENDING: :pending

              def self?.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Void::entry_status]
            end
          end

          type void_initiated =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::entry_status,
              entry_type: :void_initiated,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              new_block_expiry_date: Time,
              starting_balance: Float,
              void_amount: Float,
              void_reason: String?
            }

          class VoidInitiated < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::entry_status

            attr_accessor entry_type: :void_initiated

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor new_block_expiry_date: Time

            attr_accessor starting_balance: Float

            attr_accessor void_amount: Float

            attr_accessor void_reason: String?

            def initialize: (
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::entry_status,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              new_block_expiry_date: Time,
              starting_balance: Float,
              void_amount: Float,
              void_reason: String?,
              ?entry_type: :void_initiated
            ) -> void

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize: (
                id: String,
                expiry_date: Time?,
                per_unit_cost_basis: String?
              ) -> void
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize: (
                id: String,
                external_customer_id: String?
              ) -> void
            end

            type entry_status = :committed | :pending

            module EntryStatus
              extend Orb::Internal::Type::Enum

              COMMITTED: :committed
              PENDING: :pending

              def self?.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiated::entry_status]
            end
          end

          type amendment =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::entry_status,
              entry_type: :amendment,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float
            }

          class Amendment < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::entry_status

            attr_accessor entry_type: :amendment

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            def initialize: (
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::entry_status,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              ?entry_type: :amendment
            ) -> void

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize: (
                id: String,
                expiry_date: Time?,
                per_unit_cost_basis: String?
              ) -> void
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize: (
                id: String,
                external_customer_id: String?
              ) -> void
            end

            type entry_status = :committed | :pending

            module EntryStatus
              extend Orb::Internal::Type::Enum

              COMMITTED: :committed
              PENDING: :pending

              def self?.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::Amendment::entry_status]
            end
          end

          def self?.variants: -> ::Array[Orb::Models::Customers::Credits::ledger_create_entry_by_external_id_response]
        end
      end
    end
  end
end
