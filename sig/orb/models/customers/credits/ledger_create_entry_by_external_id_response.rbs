module Orb
  module Models
    module Customers
      module Credits
        type ledger_create_entry_by_external_id_response =
          Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry
          | Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry

        class LedgerCreateEntryByExternalIDResponse < Orb::Union
          type increment_ledger_entry =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::entry_status,
              entry_type: :increment,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float
            }

          class IncrementLedgerEntry < Orb::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::entry_status

            attr_accessor entry_type: :increment

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            def initialize:
              (
                id: String,
                amount: Float,
                created_at: Time,
                credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::CreditBlock,
                currency: String,
                customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::Customer,
                description: String?,
                ending_balance: Float,
                entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::entry_status,
                ledger_sequence_number: Integer,
                metadata: ::Hash[Symbol, String],
                starting_balance: Float,
                entry_type: :increment
              ) -> void
              | (
                ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::increment_ledger_entry
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::increment_ledger_entry

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize:
                (
                  id: String,
                  expiry_date: Time?,
                  per_unit_cost_basis: String?
                ) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::credit_block
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::credit_block
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize:
                (id: String, external_customer_id: String?) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::customer
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::customer
            end

            type entry_status = :committed | :pending

            class EntryStatus < Orb::Enum
              COMMITTED: :committed
              PENDING: :pending

              def self.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry::entry_status]
            end
          end

          type decrement_ledger_entry =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::entry_status,
              entry_type: :decrement,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              event_id: String?,
              invoice_id: String?,
              price_id: String?
            }

          class DecrementLedgerEntry < Orb::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::entry_status

            attr_accessor entry_type: :decrement

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            attr_accessor event_id: String?

            attr_accessor invoice_id: String?

            attr_accessor price_id: String?

            def initialize:
              (
                id: String,
                amount: Float,
                created_at: Time,
                credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::CreditBlock,
                currency: String,
                customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::Customer,
                description: String?,
                ending_balance: Float,
                entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::entry_status,
                ledger_sequence_number: Integer,
                metadata: ::Hash[Symbol, String],
                starting_balance: Float,
                event_id: String?,
                invoice_id: String?,
                price_id: String?,
                entry_type: :decrement
              ) -> void
              | (
                ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::decrement_ledger_entry
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::decrement_ledger_entry

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize:
                (
                  id: String,
                  expiry_date: Time?,
                  per_unit_cost_basis: String?
                ) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::credit_block
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::credit_block
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize:
                (id: String, external_customer_id: String?) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::customer
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::customer
            end

            type entry_status = :committed | :pending

            class EntryStatus < Orb::Enum
              COMMITTED: :committed
              PENDING: :pending

              def self.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry::entry_status]
            end
          end

          type expiration_change_ledger_entry =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::entry_status,
              entry_type: :expiration_change,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              new_block_expiry_date: Time?,
              starting_balance: Float
            }

          class ExpirationChangeLedgerEntry < Orb::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::entry_status

            attr_accessor entry_type: :expiration_change

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor new_block_expiry_date: Time?

            attr_accessor starting_balance: Float

            def initialize:
              (
                id: String,
                amount: Float,
                created_at: Time,
                credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::CreditBlock,
                currency: String,
                customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::Customer,
                description: String?,
                ending_balance: Float,
                entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::entry_status,
                ledger_sequence_number: Integer,
                metadata: ::Hash[Symbol, String],
                new_block_expiry_date: Time?,
                starting_balance: Float,
                entry_type: :expiration_change
              ) -> void
              | (
                ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::expiration_change_ledger_entry
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::expiration_change_ledger_entry

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize:
                (
                  id: String,
                  expiry_date: Time?,
                  per_unit_cost_basis: String?
                ) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::credit_block
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::credit_block
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize:
                (id: String, external_customer_id: String?) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::customer
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::customer
            end

            type entry_status = :committed | :pending

            class EntryStatus < Orb::Enum
              COMMITTED: :committed
              PENDING: :pending

              def self.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry::entry_status]
            end
          end

          type credit_block_expiry_ledger_entry =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::entry_status,
              entry_type: :credit_block_expiry,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float
            }

          class CreditBlockExpiryLedgerEntry < Orb::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::entry_status

            attr_accessor entry_type: :credit_block_expiry

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            def initialize:
              (
                id: String,
                amount: Float,
                created_at: Time,
                credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::CreditBlock,
                currency: String,
                customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::Customer,
                description: String?,
                ending_balance: Float,
                entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::entry_status,
                ledger_sequence_number: Integer,
                metadata: ::Hash[Symbol, String],
                starting_balance: Float,
                entry_type: :credit_block_expiry
              ) -> void
              | (
                ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::credit_block_expiry_ledger_entry
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::credit_block_expiry_ledger_entry

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize:
                (
                  id: String,
                  expiry_date: Time?,
                  per_unit_cost_basis: String?
                ) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::credit_block
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::credit_block
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize:
                (id: String, external_customer_id: String?) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::customer
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::customer
            end

            type entry_status = :committed | :pending

            class EntryStatus < Orb::Enum
              COMMITTED: :committed
              PENDING: :pending

              def self.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry::entry_status]
            end
          end

          type void_ledger_entry =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::entry_status,
              entry_type: :void,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float,
              void_amount: Float,
              void_reason: String?
            }

          class VoidLedgerEntry < Orb::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::entry_status

            attr_accessor entry_type: :void

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            attr_accessor void_amount: Float

            attr_accessor void_reason: String?

            def initialize:
              (
                id: String,
                amount: Float,
                created_at: Time,
                credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::CreditBlock,
                currency: String,
                customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::Customer,
                description: String?,
                ending_balance: Float,
                entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::entry_status,
                ledger_sequence_number: Integer,
                metadata: ::Hash[Symbol, String],
                starting_balance: Float,
                void_amount: Float,
                void_reason: String?,
                entry_type: :void
              ) -> void
              | (
                ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::void_ledger_entry
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::void_ledger_entry

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize:
                (
                  id: String,
                  expiry_date: Time?,
                  per_unit_cost_basis: String?
                ) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::credit_block
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::credit_block
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize:
                (id: String, external_customer_id: String?) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::customer
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::customer
            end

            type entry_status = :committed | :pending

            class EntryStatus < Orb::Enum
              COMMITTED: :committed
              PENDING: :pending

              def self.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry::entry_status]
            end
          end

          type void_initiated_ledger_entry =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::entry_status,
              entry_type: :void_initiated,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              new_block_expiry_date: Time,
              starting_balance: Float,
              void_amount: Float,
              void_reason: String?
            }

          class VoidInitiatedLedgerEntry < Orb::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::entry_status

            attr_accessor entry_type: :void_initiated

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor new_block_expiry_date: Time

            attr_accessor starting_balance: Float

            attr_accessor void_amount: Float

            attr_accessor void_reason: String?

            def initialize:
              (
                id: String,
                amount: Float,
                created_at: Time,
                credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::CreditBlock,
                currency: String,
                customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::Customer,
                description: String?,
                ending_balance: Float,
                entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::entry_status,
                ledger_sequence_number: Integer,
                metadata: ::Hash[Symbol, String],
                new_block_expiry_date: Time,
                starting_balance: Float,
                void_amount: Float,
                void_reason: String?,
                entry_type: :void_initiated
              ) -> void
              | (
                ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::void_initiated_ledger_entry
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::void_initiated_ledger_entry

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize:
                (
                  id: String,
                  expiry_date: Time?,
                  per_unit_cost_basis: String?
                ) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::credit_block
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::credit_block
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize:
                (id: String, external_customer_id: String?) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::customer
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::customer
            end

            type entry_status = :committed | :pending

            class EntryStatus < Orb::Enum
              COMMITTED: :committed
              PENDING: :pending

              def self.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry::entry_status]
            end
          end

          type amendment_ledger_entry =
            {
              id: String,
              amount: Float,
              created_at: Time,
              credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::CreditBlock,
              currency: String,
              customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::Customer,
              description: String?,
              ending_balance: Float,
              entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::entry_status,
              entry_type: :amendment,
              ledger_sequence_number: Integer,
              metadata: ::Hash[Symbol, String],
              starting_balance: Float
            }

          class AmendmentLedgerEntry < Orb::BaseModel
            attr_accessor id: String

            attr_accessor amount: Float

            attr_accessor created_at: Time

            attr_accessor credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::CreditBlock

            attr_accessor currency: String

            attr_accessor customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::Customer

            attr_accessor description: String?

            attr_accessor ending_balance: Float

            attr_accessor entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::entry_status

            attr_accessor entry_type: :amendment

            attr_accessor ledger_sequence_number: Integer

            attr_accessor metadata: ::Hash[Symbol, String]

            attr_accessor starting_balance: Float

            def initialize:
              (
                id: String,
                amount: Float,
                created_at: Time,
                credit_block: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::CreditBlock,
                currency: String,
                customer: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::Customer,
                description: String?,
                ending_balance: Float,
                entry_status: Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::entry_status,
                ledger_sequence_number: Integer,
                metadata: ::Hash[Symbol, String],
                starting_balance: Float,
                entry_type: :amendment
              ) -> void
              | (
                ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::amendment_ledger_entry
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::amendment_ledger_entry

            type credit_block =
              { id: String, expiry_date: Time?, per_unit_cost_basis: String? }

            class CreditBlock < Orb::BaseModel
              attr_accessor id: String

              attr_accessor expiry_date: Time?

              attr_accessor per_unit_cost_basis: String?

              def initialize:
                (
                  id: String,
                  expiry_date: Time?,
                  per_unit_cost_basis: String?
                ) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::credit_block
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::credit_block
            end

            type customer = { id: String, external_customer_id: String? }

            class Customer < Orb::BaseModel
              attr_accessor id: String

              attr_accessor external_customer_id: String?

              def initialize:
                (id: String, external_customer_id: String?) -> void
                | (
                  ?Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::customer
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::customer
            end

            type entry_status = :committed | :pending

            class EntryStatus < Orb::Enum
              COMMITTED: :committed
              PENDING: :pending

              def self.values: -> ::Array[Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry::entry_status]
            end
          end

          def self.variants: -> [Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::IncrementLedgerEntry, Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::DecrementLedgerEntry, Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::ExpirationChangeLedgerEntry, Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::CreditBlockExpiryLedgerEntry, Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidLedgerEntry, Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::VoidInitiatedLedgerEntry, Orb::Models::Customers::Credits::LedgerCreateEntryByExternalIDResponse::AmendmentLedgerEntry]
        end
      end
    end
  end
end
