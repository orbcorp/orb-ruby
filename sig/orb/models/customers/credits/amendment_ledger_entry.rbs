module Orb
  module Models
    module Customers
      module Credits
        type amendment_ledger_entry =
          {
            id: String,
            amount: Float,
            created_at: Time,
            credit_block: Orb::Customers::Credits::AffectedBlock,
            currency: String,
            customer: Orb::CustomerMinified,
            description: String?,
            ending_balance: Float,
            entry_status: Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_status,
            entry_type: Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_type,
            ledger_sequence_number: Integer,
            metadata: ::Hash[Symbol, String],
            starting_balance: Float
          }

        class AmendmentLedgerEntry < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amount: Float

          attr_accessor created_at: Time

          attr_accessor credit_block: Orb::Customers::Credits::AffectedBlock

          attr_accessor currency: String

          attr_accessor customer: Orb::CustomerMinified

          attr_accessor description: String?

          attr_accessor ending_balance: Float

          attr_accessor entry_status: Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_status

          attr_accessor entry_type: Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_type

          attr_accessor ledger_sequence_number: Integer

          attr_accessor metadata: ::Hash[Symbol, String]

          attr_accessor starting_balance: Float

          def initialize: (
            id: String,
            amount: Float,
            created_at: Time,
            credit_block: Orb::Customers::Credits::AffectedBlock,
            currency: String,
            customer: Orb::CustomerMinified,
            description: String?,
            ending_balance: Float,
            entry_status: Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_status,
            entry_type: Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_type,
            ledger_sequence_number: Integer,
            metadata: ::Hash[Symbol, String],
            starting_balance: Float
          ) -> void

          def to_hash: -> {
            id: String,
            amount: Float,
            created_at: Time,
            credit_block: Orb::Customers::Credits::AffectedBlock,
            currency: String,
            customer: Orb::CustomerMinified,
            description: String?,
            ending_balance: Float,
            entry_status: Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_status,
            entry_type: Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_type,
            ledger_sequence_number: Integer,
            metadata: ::Hash[Symbol, String],
            starting_balance: Float
          }

          type entry_status = :committed | :pending

          module EntryStatus
            extend Orb::Internal::Type::Enum

            COMMITTED: :committed
            PENDING: :pending

            def self?.values: -> ::Array[Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_status]
          end

          type entry_type = :amendment

          module EntryType
            extend Orb::Internal::Type::Enum

            AMENDMENT: :amendment

            def self?.values: -> ::Array[Orb::Models::Customers::Credits::AmendmentLedgerEntry::entry_type]
          end
        end
      end
    end
  end
end
