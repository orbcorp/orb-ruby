module Orb
  module Models
    module Customers
      module Credits
        type top_up_create_by_external_id_response =
          {
            id: String,
            amount: String,
            currency: String,
            invoice_settings: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings,
            per_unit_cost_basis: String,
            threshold: String,
            expires_after: Integer?,
            expires_after_unit: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::expires_after_unit?
          }

        class TopUpCreateByExternalIDResponse < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor amount: String

          attr_accessor currency: String

          attr_accessor invoice_settings: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings

          attr_accessor per_unit_cost_basis: String

          attr_accessor threshold: String

          attr_accessor expires_after: Integer?

          attr_accessor expires_after_unit: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::expires_after_unit?

          def initialize: (
            id: String,
            amount: String,
            currency: String,
            invoice_settings: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings,
            per_unit_cost_basis: String,
            threshold: String,
            ?expires_after: Integer?,
            ?expires_after_unit: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::expires_after_unit?
          ) -> void

          def to_hash: -> {
            id: String,
            amount: String,
            currency: String,
            invoice_settings: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::InvoiceSettings,
            per_unit_cost_basis: String,
            threshold: String,
            expires_after: Integer?,
            expires_after_unit: Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::expires_after_unit?
          }

          type invoice_settings =
            {
              auto_collection: bool,
              net_terms: Integer,
              memo: String?,
              require_successful_payment: bool
            }

          class InvoiceSettings < Orb::Internal::Type::BaseModel
            attr_accessor auto_collection: bool

            attr_accessor net_terms: Integer

            attr_accessor memo: String?

            attr_reader require_successful_payment: bool?

            def require_successful_payment=: (bool) -> bool

            def initialize: (
              auto_collection: bool,
              net_terms: Integer,
              ?memo: String?,
              ?require_successful_payment: bool
            ) -> void

            def to_hash: -> {
              auto_collection: bool,
              net_terms: Integer,
              memo: String?,
              require_successful_payment: bool
            }
          end

          type expires_after_unit = :day | :month

          module ExpiresAfterUnit
            extend Orb::Internal::Type::Enum

            DAY: :day
            MONTH: :month

            def self?.values: -> ::Array[Orb::Models::Customers::Credits::TopUpCreateByExternalIDResponse::expires_after_unit]
          end
        end
      end
    end
  end
end
