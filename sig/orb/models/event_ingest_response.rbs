module Orb
  module Models
    type event_ingest_response =
      {
        validation_failed: ::Array[Orb::Models::EventIngestResponse::ValidationFailed],
        debug: Orb::Models::EventIngestResponse::Debug?
      }

    class EventIngestResponse < Orb::Internal::Type::BaseModel
      attr_accessor validation_failed: ::Array[Orb::Models::EventIngestResponse::ValidationFailed]

      attr_accessor debug: Orb::Models::EventIngestResponse::Debug?

      def initialize: (
        validation_failed: ::Array[Orb::Models::EventIngestResponse::ValidationFailed],
        ?debug: Orb::Models::EventIngestResponse::Debug?
      ) -> void

      def to_hash: -> Orb::Models::event_ingest_response

      type validation_failed =
        { idempotency_key: String, validation_errors: ::Array[String] }

      class ValidationFailed < Orb::Internal::Type::BaseModel
        attr_accessor idempotency_key: String

        attr_accessor validation_errors: ::Array[String]

        def initialize: (
          idempotency_key: String,
          validation_errors: ::Array[String]
        ) -> void

        def to_hash: -> Orb::Models::EventIngestResponse::validation_failed
      end

      type debug = { duplicate: ::Array[String], ingested: ::Array[String] }

      class Debug < Orb::Internal::Type::BaseModel
        attr_accessor duplicate: ::Array[String]

        attr_accessor ingested: ::Array[String]

        def initialize: (
          duplicate: ::Array[String],
          ingested: ::Array[String]
        ) -> void

        def to_hash: -> Orb::Models::EventIngestResponse::debug
      end
    end
  end
end
