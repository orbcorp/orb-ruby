module Orb
  module Models
    type invoice_line_item_create_response =
      {
        id: String,
        adjusted_subtotal: String,
        adjustments: ::Array[Orb::Models::InvoiceLineItemCreateResponse::adjustment],
        amount: String,
        credits_applied: String,
        discount: Orb::Models::discount?,
        end_date: Time,
        filter: String?,
        grouping: String?,
        maximum: Orb::Models::InvoiceLineItemCreateResponse::Maximum?,
        maximum_amount: String?,
        minimum: Orb::Models::InvoiceLineItemCreateResponse::Minimum?,
        minimum_amount: String?,
        name: String,
        partially_invoiced_amount: String,
        price: Orb::Models::price,
        quantity: Float,
        start_date: Time,
        sub_line_items: ::Array[Orb::Models::InvoiceLineItemCreateResponse::sub_line_item],
        subtotal: String,
        tax_amounts: ::Array[Orb::Models::InvoiceLineItemCreateResponse::TaxAmount],
        usage_customer_ids: ::Array[String]?
      }

    class InvoiceLineItemCreateResponse < Orb::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor adjusted_subtotal: String

      attr_accessor adjustments: ::Array[Orb::Models::InvoiceLineItemCreateResponse::adjustment]

      attr_accessor amount: String

      attr_accessor credits_applied: String

      attr_accessor discount: Orb::Models::discount?

      attr_accessor end_date: Time

      attr_accessor filter: String?

      attr_accessor grouping: String?

      attr_accessor maximum: Orb::Models::InvoiceLineItemCreateResponse::Maximum?

      attr_accessor maximum_amount: String?

      attr_accessor minimum: Orb::Models::InvoiceLineItemCreateResponse::Minimum?

      attr_accessor minimum_amount: String?

      attr_accessor name: String

      attr_accessor partially_invoiced_amount: String

      attr_accessor price: Orb::Models::price

      attr_accessor quantity: Float

      attr_accessor start_date: Time

      attr_accessor sub_line_items: ::Array[Orb::Models::InvoiceLineItemCreateResponse::sub_line_item]

      attr_accessor subtotal: String

      attr_accessor tax_amounts: ::Array[Orb::Models::InvoiceLineItemCreateResponse::TaxAmount]

      attr_accessor usage_customer_ids: ::Array[String]?

      def initialize: (
        id: String,
        adjusted_subtotal: String,
        adjustments: ::Array[Orb::Models::InvoiceLineItemCreateResponse::adjustment],
        amount: String,
        credits_applied: String,
        discount: Orb::Models::discount?,
        end_date: Time,
        filter: String?,
        grouping: String?,
        maximum: Orb::Models::InvoiceLineItemCreateResponse::Maximum?,
        maximum_amount: String?,
        minimum: Orb::Models::InvoiceLineItemCreateResponse::Minimum?,
        minimum_amount: String?,
        name: String,
        partially_invoiced_amount: String,
        price: Orb::Models::price,
        quantity: Float,
        start_date: Time,
        sub_line_items: ::Array[Orb::Models::InvoiceLineItemCreateResponse::sub_line_item],
        subtotal: String,
        tax_amounts: ::Array[Orb::Models::InvoiceLineItemCreateResponse::TaxAmount],
        usage_customer_ids: ::Array[String]?
      ) -> void

      def to_hash: -> {
        id: String,
        adjusted_subtotal: String,
        adjustments: ::Array[Orb::Models::InvoiceLineItemCreateResponse::adjustment],
        amount: String,
        credits_applied: String,
        discount: Orb::Models::discount?,
        end_date: Time,
        filter: String?,
        grouping: String?,
        maximum: Orb::Models::InvoiceLineItemCreateResponse::Maximum?,
        maximum_amount: String?,
        minimum: Orb::Models::InvoiceLineItemCreateResponse::Minimum?,
        minimum_amount: String?,
        name: String,
        partially_invoiced_amount: String,
        price: Orb::Models::price,
        quantity: Float,
        start_date: Time,
        sub_line_items: ::Array[Orb::Models::InvoiceLineItemCreateResponse::sub_line_item],
        subtotal: String,
        tax_amounts: ::Array[Orb::Models::InvoiceLineItemCreateResponse::TaxAmount],
        usage_customer_ids: ::Array[String]?
      }

      type adjustment =
        Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount
        | Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount
        | Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount
        | Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum
        | Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum

      module Adjustment
        extend Orb::Internal::Type::Union

        type usage_discount =
          {
            id: String,
            adjustment_type: :usage_discount,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter],
            is_invoice_level: bool,
            reason: String?,
            usage_discount: Float
          }

        class UsageDiscount < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :usage_discount

          attr_accessor amount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor reason: String?

          attr_accessor usage_discount: Float

          def initialize: (
            id: String,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter],
            is_invoice_level: bool,
            reason: String?,
            usage_discount: Float,
            ?adjustment_type: :usage_discount
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :usage_discount,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter],
            is_invoice_level: bool,
            reason: String?,
            usage_discount: Float
          }

          type filter =
            {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::field

            attr_accessor operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::UsageDiscount::Filter::operator]
            end
          end
        end

        type amount_discount =
          {
            id: String,
            adjustment_type: :amount_discount,
            amount: String,
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter],
            is_invoice_level: bool,
            reason: String?
          }

        class AmountDiscount < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :amount_discount

          attr_accessor amount: String

          attr_accessor amount_discount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor reason: String?

          def initialize: (
            id: String,
            amount: String,
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter],
            is_invoice_level: bool,
            reason: String?,
            ?adjustment_type: :amount_discount
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :amount_discount,
            amount: String,
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter],
            is_invoice_level: bool,
            reason: String?
          }

          type filter =
            {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::field

            attr_accessor operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::AmountDiscount::Filter::operator]
            end
          end
        end

        type percentage_discount =
          {
            id: String,
            adjustment_type: :percentage_discount,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter],
            is_invoice_level: bool,
            percentage_discount: Float,
            reason: String?
          }

        class PercentageDiscount < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :percentage_discount

          attr_accessor amount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor percentage_discount: Float

          attr_accessor reason: String?

          def initialize: (
            id: String,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter],
            is_invoice_level: bool,
            percentage_discount: Float,
            reason: String?,
            ?adjustment_type: :percentage_discount
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :percentage_discount,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter],
            is_invoice_level: bool,
            percentage_discount: Float,
            reason: String?
          }

          type filter =
            {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::field

            attr_accessor operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::PercentageDiscount::Filter::operator]
            end
          end
        end

        type minimum =
          {
            id: String,
            adjustment_type: :minimum,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter],
            is_invoice_level: bool,
            item_id: String,
            minimum_amount: String,
            reason: String?
          }

        class Minimum < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :minimum

          attr_accessor amount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor item_id: String

          attr_accessor minimum_amount: String

          attr_accessor reason: String?

          def initialize: (
            id: String,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter],
            is_invoice_level: bool,
            item_id: String,
            minimum_amount: String,
            reason: String?,
            ?adjustment_type: :minimum
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :minimum,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter],
            is_invoice_level: bool,
            item_id: String,
            minimum_amount: String,
            reason: String?
          }

          type filter =
            {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::field

            attr_accessor operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Minimum::Filter::operator]
            end
          end
        end

        type maximum =
          {
            id: String,
            adjustment_type: :maximum,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter],
            is_invoice_level: bool,
            maximum_amount: String,
            reason: String?
          }

        class Maximum < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :maximum

          attr_accessor amount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor maximum_amount: String

          attr_accessor reason: String?

          def initialize: (
            id: String,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter],
            is_invoice_level: bool,
            maximum_amount: String,
            reason: String?,
            ?adjustment_type: :maximum
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :maximum,
            amount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter],
            is_invoice_level: bool,
            maximum_amount: String,
            reason: String?
          }

          type filter =
            {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::field

            attr_accessor operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::field,
              operator: Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Adjustment::Maximum::Filter::operator]
            end
          end
        end

        def self?.variants: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::adjustment]
      end

      type maximum =
        {
          applies_to_price_ids: ::Array[String],
          filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter],
          maximum_amount: String
        }

      class Maximum < Orb::Internal::Type::BaseModel
        attr_accessor applies_to_price_ids: ::Array[String]

        attr_accessor filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter]

        attr_accessor maximum_amount: String

        def initialize: (
          applies_to_price_ids: ::Array[String],
          filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter],
          maximum_amount: String
        ) -> void

        def to_hash: -> {
          applies_to_price_ids: ::Array[String],
          filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter],
          maximum_amount: String
        }

        type filter =
          {
            field: Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::field,
            operator: Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::operator,
            values: ::Array[String]
          }

        class Filter < Orb::Internal::Type::BaseModel
          attr_accessor field: Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::field

          attr_accessor operator: Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::operator

          attr_accessor values: ::Array[String]

          def initialize: (
            field: Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::field,
            operator: Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::operator,
            values: ::Array[String]
          ) -> void

          def to_hash: -> {
            field: Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::field,
            operator: Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::operator,
            values: ::Array[String]
          }

          type field =
            :price_id | :item_id | :price_type | :currency | :pricing_unit_id

          module Field
            extend Orb::Internal::Type::Enum

            PRICE_ID: :price_id
            ITEM_ID: :item_id
            PRICE_TYPE: :price_type
            CURRENCY: :currency
            PRICING_UNIT_ID: :pricing_unit_id

            def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::field]
          end

          type operator = :includes | :excludes

          module Operator
            extend Orb::Internal::Type::Enum

            INCLUDES: :includes
            EXCLUDES: :excludes

            def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Maximum::Filter::operator]
          end
        end
      end

      type minimum =
        {
          applies_to_price_ids: ::Array[String],
          filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter],
          minimum_amount: String
        }

      class Minimum < Orb::Internal::Type::BaseModel
        attr_accessor applies_to_price_ids: ::Array[String]

        attr_accessor filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter]

        attr_accessor minimum_amount: String

        def initialize: (
          applies_to_price_ids: ::Array[String],
          filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter],
          minimum_amount: String
        ) -> void

        def to_hash: -> {
          applies_to_price_ids: ::Array[String],
          filters: ::Array[Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter],
          minimum_amount: String
        }

        type filter =
          {
            field: Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::field,
            operator: Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::operator,
            values: ::Array[String]
          }

        class Filter < Orb::Internal::Type::BaseModel
          attr_accessor field: Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::field

          attr_accessor operator: Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::operator

          attr_accessor values: ::Array[String]

          def initialize: (
            field: Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::field,
            operator: Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::operator,
            values: ::Array[String]
          ) -> void

          def to_hash: -> {
            field: Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::field,
            operator: Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::operator,
            values: ::Array[String]
          }

          type field =
            :price_id | :item_id | :price_type | :currency | :pricing_unit_id

          module Field
            extend Orb::Internal::Type::Enum

            PRICE_ID: :price_id
            ITEM_ID: :item_id
            PRICE_TYPE: :price_type
            CURRENCY: :currency
            PRICING_UNIT_ID: :pricing_unit_id

            def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::field]
          end

          type operator = :includes | :excludes

          module Operator
            extend Orb::Internal::Type::Enum

            INCLUDES: :includes
            EXCLUDES: :excludes

            def self?.values: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::Minimum::Filter::operator]
          end
        end
      end

      type sub_line_item =
        Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix
        | Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier
        | Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Null

      module SubLineItem
        extend Orb::Internal::Type::Union

        type matrix =
          {
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix::Grouping?,
            matrix_config: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix::MatrixConfig,
            name: String,
            quantity: Float,
            type: :matrix
          }

        class Matrix < Orb::Internal::Type::BaseModel
          attr_accessor amount: String

          attr_accessor grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix::Grouping?

          attr_accessor matrix_config: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix::MatrixConfig

          attr_accessor name: String

          attr_accessor quantity: Float

          attr_accessor type: :matrix

          def initialize: (
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix::Grouping?,
            matrix_config: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix::MatrixConfig,
            name: String,
            quantity: Float,
            ?type: :matrix
          ) -> void

          def to_hash: -> {
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix::Grouping?,
            matrix_config: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Matrix::MatrixConfig,
            name: String,
            quantity: Float,
            type: :matrix
          }

          type grouping = { key: String, value: String? }

          class Grouping < Orb::Internal::Type::BaseModel
            attr_accessor key: String

            attr_accessor value: String?

            def initialize: (key: String, value: String?) -> void

            def to_hash: -> { key: String, value: String? }
          end

          type matrix_config = { dimension_values: ::Array[String?] }

          class MatrixConfig < Orb::Internal::Type::BaseModel
            attr_accessor dimension_values: ::Array[String?]

            def initialize: (dimension_values: ::Array[String?]) -> void

            def to_hash: -> { dimension_values: ::Array[String?] }
          end
        end

        type tier =
          {
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier::Grouping?,
            name: String,
            quantity: Float,
            tier_config: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier::TierConfig,
            type: :tier
          }

        class Tier < Orb::Internal::Type::BaseModel
          attr_accessor amount: String

          attr_accessor grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier::Grouping?

          attr_accessor name: String

          attr_accessor quantity: Float

          attr_accessor tier_config: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier::TierConfig

          attr_accessor type: :tier

          def initialize: (
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier::Grouping?,
            name: String,
            quantity: Float,
            tier_config: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier::TierConfig,
            ?type: :tier
          ) -> void

          def to_hash: -> {
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier::Grouping?,
            name: String,
            quantity: Float,
            tier_config: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Tier::TierConfig,
            type: :tier
          }

          type grouping = { key: String, value: String? }

          class Grouping < Orb::Internal::Type::BaseModel
            attr_accessor key: String

            attr_accessor value: String?

            def initialize: (key: String, value: String?) -> void

            def to_hash: -> { key: String, value: String? }
          end

          type tier_config =
            { first_unit: Float, last_unit: Float?, unit_amount: String }

          class TierConfig < Orb::Internal::Type::BaseModel
            attr_accessor first_unit: Float

            attr_accessor last_unit: Float?

            attr_accessor unit_amount: String

            def initialize: (
              first_unit: Float,
              last_unit: Float?,
              unit_amount: String
            ) -> void

            def to_hash: -> {
              first_unit: Float,
              last_unit: Float?,
              unit_amount: String
            }
          end
        end

        type null =
          {
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Null::Grouping?,
            name: String,
            quantity: Float,
            type: :"'null'"
          }

        class Null < Orb::Internal::Type::BaseModel
          attr_accessor amount: String

          attr_accessor grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Null::Grouping?

          attr_accessor name: String

          attr_accessor quantity: Float

          attr_accessor type: :"'null'"

          def initialize: (
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Null::Grouping?,
            name: String,
            quantity: Float,
            ?type: :"'null'"
          ) -> void

          def to_hash: -> {
            amount: String,
            grouping: Orb::Models::InvoiceLineItemCreateResponse::SubLineItem::Null::Grouping?,
            name: String,
            quantity: Float,
            type: :"'null'"
          }

          type grouping = { key: String, value: String? }

          class Grouping < Orb::Internal::Type::BaseModel
            attr_accessor key: String

            attr_accessor value: String?

            def initialize: (key: String, value: String?) -> void

            def to_hash: -> { key: String, value: String? }
          end
        end

        def self?.variants: -> ::Array[Orb::Models::InvoiceLineItemCreateResponse::sub_line_item]
      end

      type tax_amount =
        {
          amount: String,
          tax_rate_description: String,
          tax_rate_percentage: String?
        }

      class TaxAmount < Orb::Internal::Type::BaseModel
        attr_accessor amount: String

        attr_accessor tax_rate_description: String

        attr_accessor tax_rate_percentage: String?

        def initialize: (
          amount: String,
          tax_rate_description: String,
          tax_rate_percentage: String?
        ) -> void

        def to_hash: -> {
          amount: String,
          tax_rate_description: String,
          tax_rate_percentage: String?
        }
      end
    end
  end
end
