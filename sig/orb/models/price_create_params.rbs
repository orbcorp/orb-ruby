module Orb
  module Models
    type price_create_params =
      {
        cadence: Orb::Models::PriceCreateParams::cadence,
        currency: String,
        item_id: String,
        model_type: Orb::Models::PriceCreateParams::model_type,
        name: String,
        unit_config: Orb::Models::PriceCreateParams::UnitConfig,
        billable_metric_id: String?,
        billed_in_advance: bool?,
        billing_cycle_configuration: Orb::Models::PriceCreateParams::BillingCycleConfiguration?,
        conversion_rate: Float?,
        external_price_id: String?,
        fixed_price_quantity: Float?,
        invoice_grouping_key: String?,
        invoicing_cycle_configuration: Orb::Models::PriceCreateParams::InvoicingCycleConfiguration?,
        metadata: ::Hash[Symbol, String?]?,
        package_config: Orb::Models::PriceCreateParams::PackageConfig,
        matrix_config: Orb::Models::PriceCreateParams::MatrixConfig,
        matrix_with_allocation_config: Orb::Models::PriceCreateParams::MatrixWithAllocationConfig,
        tiered_config: Orb::Models::PriceCreateParams::TieredConfig,
        tiered_bps_config: Orb::Models::PriceCreateParams::TieredBpsConfig,
        bps_config: Orb::Models::PriceCreateParams::BpsConfig,
        bulk_bps_config: Orb::Models::PriceCreateParams::BulkBpsConfig,
        bulk_config: Orb::Models::PriceCreateParams::BulkConfig,
        threshold_total_amount_config: ::Hash[Symbol, top],
        tiered_package_config: ::Hash[Symbol, top],
        grouped_tiered_config: ::Hash[Symbol, top],
        max_group_tiered_package_config: ::Hash[Symbol, top],
        tiered_with_minimum_config: ::Hash[Symbol, top],
        package_with_allocation_config: ::Hash[Symbol, top],
        tiered_package_with_minimum_config: ::Hash[Symbol, top],
        unit_with_percent_config: ::Hash[Symbol, top],
        tiered_with_proration_config: ::Hash[Symbol, top],
        unit_with_proration_config: ::Hash[Symbol, top],
        grouped_allocation_config: ::Hash[Symbol, top],
        grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
        grouped_with_metered_minimum_config: ::Hash[Symbol, top],
        matrix_with_display_name_config: ::Hash[Symbol, top],
        bulk_with_proration_config: ::Hash[Symbol, top],
        grouped_tiered_package_config: ::Hash[Symbol, top],
        scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
        scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
        cumulative_grouped_bulk_config: ::Hash[Symbol, top]
      }
      & Orb::request_parameters

    class PriceCreateParams < Orb::BaseModel
      extend Orb::RequestParameters::Converter
      include Orb::RequestParameters

      attr_accessor cadence: Orb::Models::PriceCreateParams::cadence

      attr_accessor currency: String

      attr_accessor item_id: String

      attr_accessor model_type: Orb::Models::PriceCreateParams::model_type

      attr_accessor name: String

      attr_accessor unit_config: Orb::Models::PriceCreateParams::UnitConfig

      attr_accessor billable_metric_id: String?

      attr_accessor billed_in_advance: bool?

      attr_accessor billing_cycle_configuration: Orb::Models::PriceCreateParams::BillingCycleConfiguration?

      attr_accessor conversion_rate: Float?

      attr_accessor external_price_id: String?

      attr_accessor fixed_price_quantity: Float?

      attr_accessor invoice_grouping_key: String?

      attr_accessor invoicing_cycle_configuration: Orb::Models::PriceCreateParams::InvoicingCycleConfiguration?

      attr_accessor metadata: ::Hash[Symbol, String?]?

      attr_accessor package_config: Orb::Models::PriceCreateParams::PackageConfig

      attr_accessor matrix_config: Orb::Models::PriceCreateParams::MatrixConfig

      attr_accessor matrix_with_allocation_config: Orb::Models::PriceCreateParams::MatrixWithAllocationConfig

      attr_accessor tiered_config: Orb::Models::PriceCreateParams::TieredConfig

      attr_accessor tiered_bps_config: Orb::Models::PriceCreateParams::TieredBpsConfig

      attr_accessor bps_config: Orb::Models::PriceCreateParams::BpsConfig

      attr_accessor bulk_bps_config: Orb::Models::PriceCreateParams::BulkBpsConfig

      attr_accessor bulk_config: Orb::Models::PriceCreateParams::BulkConfig

      attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

      attr_accessor tiered_package_config: ::Hash[Symbol, top]

      attr_accessor grouped_tiered_config: ::Hash[Symbol, top]

      attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

      attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

      attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

      attr_accessor tiered_package_with_minimum_config: ::Hash[Symbol, top]

      attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

      attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

      attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

      attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

      attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

      attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

      attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

      attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

      attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

      attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

      attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

      attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

      def initialize: (
        cadence: Orb::Models::PriceCreateParams::cadence,
        currency: String,
        item_id: String,
        model_type: Orb::Models::PriceCreateParams::model_type,
        name: String,
        unit_config: Orb::Models::PriceCreateParams::UnitConfig,
        package_config: Orb::Models::PriceCreateParams::PackageConfig,
        matrix_config: Orb::Models::PriceCreateParams::MatrixConfig,
        matrix_with_allocation_config: Orb::Models::PriceCreateParams::MatrixWithAllocationConfig,
        tiered_config: Orb::Models::PriceCreateParams::TieredConfig,
        tiered_bps_config: Orb::Models::PriceCreateParams::TieredBpsConfig,
        bps_config: Orb::Models::PriceCreateParams::BpsConfig,
        bulk_bps_config: Orb::Models::PriceCreateParams::BulkBpsConfig,
        bulk_config: Orb::Models::PriceCreateParams::BulkConfig,
        threshold_total_amount_config: ::Hash[Symbol, top],
        tiered_package_config: ::Hash[Symbol, top],
        grouped_tiered_config: ::Hash[Symbol, top],
        max_group_tiered_package_config: ::Hash[Symbol, top],
        tiered_with_minimum_config: ::Hash[Symbol, top],
        package_with_allocation_config: ::Hash[Symbol, top],
        tiered_package_with_minimum_config: ::Hash[Symbol, top],
        unit_with_percent_config: ::Hash[Symbol, top],
        tiered_with_proration_config: ::Hash[Symbol, top],
        unit_with_proration_config: ::Hash[Symbol, top],
        grouped_allocation_config: ::Hash[Symbol, top],
        grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
        grouped_with_metered_minimum_config: ::Hash[Symbol, top],
        matrix_with_display_name_config: ::Hash[Symbol, top],
        bulk_with_proration_config: ::Hash[Symbol, top],
        grouped_tiered_package_config: ::Hash[Symbol, top],
        scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
        scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
        cumulative_grouped_bulk_config: ::Hash[Symbol, top],
        ?billable_metric_id: String?,
        ?billed_in_advance: bool?,
        ?billing_cycle_configuration: Orb::Models::PriceCreateParams::BillingCycleConfiguration?,
        ?conversion_rate: Float?,
        ?external_price_id: String?,
        ?fixed_price_quantity: Float?,
        ?invoice_grouping_key: String?,
        ?invoicing_cycle_configuration: Orb::Models::PriceCreateParams::InvoicingCycleConfiguration?,
        ?metadata: ::Hash[Symbol, String?]?,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> Orb::Models::price_create_params

      type cadence =
        :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

      class Cadence < Orb::Enum
        ANNUAL: :annual
        SEMI_ANNUAL: :semi_annual
        MONTHLY: :monthly
        QUARTERLY: :quarterly
        ONE_TIME: :one_time
        CUSTOM: :custom

        def self.values: -> ::Array[Orb::Models::PriceCreateParams::cadence]
      end

      type model_type = :cumulative_grouped_bulk

      class ModelType < Orb::Enum
        CUMULATIVE_GROUPED_BULK: :cumulative_grouped_bulk

        def self.values: -> ::Array[Orb::Models::PriceCreateParams::model_type]
      end

      type unit_config = { unit_amount: String }

      class UnitConfig < Orb::BaseModel
        attr_accessor unit_amount: String

        def initialize: (unit_amount: String) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::unit_config
      end

      type billing_cycle_configuration =
        {
          duration: Integer,
          duration_unit: Orb::Models::PriceCreateParams::BillingCycleConfiguration::duration_unit
        }

      class BillingCycleConfiguration < Orb::BaseModel
        attr_accessor duration: Integer

        attr_accessor duration_unit: Orb::Models::PriceCreateParams::BillingCycleConfiguration::duration_unit

        def initialize: (
          duration: Integer,
          duration_unit: Orb::Models::PriceCreateParams::BillingCycleConfiguration::duration_unit
        ) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::billing_cycle_configuration

        type duration_unit = :day | :month

        class DurationUnit < Orb::Enum
          DAY: :day
          MONTH: :month

          def self.values: -> ::Array[Orb::Models::PriceCreateParams::BillingCycleConfiguration::duration_unit]
        end
      end

      type invoicing_cycle_configuration =
        {
          duration: Integer,
          duration_unit: Orb::Models::PriceCreateParams::InvoicingCycleConfiguration::duration_unit
        }

      class InvoicingCycleConfiguration < Orb::BaseModel
        attr_accessor duration: Integer

        attr_accessor duration_unit: Orb::Models::PriceCreateParams::InvoicingCycleConfiguration::duration_unit

        def initialize: (
          duration: Integer,
          duration_unit: Orb::Models::PriceCreateParams::InvoicingCycleConfiguration::duration_unit
        ) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::invoicing_cycle_configuration

        type duration_unit = :day | :month

        class DurationUnit < Orb::Enum
          DAY: :day
          MONTH: :month

          def self.values: -> ::Array[Orb::Models::PriceCreateParams::InvoicingCycleConfiguration::duration_unit]
        end
      end

      type package_config = { package_amount: String, package_size: Integer }

      class PackageConfig < Orb::BaseModel
        attr_accessor package_amount: String

        attr_accessor package_size: Integer

        def initialize: (package_amount: String, package_size: Integer) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::package_config
      end

      type matrix_config =
        {
          default_unit_amount: String,
          dimensions: ::Array[String?],
          matrix_values: ::Array[Orb::Models::PriceCreateParams::MatrixConfig::MatrixValue]
        }

      class MatrixConfig < Orb::BaseModel
        attr_accessor default_unit_amount: String

        attr_accessor dimensions: ::Array[String?]

        attr_accessor matrix_values: ::Array[Orb::Models::PriceCreateParams::MatrixConfig::MatrixValue]

        def initialize: (
          default_unit_amount: String,
          dimensions: ::Array[String?],
          matrix_values: ::Array[Orb::Models::PriceCreateParams::MatrixConfig::MatrixValue]
        ) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::matrix_config

        type matrix_value =
          { dimension_values: ::Array[String?], unit_amount: String }

        class MatrixValue < Orb::BaseModel
          attr_accessor dimension_values: ::Array[String?]

          attr_accessor unit_amount: String

          def initialize: (
            dimension_values: ::Array[String?],
            unit_amount: String
          ) -> void

          def to_hash: -> Orb::Models::PriceCreateParams::MatrixConfig::matrix_value
        end
      end

      type matrix_with_allocation_config =
        {
          allocation: Float,
          default_unit_amount: String,
          dimensions: ::Array[String?],
          matrix_values: ::Array[Orb::Models::PriceCreateParams::MatrixWithAllocationConfig::MatrixValue]
        }

      class MatrixWithAllocationConfig < Orb::BaseModel
        attr_accessor allocation: Float

        attr_accessor default_unit_amount: String

        attr_accessor dimensions: ::Array[String?]

        attr_accessor matrix_values: ::Array[Orb::Models::PriceCreateParams::MatrixWithAllocationConfig::MatrixValue]

        def initialize: (
          allocation: Float,
          default_unit_amount: String,
          dimensions: ::Array[String?],
          matrix_values: ::Array[Orb::Models::PriceCreateParams::MatrixWithAllocationConfig::MatrixValue]
        ) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::matrix_with_allocation_config

        type matrix_value =
          { dimension_values: ::Array[String?], unit_amount: String }

        class MatrixValue < Orb::BaseModel
          attr_accessor dimension_values: ::Array[String?]

          attr_accessor unit_amount: String

          def initialize: (
            dimension_values: ::Array[String?],
            unit_amount: String
          ) -> void

          def to_hash: -> Orb::Models::PriceCreateParams::MatrixWithAllocationConfig::matrix_value
        end
      end

      type tiered_config =
        { tiers: ::Array[Orb::Models::PriceCreateParams::TieredConfig::Tier] }

      class TieredConfig < Orb::BaseModel
        attr_accessor tiers: ::Array[Orb::Models::PriceCreateParams::TieredConfig::Tier]

        def initialize: (
          tiers: ::Array[Orb::Models::PriceCreateParams::TieredConfig::Tier]
        ) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::tiered_config

        type tier =
          { first_unit: Float, unit_amount: String, last_unit: Float? }

        class Tier < Orb::BaseModel
          attr_accessor first_unit: Float

          attr_accessor unit_amount: String

          attr_accessor last_unit: Float?

          def initialize: (
            first_unit: Float,
            unit_amount: String,
            ?last_unit: Float?
          ) -> void

          def to_hash: -> Orb::Models::PriceCreateParams::TieredConfig::tier
        end
      end

      type tiered_bps_config =
        {
          tiers: ::Array[Orb::Models::PriceCreateParams::TieredBpsConfig::Tier]
        }

      class TieredBpsConfig < Orb::BaseModel
        attr_accessor tiers: ::Array[Orb::Models::PriceCreateParams::TieredBpsConfig::Tier]

        def initialize: (
          tiers: ::Array[Orb::Models::PriceCreateParams::TieredBpsConfig::Tier]
        ) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::tiered_bps_config

        type tier =
          {
            bps: Float,
            minimum_amount: String,
            maximum_amount: String?,
            per_unit_maximum: String?
          }

        class Tier < Orb::BaseModel
          attr_accessor bps: Float

          attr_accessor minimum_amount: String

          attr_accessor maximum_amount: String?

          attr_accessor per_unit_maximum: String?

          def initialize: (
            bps: Float,
            minimum_amount: String,
            ?maximum_amount: String?,
            ?per_unit_maximum: String?
          ) -> void

          def to_hash: -> Orb::Models::PriceCreateParams::TieredBpsConfig::tier
        end
      end

      type bps_config = { bps: Float, per_unit_maximum: String? }

      class BpsConfig < Orb::BaseModel
        attr_accessor bps: Float

        attr_accessor per_unit_maximum: String?

        def initialize: (bps: Float, ?per_unit_maximum: String?) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::bps_config
      end

      type bulk_bps_config =
        { tiers: ::Array[Orb::Models::PriceCreateParams::BulkBpsConfig::Tier] }

      class BulkBpsConfig < Orb::BaseModel
        attr_accessor tiers: ::Array[Orb::Models::PriceCreateParams::BulkBpsConfig::Tier]

        def initialize: (
          tiers: ::Array[Orb::Models::PriceCreateParams::BulkBpsConfig::Tier]
        ) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::bulk_bps_config

        type tier =
          { bps: Float, maximum_amount: String?, per_unit_maximum: String? }

        class Tier < Orb::BaseModel
          attr_accessor bps: Float

          attr_accessor maximum_amount: String?

          attr_accessor per_unit_maximum: String?

          def initialize: (
            bps: Float,
            ?maximum_amount: String?,
            ?per_unit_maximum: String?
          ) -> void

          def to_hash: -> Orb::Models::PriceCreateParams::BulkBpsConfig::tier
        end
      end

      type bulk_config =
        { tiers: ::Array[Orb::Models::PriceCreateParams::BulkConfig::Tier] }

      class BulkConfig < Orb::BaseModel
        attr_accessor tiers: ::Array[Orb::Models::PriceCreateParams::BulkConfig::Tier]

        def initialize: (
          tiers: ::Array[Orb::Models::PriceCreateParams::BulkConfig::Tier]
        ) -> void

        def to_hash: -> Orb::Models::PriceCreateParams::bulk_config

        type tier = { unit_amount: String, maximum_units: Float? }

        class Tier < Orb::BaseModel
          attr_accessor unit_amount: String

          attr_accessor maximum_units: Float?

          def initialize: (unit_amount: String, ?maximum_units: Float?) -> void

          def to_hash: -> Orb::Models::PriceCreateParams::BulkConfig::tier
        end
      end
    end
  end
end
