module Orb
  module Models
    type add_subscription_price_params =
      {
        allocation_price: Orb::Models::AddSubscriptionPriceParams::AllocationPrice?,
        discounts: ::Array[Orb::Models::AddSubscriptionPriceParams::Discount]?,
        end_date: Time?,
        external_price_id: String?,
        maximum_amount: String?,
        minimum_amount: String?,
        plan_phase_order: Integer?,
        price: Orb::Models::AddSubscriptionPriceParams::price?,
        price_id: String?,
        start_date: Time?
      }

    class AddSubscriptionPriceParams < Orb::BaseModel
      attr_accessor allocation_price: Orb::Models::AddSubscriptionPriceParams::AllocationPrice?

      attr_accessor discounts: ::Array[Orb::Models::AddSubscriptionPriceParams::Discount]?

      attr_accessor end_date: Time?

      attr_accessor external_price_id: String?

      attr_accessor maximum_amount: String?

      attr_accessor minimum_amount: String?

      attr_accessor plan_phase_order: Integer?

      attr_accessor price: Orb::Models::AddSubscriptionPriceParams::price?

      attr_accessor price_id: String?

      attr_accessor start_date: Time?

      def initialize:
        (
          allocation_price: Orb::Models::AddSubscriptionPriceParams::AllocationPrice?,
          discounts: ::Array[Orb::Models::AddSubscriptionPriceParams::Discount]?,
          end_date: Time?,
          external_price_id: String?,
          maximum_amount: String?,
          minimum_amount: String?,
          plan_phase_order: Integer?,
          price: Orb::Models::AddSubscriptionPriceParams::price?,
          price_id: String?,
          start_date: Time?
        ) -> void
        | (
          ?Orb::Models::add_subscription_price_params | Orb::BaseModel data
        ) -> void

      def to_hash: -> Orb::Models::add_subscription_price_params

      type allocation_price =
        {
          amount: String,
          cadence: Orb::Models::AddSubscriptionPriceParams::AllocationPrice::cadence,
          currency: String,
          expires_at_end_of_cadence: bool
        }

      class AllocationPrice < Orb::BaseModel
        attr_accessor amount: String

        attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::AllocationPrice::cadence

        attr_accessor currency: String

        attr_accessor expires_at_end_of_cadence: bool

        def initialize:
          (
            amount: String,
            cadence: Orb::Models::AddSubscriptionPriceParams::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          ) -> void
          | (
            ?Orb::Models::AddSubscriptionPriceParams::allocation_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::AddSubscriptionPriceParams::allocation_price

        type cadence =
          :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

        class Cadence < Orb::Enum
          ONE_TIME: :one_time
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual
          CUSTOM: :custom

          def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::AllocationPrice::cadence]
        end
      end

      type discount =
        {
          discount_type: Orb::Models::AddSubscriptionPriceParams::Discount::discount_type,
          amount_discount: String?,
          percentage_discount: Float?,
          usage_discount: Float?
        }

      class Discount < Orb::BaseModel
        attr_accessor discount_type: Orb::Models::AddSubscriptionPriceParams::Discount::discount_type

        attr_accessor amount_discount: String?

        attr_accessor percentage_discount: Float?

        attr_accessor usage_discount: Float?

        def initialize:
          (
            discount_type: Orb::Models::AddSubscriptionPriceParams::Discount::discount_type,
            amount_discount: String?,
            percentage_discount: Float?,
            usage_discount: Float?
          ) -> void
          | (
            ?Orb::Models::AddSubscriptionPriceParams::discount
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::AddSubscriptionPriceParams::discount

        type discount_type = :percentage | :usage | :amount

        class DiscountType < Orb::Enum
          PERCENTAGE: :percentage
          USAGE: :usage
          AMOUNT: :amount

          def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Discount::discount_type]
        end
      end

      type price =
        Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice
        | Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice

      class Price < Orb::Union
        type new_subscription_unit_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::cadence,
            item_id: String,
            model_type: :unit,
            name: String,
            unit_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::UnitConfig,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionUnitPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit

          attr_accessor name: String

          attr_accessor unit_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::UnitConfig

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::cadence,
              item_id: String,
              name: String,
              unit_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::UnitConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :unit
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_unit_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_unit_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::cadence]
          end

          type unit_config = { unit_amount: String }

          class UnitConfig < Orb::BaseModel
            attr_accessor unit_amount: String

            def initialize:
              (unit_amount: String) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::unit_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::unit_config
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_package_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::cadence,
            item_id: String,
            model_type: :package,
            name: String,
            package_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::PackageConfig,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionPackagePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :package

          attr_accessor name: String

          attr_accessor package_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::PackageConfig

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::cadence,
              item_id: String,
              name: String,
              package_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::PackageConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :package
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_package_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_package_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::cadence]
          end

          type package_config =
            { package_amount: String, package_size: Integer }

          class PackageConfig < Orb::BaseModel
            attr_accessor package_amount: String

            attr_accessor package_size: Integer

            def initialize:
              (package_amount: String, package_size: Integer) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::package_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::package_config
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_matrix_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::cadence,
            item_id: String,
            matrix_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::MatrixConfig,
            model_type: :matrix,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionMatrixPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::cadence

          attr_accessor item_id: String

          attr_accessor matrix_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::MatrixConfig

          attr_accessor model_type: :matrix

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::cadence,
              item_id: String,
              matrix_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::MatrixConfig,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :matrix
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_matrix_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_matrix_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::cadence]
          end

          type matrix_config =
            {
              default_unit_amount: String,
              dimensions: ::Array[String?],
              matrix_values: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]
            }

          class MatrixConfig < Orb::BaseModel
            attr_accessor default_unit_amount: String

            attr_accessor dimensions: ::Array[String?]

            attr_accessor matrix_values: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]

            def initialize:
              (
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::matrix_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::matrix_config

            type matrix_value =
              { dimension_values: ::Array[String?], unit_amount: String }

            class MatrixValue < Orb::BaseModel
              attr_accessor dimension_values: ::Array[String?]

              attr_accessor unit_amount: String

              def initialize:
                (
                  dimension_values: ::Array[String?],
                  unit_amount: String
                ) -> void
                | (
                  ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::MatrixConfig::matrix_value
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::MatrixConfig::matrix_value
            end
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_tiered_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::cadence,
            item_id: String,
            model_type: :tiered,
            name: String,
            tiered_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::TieredConfig,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionTieredPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered

          attr_accessor name: String

          attr_accessor tiered_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::TieredConfig

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::cadence,
              item_id: String,
              name: String,
              tiered_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::TieredConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :tiered
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tiered_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tiered_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::cadence]
          end

          type tiered_config =
            {
              tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]
            }

          class TieredConfig < Orb::BaseModel
            attr_accessor tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]

            def initialize:
              (
                tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::tiered_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::tiered_config

            type tier =
              { first_unit: Float, unit_amount: String, last_unit: Float? }

            class Tier < Orb::BaseModel
              attr_accessor first_unit: Float

              attr_accessor unit_amount: String

              attr_accessor last_unit: Float?

              def initialize:
                (
                  first_unit: Float,
                  unit_amount: String,
                  last_unit: Float?
                ) -> void
                | (
                  ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::TieredConfig::tier
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::TieredConfig::tier
            end
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_tiered_bps_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::cadence,
            item_id: String,
            model_type: :tiered_bps,
            name: String,
            tiered_bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionTieredBpsPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_bps

          attr_accessor name: String

          attr_accessor tiered_bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::cadence,
              item_id: String,
              name: String,
              tiered_bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :tiered_bps
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tiered_bps_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tiered_bps_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::cadence]
          end

          type tiered_bps_config =
            {
              tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]
            }

          class TieredBpsConfig < Orb::BaseModel
            attr_accessor tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]

            def initialize:
              (
                tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::tiered_bps_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::tiered_bps_config

            type tier =
              {
                bps: Float,
                minimum_amount: String,
                maximum_amount: String?,
                per_unit_maximum: String?
              }

            class Tier < Orb::BaseModel
              attr_accessor bps: Float

              attr_accessor minimum_amount: String

              attr_accessor maximum_amount: String?

              attr_accessor per_unit_maximum: String?

              def initialize:
                (
                  bps: Float,
                  minimum_amount: String,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                ) -> void
                | (
                  ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::tier
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::tier
            end
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_bps_price =
          {
            bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BpsConfig,
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::cadence,
            item_id: String,
            model_type: :bps,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionBpsPrice < Orb::BaseModel
          attr_accessor bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BpsConfig

          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bps

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BpsConfig,
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::cadence,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :bps
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_bps_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_bps_price

          type bps_config = { bps: Float, per_unit_maximum: String? }

          class BpsConfig < Orb::BaseModel
            attr_accessor bps: Float

            attr_accessor per_unit_maximum: String?

            def initialize:
              (bps: Float, per_unit_maximum: String?) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::bps_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::bps_config
          end

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_bulk_bps_price =
          {
            bulk_bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig,
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::cadence,
            item_id: String,
            model_type: :bulk_bps,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionBulkBpsPrice < Orb::BaseModel
          attr_accessor bulk_bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig

          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk_bps

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              bulk_bps_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig,
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::cadence,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :bulk_bps
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_bulk_bps_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_bulk_bps_price

          type bulk_bps_config =
            {
              tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]
            }

          class BulkBpsConfig < Orb::BaseModel
            attr_accessor tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]

            def initialize:
              (
                tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::bulk_bps_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::bulk_bps_config

            type tier =
              { bps: Float, maximum_amount: String?, per_unit_maximum: String? }

            class Tier < Orb::BaseModel
              attr_accessor bps: Float

              attr_accessor maximum_amount: String?

              attr_accessor per_unit_maximum: String?

              def initialize:
                (
                  bps: Float,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                ) -> void
                | (
                  ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::tier
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::tier
            end
          end

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_bulk_price =
          {
            bulk_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BulkConfig,
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::cadence,
            item_id: String,
            model_type: :bulk,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionBulkPrice < Orb::BaseModel
          attr_accessor bulk_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BulkConfig

          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              bulk_config: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BulkConfig,
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::cadence,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :bulk
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_bulk_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_bulk_price

          type bulk_config =
            {
              tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]
            }

          class BulkConfig < Orb::BaseModel
            attr_accessor tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]

            def initialize:
              (
                tiers: ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::bulk_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::bulk_config

            type tier = { unit_amount: String, maximum_units: Float? }

            class Tier < Orb::BaseModel
              attr_accessor unit_amount: String

              attr_accessor maximum_units: Float?

              def initialize:
                (unit_amount: String, maximum_units: Float?) -> void
                | (
                  ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BulkConfig::tier
                  | Orb::BaseModel data
                ) -> void

              def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BulkConfig::tier
            end
          end

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_threshold_total_amount_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::cadence,
            item_id: String,
            model_type: :threshold_total_amount,
            name: String,
            threshold_total_amount_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionThresholdTotalAmountPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :threshold_total_amount

          attr_accessor name: String

          attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::cadence,
              item_id: String,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :threshold_total_amount
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_threshold_total_amount_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_threshold_total_amount_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_tiered_package_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::cadence,
            item_id: String,
            model_type: :tiered_package,
            name: String,
            tiered_package_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionTieredPackagePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_package

          attr_accessor name: String

          attr_accessor tiered_package_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::cadence,
              item_id: String,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :tiered_package
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tiered_package_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tiered_package_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_tiered_with_minimum_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::cadence,
            item_id: String,
            model_type: :tiered_with_minimum,
            name: String,
            tiered_with_minimum_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionTieredWithMinimumPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_with_minimum

          attr_accessor name: String

          attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::cadence,
              item_id: String,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :tiered_with_minimum
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tiered_with_minimum_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tiered_with_minimum_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_unit_with_percent_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::cadence,
            item_id: String,
            model_type: :unit_with_percent,
            name: String,
            unit_with_percent_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionUnitWithPercentPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit_with_percent

          attr_accessor name: String

          attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::cadence,
              item_id: String,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :unit_with_percent
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_unit_with_percent_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_unit_with_percent_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_package_with_allocation_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::cadence,
            item_id: String,
            model_type: :package_with_allocation,
            name: String,
            package_with_allocation_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionPackageWithAllocationPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :package_with_allocation

          attr_accessor name: String

          attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::cadence,
              item_id: String,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :package_with_allocation
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_package_with_allocation_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_package_with_allocation_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_tier_with_proration_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::cadence,
            item_id: String,
            model_type: :tiered_with_proration,
            name: String,
            tiered_with_proration_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionTierWithProrationPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :tiered_with_proration

          attr_accessor name: String

          attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::cadence,
              item_id: String,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :tiered_with_proration
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tier_with_proration_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_tier_with_proration_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_unit_with_proration_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::cadence,
            item_id: String,
            model_type: :unit_with_proration,
            name: String,
            unit_with_proration_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionUnitWithProrationPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :unit_with_proration

          attr_accessor name: String

          attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::cadence,
              item_id: String,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :unit_with_proration
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_unit_with_proration_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_unit_with_proration_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_grouped_allocation_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::cadence,
            grouped_allocation_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :grouped_allocation,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionGroupedAllocationPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::cadence

          attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_allocation

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :grouped_allocation
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_grouped_allocation_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_grouped_allocation_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_grouped_with_prorated_minimum_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence,
            grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :grouped_with_prorated_minimum,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionGroupedWithProratedMinimumPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence

          attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_with_prorated_minimum

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :grouped_with_prorated_minimum
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_grouped_with_prorated_minimum_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_grouped_with_prorated_minimum_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_bulk_with_proration_price =
          {
            bulk_with_proration_config: ::Hash[Symbol, top],
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::cadence,
            item_id: String,
            model_type: :bulk_with_proration,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionBulkWithProrationPrice < Orb::BaseModel
          attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :bulk_with_proration

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::cadence,
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :bulk_with_proration
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_bulk_with_proration_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_bulk_with_proration_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_scalable_matrix_with_unit_pricing_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence,
            item_id: String,
            model_type: :scalable_matrix_with_unit_pricing,
            name: String,
            scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionScalableMatrixWithUnitPricingPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :scalable_matrix_with_unit_pricing

          attr_accessor name: String

          attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :scalable_matrix_with_unit_pricing
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_scalable_matrix_with_unit_pricing_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_scalable_matrix_with_unit_pricing_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_scalable_matrix_with_tiered_pricing_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence,
            item_id: String,
            model_type: :scalable_matrix_with_tiered_pricing,
            name: String,
            scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionScalableMatrixWithTieredPricingPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence

          attr_accessor item_id: String

          attr_accessor model_type: :scalable_matrix_with_tiered_pricing

          attr_accessor name: String

          attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :scalable_matrix_with_tiered_pricing
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_scalable_matrix_with_tiered_pricing_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_scalable_matrix_with_tiered_pricing_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_cumulative_grouped_bulk_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence,
            cumulative_grouped_bulk_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :cumulative_grouped_bulk,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionCumulativeGroupedBulkPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence

          attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :cumulative_grouped_bulk

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :cumulative_grouped_bulk
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_cumulative_grouped_bulk_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_cumulative_grouped_bulk_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_max_group_tiered_package_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence,
            item_id: String,
            max_group_tiered_package_config: ::Hash[Symbol, top],
            model_type: :max_group_tiered_package,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionMaxGroupTieredPackagePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence

          attr_accessor item_id: String

          attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

          attr_accessor model_type: :max_group_tiered_package

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :max_group_tiered_package
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_max_group_tiered_package_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_max_group_tiered_package_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_grouped_with_metered_minimum_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence,
            grouped_with_metered_minimum_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :grouped_with_metered_minimum,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionGroupedWithMeteredMinimumPrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence

          attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_with_metered_minimum

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :grouped_with_metered_minimum
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_grouped_with_metered_minimum_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_grouped_with_metered_minimum_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_matrix_with_display_name_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence,
            item_id: String,
            matrix_with_display_name_config: ::Hash[Symbol, top],
            model_type: :matrix_with_display_name,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionMatrixWithDisplayNamePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence

          attr_accessor item_id: String

          attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

          attr_accessor model_type: :matrix_with_display_name

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :matrix_with_display_name
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_matrix_with_display_name_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_matrix_with_display_name_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        type new_subscription_grouped_tiered_package_price =
          {
            cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::cadence,
            grouped_tiered_package_config: ::Hash[Symbol, top],
            item_id: String,
            model_type: :grouped_tiered_package,
            name: String,
            billable_metric_id: String?,
            billed_in_advance: bool?,
            billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?,
            conversion_rate: Float?,
            currency: String?,
            external_price_id: String?,
            fixed_price_quantity: Float?,
            invoice_grouping_key: String?,
            invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?,
            metadata: ::Hash[Symbol, String?]?,
            reference_id: String?
          }

        class NewSubscriptionGroupedTieredPackagePrice < Orb::BaseModel
          attr_accessor cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::cadence

          attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

          attr_accessor item_id: String

          attr_accessor model_type: :grouped_tiered_package

          attr_accessor name: String

          attr_accessor billable_metric_id: String?

          attr_accessor billed_in_advance: bool?

          attr_accessor billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?

          attr_accessor conversion_rate: Float?

          attr_accessor currency: String?

          attr_accessor external_price_id: String?

          attr_accessor fixed_price_quantity: Float?

          attr_accessor invoice_grouping_key: String?

          attr_accessor invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?

          attr_accessor metadata: ::Hash[Symbol, String?]?

          attr_accessor reference_id: String?

          def initialize:
            (
              cadence: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?,
              model_type: :grouped_tiered_package
            ) -> void
            | (
              ?Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_grouped_tiered_package_price
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::new_subscription_grouped_tiered_package_price

          type cadence =
            :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

          class Cadence < Orb::Enum
            ANNUAL: :annual
            SEMI_ANNUAL: :semi_annual
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            ONE_TIME: :one_time
            CUSTOM: :custom

            def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::cadence]
          end

          type billing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit
            }

          class BillingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::billing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::billing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit]
            end
          end

          type invoicing_cycle_configuration =
            {
              duration: Integer,
              duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
            }

          class InvoicingCycleConfiguration < Orb::BaseModel
            attr_accessor duration: Integer

            attr_accessor duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

            def initialize:
              (
                duration: Integer,
                duration_unit: Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void
              | (
                ?Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::invoicing_cycle_configuration
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::invoicing_cycle_configuration

            type duration_unit = :day | :month

            class DurationUnit < Orb::Enum
              DAY: :day
              MONTH: :month

              def self.values: -> ::Array[Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
            end
          end
        end

        private def self.variants: -> [[:unit, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitPrice], [:package, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackagePrice], [:matrix, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixPrice], [:tiered, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPrice], [:tiered_bps, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredBpsPrice], [:bps, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBpsPrice], [:bulk_bps, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkBpsPrice], [:bulk, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkPrice], [:threshold_total_amount, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionThresholdTotalAmountPrice], [:tiered_package, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredPackagePrice], [:tiered_with_minimum, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTieredWithMinimumPrice], [:unit_with_percent, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithPercentPrice], [:package_with_allocation, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionPackageWithAllocationPrice], [:tiered_with_proration, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionTierWithProrationPrice], [:unit_with_proration, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionUnitWithProrationPrice], [:grouped_allocation, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedAllocationPrice], [:grouped_with_prorated_minimum, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithProratedMinimumPrice], [:bulk_with_proration, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionBulkWithProrationPrice], [:scalable_matrix_with_unit_pricing, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice], [:scalable_matrix_with_tiered_pricing, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice], [:cumulative_grouped_bulk, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionCumulativeGroupedBulkPrice], [:max_group_tiered_package, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMaxGroupTieredPackagePrice], [:grouped_with_metered_minimum, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedWithMeteredMinimumPrice], [:matrix_with_display_name, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionMatrixWithDisplayNamePrice], [:grouped_tiered_package, Orb::Models::AddSubscriptionPriceParams::Price::NewSubscriptionGroupedTieredPackagePrice]]
      end
    end
  end
end
