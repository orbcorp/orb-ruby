module Orb
  module Models
    type subscription_create_params =
      {
        add_adjustments: ::Array[Orb::Models::AddSubscriptionAdjustmentParams]?,
        add_prices: ::Array[Orb::Models::AddSubscriptionPriceParams]?,
        align_billing_with_subscription_start_date: bool,
        auto_collection: bool?,
        aws_region: String?,
        billing_cycle_anchor_configuration: Orb::Models::SubscriptionCreateParams::BillingCycleAnchorConfiguration?,
        coupon_redemption_code: String?,
        credits_overage_rate: Float?,
        customer_id: String?,
        default_invoice_memo: String?,
        end_date: Time?,
        external_customer_id: String?,
        external_marketplace: Orb::Models::SubscriptionCreateParams::external_marketplace?,
        external_marketplace_reporting_id: String?,
        external_plan_id: String?,
        filter: String?,
        initial_phase_order: Integer?,
        invoicing_threshold: String?,
        metadata: ::Hash[Symbol, String?]?,
        net_terms: Integer?,
        per_credit_overage_amount: Float?,
        plan_id: String?,
        plan_version_number: Integer?,
        price_overrides: ::Array[top]?,
        remove_adjustments: ::Array[Orb::Models::RemoveSubscriptionAdjustmentParams]?,
        remove_prices: ::Array[Orb::Models::RemoveSubscriptionPriceParams]?,
        replace_adjustments: ::Array[Orb::Models::ReplaceSubscriptionAdjustmentParams]?,
        replace_prices: ::Array[Orb::Models::ReplaceSubscriptionPriceParams]?,
        start_date: Time?,
        trial_duration_days: Integer?,
        usage_customer_ids: ::Array[String]?
      }
      & Orb::request_parameters

    class SubscriptionCreateParams < Orb::BaseModel
      extend Orb::RequestParameters::Converter
      include Orb::RequestParameters

      attr_accessor add_adjustments: ::Array[Orb::Models::AddSubscriptionAdjustmentParams]?

      attr_accessor add_prices: ::Array[Orb::Models::AddSubscriptionPriceParams]?

      attr_reader align_billing_with_subscription_start_date: bool?

      def align_billing_with_subscription_start_date=: (bool) -> bool

      attr_accessor auto_collection: bool?

      attr_accessor aws_region: String?

      attr_accessor billing_cycle_anchor_configuration: Orb::Models::SubscriptionCreateParams::BillingCycleAnchorConfiguration?

      attr_accessor coupon_redemption_code: String?

      attr_accessor credits_overage_rate: Float?

      attr_accessor customer_id: String?

      attr_accessor default_invoice_memo: String?

      attr_accessor end_date: Time?

      attr_accessor external_customer_id: String?

      attr_accessor external_marketplace: Orb::Models::SubscriptionCreateParams::external_marketplace?

      attr_accessor external_marketplace_reporting_id: String?

      attr_accessor external_plan_id: String?

      attr_accessor filter: String?

      attr_accessor initial_phase_order: Integer?

      attr_accessor invoicing_threshold: String?

      attr_accessor metadata: ::Hash[Symbol, String?]?

      attr_accessor net_terms: Integer?

      attr_accessor per_credit_overage_amount: Float?

      attr_accessor plan_id: String?

      attr_accessor plan_version_number: Integer?

      attr_accessor price_overrides: ::Array[top]?

      attr_accessor remove_adjustments: ::Array[Orb::Models::RemoveSubscriptionAdjustmentParams]?

      attr_accessor remove_prices: ::Array[Orb::Models::RemoveSubscriptionPriceParams]?

      attr_accessor replace_adjustments: ::Array[Orb::Models::ReplaceSubscriptionAdjustmentParams]?

      attr_accessor replace_prices: ::Array[Orb::Models::ReplaceSubscriptionPriceParams]?

      attr_accessor start_date: Time?

      attr_accessor trial_duration_days: Integer?

      attr_accessor usage_customer_ids: ::Array[String]?

      def initialize:
        (
          add_adjustments: ::Array[Orb::Models::AddSubscriptionAdjustmentParams]?,
          add_prices: ::Array[Orb::Models::AddSubscriptionPriceParams]?,
          align_billing_with_subscription_start_date: bool,
          auto_collection: bool?,
          aws_region: String?,
          billing_cycle_anchor_configuration: Orb::Models::SubscriptionCreateParams::BillingCycleAnchorConfiguration?,
          coupon_redemption_code: String?,
          credits_overage_rate: Float?,
          customer_id: String?,
          default_invoice_memo: String?,
          end_date: Time?,
          external_customer_id: String?,
          external_marketplace: Orb::Models::SubscriptionCreateParams::external_marketplace?,
          external_marketplace_reporting_id: String?,
          external_plan_id: String?,
          filter: String?,
          initial_phase_order: Integer?,
          invoicing_threshold: String?,
          metadata: ::Hash[Symbol, String?]?,
          net_terms: Integer?,
          per_credit_overage_amount: Float?,
          plan_id: String?,
          plan_version_number: Integer?,
          price_overrides: ::Array[top]?,
          remove_adjustments: ::Array[Orb::Models::RemoveSubscriptionAdjustmentParams]?,
          remove_prices: ::Array[Orb::Models::RemoveSubscriptionPriceParams]?,
          replace_adjustments: ::Array[Orb::Models::ReplaceSubscriptionAdjustmentParams]?,
          replace_prices: ::Array[Orb::Models::ReplaceSubscriptionPriceParams]?,
          start_date: Time?,
          trial_duration_days: Integer?,
          usage_customer_ids: ::Array[String]?,
          request_options: Orb::request_opts
        ) -> void
        | (
          ?Orb::Models::subscription_create_params | Orb::BaseModel data
        ) -> void

      def to_hash: -> Orb::Models::subscription_create_params

      type billing_cycle_anchor_configuration =
        { day: Integer, month: Integer?, year: Integer? }

      class BillingCycleAnchorConfiguration < Orb::BaseModel
        attr_accessor day: Integer

        attr_accessor month: Integer?

        attr_accessor year: Integer?

        def initialize:
          (day: Integer, month: Integer?, year: Integer?) -> void
          | (
            ?Orb::Models::SubscriptionCreateParams::billing_cycle_anchor_configuration
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::SubscriptionCreateParams::billing_cycle_anchor_configuration
      end

      type external_marketplace = :google | :aws | :azure

      class ExternalMarketplace < Orb::Enum
        GOOGLE: :google
        AWS: :aws
        AZURE: :azure

        def self.values: -> ::Array[Orb::Models::SubscriptionCreateParams::external_marketplace]
      end
    end
  end
end
