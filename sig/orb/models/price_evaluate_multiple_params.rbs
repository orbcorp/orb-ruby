module Orb
  module Models
    type price_evaluate_multiple_params =
      {
        timeframe_end: Time,
        timeframe_start: Time,
        customer_id: String?,
        events: ::Array[Orb::PriceEvaluateMultipleParams::Event]?,
        external_customer_id: String?,
        price_evaluations: ::Array[Orb::PriceEvaluateMultipleParams::PriceEvaluation]
      }
      & Orb::Internal::Type::request_parameters

    class PriceEvaluateMultipleParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor timeframe_end: Time

      attr_accessor timeframe_start: Time

      attr_accessor customer_id: String?

      attr_accessor events: ::Array[Orb::PriceEvaluateMultipleParams::Event]?

      attr_accessor external_customer_id: String?

      attr_reader price_evaluations: ::Array[Orb::PriceEvaluateMultipleParams::PriceEvaluation]?

      def price_evaluations=: (
        ::Array[Orb::PriceEvaluateMultipleParams::PriceEvaluation]
      ) -> ::Array[Orb::PriceEvaluateMultipleParams::PriceEvaluation]

      def initialize: (
        timeframe_end: Time,
        timeframe_start: Time,
        ?customer_id: String?,
        ?events: ::Array[Orb::PriceEvaluateMultipleParams::Event]?,
        ?external_customer_id: String?,
        ?price_evaluations: ::Array[Orb::PriceEvaluateMultipleParams::PriceEvaluation],
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> {
        timeframe_end: Time,
        timeframe_start: Time,
        customer_id: String?,
        events: ::Array[Orb::PriceEvaluateMultipleParams::Event]?,
        external_customer_id: String?,
        price_evaluations: ::Array[Orb::PriceEvaluateMultipleParams::PriceEvaluation],
        request_options: Orb::RequestOptions
      }

      type event =
        {
          event_name: String,
          properties: ::Hash[Symbol, top],
          timestamp: Time,
          customer_id: String?,
          external_customer_id: String?
        }

      class Event < Orb::Internal::Type::BaseModel
        attr_accessor event_name: String

        attr_accessor properties: ::Hash[Symbol, top]

        attr_accessor timestamp: Time

        attr_accessor customer_id: String?

        attr_accessor external_customer_id: String?

        def initialize: (
          event_name: String,
          properties: ::Hash[Symbol, top],
          timestamp: Time,
          ?customer_id: String?,
          ?external_customer_id: String?
        ) -> void

        def to_hash: -> {
          event_name: String,
          properties: ::Hash[Symbol, top],
          timestamp: Time,
          customer_id: String?,
          external_customer_id: String?
        }
      end

      type price_evaluation =
        {
          filter: String?,
          grouping_keys: ::Array[String],
          price: Orb::Models::PriceEvaluateMultipleParams::PriceEvaluation::price?,
          price_id: String?
        }

      class PriceEvaluation < Orb::Internal::Type::BaseModel
        attr_accessor filter: String?

        attr_reader grouping_keys: ::Array[String]?

        def grouping_keys=: (::Array[String]) -> ::Array[String]

        attr_accessor price: Orb::Models::PriceEvaluateMultipleParams::PriceEvaluation::price?

        attr_accessor price_id: String?

        def initialize: (
          ?filter: String?,
          ?grouping_keys: ::Array[String],
          ?price: Orb::Models::PriceEvaluateMultipleParams::PriceEvaluation::price?,
          ?price_id: String?
        ) -> void

        def to_hash: -> {
          filter: String?,
          grouping_keys: ::Array[String],
          price: Orb::Models::PriceEvaluateMultipleParams::PriceEvaluation::price?,
          price_id: String?
        }

        type price =
          Orb::NewFloatingUnitPrice
          | Orb::NewFloatingPackagePrice
          | Orb::NewFloatingMatrixPrice
          | Orb::NewFloatingMatrixWithAllocationPrice
          | Orb::NewFloatingTieredPrice
          | Orb::NewFloatingTieredBPSPrice
          | Orb::NewFloatingBPSPrice
          | Orb::NewFloatingBulkBPSPrice
          | Orb::NewFloatingBulkPrice
          | Orb::NewFloatingThresholdTotalAmountPrice
          | Orb::NewFloatingTieredPackagePrice
          | Orb::NewFloatingGroupedTieredPrice
          | Orb::NewFloatingMaxGroupTieredPackagePrice
          | Orb::NewFloatingTieredWithMinimumPrice
          | Orb::NewFloatingPackageWithAllocationPrice
          | Orb::NewFloatingTieredPackageWithMinimumPrice
          | Orb::NewFloatingUnitWithPercentPrice
          | Orb::NewFloatingTieredWithProrationPrice
          | Orb::NewFloatingUnitWithProrationPrice
          | Orb::NewFloatingGroupedAllocationPrice
          | Orb::NewFloatingGroupedWithProratedMinimumPrice
          | Orb::NewFloatingGroupedWithMeteredMinimumPrice
          | Orb::NewFloatingMatrixWithDisplayNamePrice
          | Orb::NewFloatingBulkWithProrationPrice
          | Orb::NewFloatingGroupedTieredPackagePrice
          | Orb::NewFloatingScalableMatrixWithUnitPricingPrice
          | Orb::NewFloatingScalableMatrixWithTieredPricingPrice
          | Orb::NewFloatingCumulativeGroupedBulkPrice

        module Price
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::PriceEvaluateMultipleParams::PriceEvaluation::price]
        end
      end
    end
  end
end
