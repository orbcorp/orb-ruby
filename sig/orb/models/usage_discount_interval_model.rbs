module Orb
  module Models
    type usage_discount_interval_model =
      {
        applies_to_price_ids: ::Array[String],
        applies_to_price_interval_ids: ::Array[String],
        discount_type: Orb::Models::UsageDiscountIntervalModel::discount_type,
        end_date: Time?,
        start_date: Time,
        usage_discount: Float
      }

    class UsageDiscountIntervalModel < Orb::BaseModel
      attr_accessor applies_to_price_ids: ::Array[String]

      attr_accessor applies_to_price_interval_ids: ::Array[String]

      attr_accessor discount_type: Orb::Models::UsageDiscountIntervalModel::discount_type

      attr_accessor end_date: Time?

      attr_accessor start_date: Time

      attr_accessor usage_discount: Float

      def initialize:
        (
          applies_to_price_ids: ::Array[String],
          applies_to_price_interval_ids: ::Array[String],
          discount_type: Orb::Models::UsageDiscountIntervalModel::discount_type,
          end_date: Time?,
          start_date: Time,
          usage_discount: Float
        ) -> void
        | (
          ?Orb::Models::usage_discount_interval_model | Orb::BaseModel data
        ) -> void

      def to_hash: -> Orb::Models::usage_discount_interval_model

      type discount_type = :usage

      class DiscountType < Orb::Enum
        USAGE: :usage

        def self.values: -> ::Array[Orb::Models::UsageDiscountIntervalModel::discount_type]
      end
    end
  end
end
