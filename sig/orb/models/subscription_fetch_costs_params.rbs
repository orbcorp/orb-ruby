module Orb
  module Models
    type subscription_fetch_costs_params =
      {
        currency: String?,
        timeframe_end: Time?,
        timeframe_start: Time?,
        view_mode: Orb::Models::SubscriptionFetchCostsParams::view_mode?
      }
      & Orb::Internal::Type::request_parameters

    class SubscriptionFetchCostsParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor currency: String?

      attr_accessor timeframe_end: Time?

      attr_accessor timeframe_start: Time?

      attr_accessor view_mode: Orb::Models::SubscriptionFetchCostsParams::view_mode?

      def initialize: (
        ?currency: String?,
        ?timeframe_end: Time?,
        ?timeframe_start: Time?,
        ?view_mode: Orb::Models::SubscriptionFetchCostsParams::view_mode?,
        ?request_options: Orb::request_opts
      ) -> void

      type view_mode = :periodic | :cumulative

      module ViewMode
        extend Orb::Internal::Type::Enum

        PERIODIC: :periodic
        CUMULATIVE: :cumulative

        def self?.values: -> ::Array[Orb::Models::SubscriptionFetchCostsParams::view_mode]
      end
    end
  end
end
