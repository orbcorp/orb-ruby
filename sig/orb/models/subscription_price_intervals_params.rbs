module Orb
  module Models
    type subscription_price_intervals_params =
      {
        add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add],
        add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment],
        allow_invoice_credit_or_void: bool?,
        edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit],
        edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment]
      }
      & Orb::Internal::Type::request_parameters

    class SubscriptionPriceIntervalsParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_reader add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add]?

      def add=: (
        ::Array[Orb::SubscriptionPriceIntervalsParams::Add]
      ) -> ::Array[Orb::SubscriptionPriceIntervalsParams::Add]

      attr_reader add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment]?

      def add_adjustments=: (
        ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment]
      ) -> ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment]

      attr_accessor allow_invoice_credit_or_void: bool?

      attr_reader edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit]?

      def edit=: (
        ::Array[Orb::SubscriptionPriceIntervalsParams::Edit]
      ) -> ::Array[Orb::SubscriptionPriceIntervalsParams::Edit]

      attr_reader edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment]?

      def edit_adjustments=: (
        ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment]
      ) -> ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment]

      def initialize: (
        ?add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add],
        ?add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment],
        ?allow_invoice_credit_or_void: bool?,
        ?edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit],
        ?edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment],
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> {
        add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add],
        add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment],
        allow_invoice_credit_or_void: bool?,
        edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit],
        edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment],
        request_options: Orb::RequestOptions
      }

      type add =
        {
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date,
          allocation_price: Orb::SubscriptionPriceIntervalsParams::Add::AllocationPrice?,
          discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?,
          external_price_id: String?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::FixedFeeQuantityTransition]?,
          maximum_amount: Float?,
          minimum_amount: Float?,
          price: Orb::Models::SubscriptionPriceIntervalsParams::Add::price?,
          price_id: String?,
          usage_customer_ids: ::Array[String]?
        }

      class Add < Orb::Internal::Type::BaseModel
        attr_accessor start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date

        attr_accessor allocation_price: Orb::SubscriptionPriceIntervalsParams::Add::AllocationPrice?

        attr_accessor discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?

        attr_accessor external_price_id: String?

        attr_accessor filter: String?

        attr_accessor fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::FixedFeeQuantityTransition]?

        attr_accessor maximum_amount: Float?

        attr_accessor minimum_amount: Float?

        attr_accessor price: Orb::Models::SubscriptionPriceIntervalsParams::Add::price?

        attr_accessor price_id: String?

        attr_accessor usage_customer_ids: ::Array[String]?

        def initialize: (
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date,
          ?allocation_price: Orb::SubscriptionPriceIntervalsParams::Add::AllocationPrice?,
          ?discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?,
          ?end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?,
          ?external_price_id: String?,
          ?filter: String?,
          ?fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::FixedFeeQuantityTransition]?,
          ?maximum_amount: Float?,
          ?minimum_amount: Float?,
          ?price: Orb::Models::SubscriptionPriceIntervalsParams::Add::price?,
          ?price_id: String?,
          ?usage_customer_ids: ::Array[String]?
        ) -> void

        def to_hash: -> {
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date,
          allocation_price: Orb::SubscriptionPriceIntervalsParams::Add::AllocationPrice?,
          discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?,
          external_price_id: String?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::FixedFeeQuantityTransition]?,
          maximum_amount: Float?,
          minimum_amount: Float?,
          price: Orb::Models::SubscriptionPriceIntervalsParams::Add::price?,
          price_id: String?,
          usage_customer_ids: ::Array[String]?
        }

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        module StartDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date]
        end

        type allocation_price =
          {
            amount: String,
            cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          }

        class AllocationPrice < Orb::Internal::Type::BaseModel
          attr_accessor amount: String

          attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::AllocationPrice::cadence

          attr_accessor currency: String

          attr_accessor expires_at_end_of_cadence: bool

          def initialize: (
            amount: String,
            cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          ) -> void

          def to_hash: -> {
            amount: String,
            cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          }

          type cadence =
            :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ONE_TIME: :one_time
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            SEMI_ANNUAL: :semi_annual
            ANNUAL: :annual
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::AllocationPrice::cadence]
          end
        end

        type discount =
          Orb::SubscriptionPriceIntervalsParams::Add::Discount::Amount
          | Orb::SubscriptionPriceIntervalsParams::Add::Discount::Percentage
          | Orb::SubscriptionPriceIntervalsParams::Add::Discount::Usage

        module Discount
          extend Orb::Internal::Type::Union

          type amount = { amount_discount: Float, discount_type: :amount }

          class Amount < Orb::Internal::Type::BaseModel
            attr_accessor amount_discount: Float

            attr_accessor discount_type: :amount

            def initialize: (
              amount_discount: Float,
              ?discount_type: :amount
            ) -> void

            def to_hash: -> { amount_discount: Float, discount_type: :amount }
          end

          type percentage =
            { discount_type: :percentage, percentage_discount: Float }

          class Percentage < Orb::Internal::Type::BaseModel
            attr_accessor discount_type: :percentage

            attr_accessor percentage_discount: Float

            def initialize: (
              percentage_discount: Float,
              ?discount_type: :percentage
            ) -> void

            def to_hash: -> {
              discount_type: :percentage,
              percentage_discount: Float
            }
          end

          type usage = { discount_type: :usage, usage_discount: Float }

          class Usage < Orb::Internal::Type::BaseModel
            attr_accessor discount_type: :usage

            attr_accessor usage_discount: Float

            def initialize: (
              usage_discount: Float,
              ?discount_type: :usage
            ) -> void

            def to_hash: -> { discount_type: :usage, usage_discount: Float }
          end

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]
        end

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        module EndDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date]
        end

        type fixed_fee_quantity_transition =
          { effective_date: Time, quantity: Integer }

        class FixedFeeQuantityTransition < Orb::Internal::Type::BaseModel
          attr_accessor effective_date: Time

          attr_accessor quantity: Integer

          def initialize: (effective_date: Time, quantity: Integer) -> void

          def to_hash: -> { effective_date: Time, quantity: Integer }
        end

        type price =
          Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::Package
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing
          | Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk

        module Price
          extend Orb::Internal::Type::Union

          type unit =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::cadence,
              currency: String,
              item_id: String,
              model_type: :unit,
              name: String,
              unit_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::UnitConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class Unit < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :unit

            attr_accessor name: String

            attr_accessor unit_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::UnitConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::cadence,
              currency: String,
              item_id: String,
              name: String,
              unit_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::UnitConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :unit
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::cadence,
              currency: String,
              item_id: String,
              model_type: :unit,
              name: String,
              unit_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::UnitConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::cadence]
            end

            type unit_config = { unit_amount: String }

            class UnitConfig < Orb::Internal::Type::BaseModel
              attr_accessor unit_amount: String

              def initialize: (unit_amount: String) -> void

              def to_hash: -> { unit_amount: String }
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Unit::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type package =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::cadence,
              currency: String,
              item_id: String,
              model_type: :package,
              name: String,
              package_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::PackageConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class Package < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :package

            attr_accessor name: String

            attr_accessor package_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::PackageConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::cadence,
              currency: String,
              item_id: String,
              name: String,
              package_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::PackageConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :package
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::cadence,
              currency: String,
              item_id: String,
              model_type: :package,
              name: String,
              package_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::PackageConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::cadence]
            end

            type package_config =
              { package_amount: String, package_size: Integer }

            class PackageConfig < Orb::Internal::Type::BaseModel
              attr_accessor package_amount: String

              attr_accessor package_size: Integer

              def initialize: (
                package_amount: String,
                package_size: Integer
              ) -> void

              def to_hash: -> { package_amount: String, package_size: Integer }
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Package::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type matrix =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::cadence,
              currency: String,
              item_id: String,
              matrix_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::MatrixConfig,
              model_type: :matrix,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class Matrix < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor matrix_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::MatrixConfig

            attr_accessor model_type: :matrix

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::cadence,
              currency: String,
              item_id: String,
              matrix_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::MatrixConfig,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :matrix
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::cadence,
              currency: String,
              item_id: String,
              matrix_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::MatrixConfig,
              model_type: :matrix,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::cadence]
            end

            type matrix_config =
              {
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::MatrixConfig::MatrixValue]
              }

            class MatrixConfig < Orb::Internal::Type::BaseModel
              attr_accessor default_unit_amount: String

              attr_accessor dimensions: ::Array[String?]

              attr_accessor matrix_values: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::MatrixConfig::MatrixValue]

              def initialize: (
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::MatrixConfig::MatrixValue]
              ) -> void

              def to_hash: -> {
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Matrix::MatrixConfig::MatrixValue]
              }

              type matrix_value =
                { dimension_values: ::Array[String?], unit_amount: String }

              class MatrixValue < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String?]

                attr_accessor unit_amount: String

                def initialize: (
                  dimension_values: ::Array[String?],
                  unit_amount: String
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String?],
                  unit_amount: String
                }
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Matrix::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type matrix_with_allocation =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::cadence,
              currency: String,
              item_id: String,
              matrix_with_allocation_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
              model_type: :matrix_with_allocation,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class MatrixWithAllocation < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor matrix_with_allocation_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::MatrixWithAllocationConfig

            attr_accessor model_type: :matrix_with_allocation

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::cadence,
              currency: String,
              item_id: String,
              matrix_with_allocation_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :matrix_with_allocation
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::cadence,
              currency: String,
              item_id: String,
              matrix_with_allocation_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
              model_type: :matrix_with_allocation,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::cadence]
            end

            type matrix_with_allocation_config =
              {
                allocation: Float,
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
              }

            class MatrixWithAllocationConfig < Orb::Internal::Type::BaseModel
              attr_accessor allocation: Float

              attr_accessor default_unit_amount: String

              attr_accessor dimensions: ::Array[String?]

              attr_accessor matrix_values: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]

              def initialize: (
                allocation: Float,
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
              ) -> void

              def to_hash: -> {
                allocation: Float,
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
              }

              type matrix_value =
                { dimension_values: ::Array[String?], unit_amount: String }

              class MatrixValue < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String?]

                attr_accessor unit_amount: String

                def initialize: (
                  dimension_values: ::Array[String?],
                  unit_amount: String
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String?],
                  unit_amount: String
                }
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered,
              name: String,
              tiered_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::TieredConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class Tiered < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :tiered

            attr_accessor name: String

            attr_accessor tiered_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::TieredConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::cadence,
              currency: String,
              item_id: String,
              name: String,
              tiered_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::TieredConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :tiered
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered,
              name: String,
              tiered_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::TieredConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::cadence]
            end

            type tiered_config =
              {
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::TieredConfig::Tier]
              }

            class TieredConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::TieredConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::TieredConfig::Tier]
              ) -> void

              def to_hash: -> {
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Tiered::TieredConfig::Tier]
              }

              type tier =
                { first_unit: Float, unit_amount: String, last_unit: Float? }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor first_unit: Float

                attr_accessor unit_amount: String

                attr_accessor last_unit: Float?

                def initialize: (
                  first_unit: Float,
                  unit_amount: String,
                  ?last_unit: Float?
                ) -> void

                def to_hash: -> {
                  first_unit: Float,
                  unit_amount: String,
                  last_unit: Float?
                }
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Tiered::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_bps =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_bps,
              name: String,
              tiered_bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::TieredBpsConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class TieredBps < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_bps

            attr_accessor name: String

            attr_accessor tiered_bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::TieredBpsConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::cadence,
              currency: String,
              item_id: String,
              name: String,
              tiered_bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::TieredBpsConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :tiered_bps
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_bps,
              name: String,
              tiered_bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::TieredBpsConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::cadence]
            end

            type tiered_bps_config =
              {
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::TieredBpsConfig::Tier]
              }

            class TieredBpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::TieredBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::TieredBpsConfig::Tier]
              ) -> void

              def to_hash: -> {
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::TieredBpsConfig::Tier]
              }

              type tier =
                {
                  bps: Float,
                  minimum_amount: String,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor bps: Float

                attr_accessor minimum_amount: String

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  minimum_amount: String,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> {
                  bps: Float,
                  minimum_amount: String,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredBps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bps =
            {
              bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::BpsConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::cadence,
              currency: String,
              item_id: String,
              model_type: :bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class Bps < Orb::Internal::Type::BaseModel
            attr_accessor bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::BpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::BpsConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::cadence,
              currency: String,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :bps
            ) -> void

            def to_hash: -> {
              bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::BpsConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::cadence,
              currency: String,
              item_id: String,
              model_type: :bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type bps_config = { bps: Float, per_unit_maximum: String? }

            class BpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor bps: Float

              attr_accessor per_unit_maximum: String?

              def initialize: (bps: Float, ?per_unit_maximum: String?) -> void

              def to_hash: -> { bps: Float, per_unit_maximum: String? }
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk_bps =
            {
              bulk_bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::cadence,
              currency: String,
              item_id: String,
              model_type: :bulk_bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class BulkBps < Orb::Internal::Type::BaseModel
            attr_accessor bulk_bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BulkBpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              bulk_bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::cadence,
              currency: String,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :bulk_bps
            ) -> void

            def to_hash: -> {
              bulk_bps_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::cadence,
              currency: String,
              item_id: String,
              model_type: :bulk_bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type bulk_bps_config =
              {
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BulkBpsConfig::Tier]
              }

            class BulkBpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BulkBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BulkBpsConfig::Tier]
              ) -> void

              def to_hash: -> {
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BulkBpsConfig::Tier]
              }

              type tier =
                {
                  bps: Float,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor bps: Float

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> {
                  bps: Float,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkBps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk =
            {
              bulk_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BulkConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::cadence,
              currency: String,
              item_id: String,
              model_type: :bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class Bulk < Orb::Internal::Type::BaseModel
            attr_accessor bulk_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BulkConfig

            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              bulk_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BulkConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::cadence,
              currency: String,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :bulk
            ) -> void

            def to_hash: -> {
              bulk_config: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BulkConfig,
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::cadence,
              currency: String,
              item_id: String,
              model_type: :bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type bulk_config =
              {
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BulkConfig::Tier]
              }

            class BulkConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BulkConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BulkConfig::Tier]
              ) -> void

              def to_hash: -> {
                tiers: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BulkConfig::Tier]
              }

              type tier = { unit_amount: String, maximum_units: Float? }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor unit_amount: String

                attr_accessor maximum_units: Float?

                def initialize: (
                  unit_amount: String,
                  ?maximum_units: Float?
                ) -> void

                def to_hash: -> { unit_amount: String, maximum_units: Float? }
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::Bulk::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type threshold_total_amount =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::cadence,
              currency: String,
              item_id: String,
              model_type: :threshold_total_amount,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :threshold_total_amount

            attr_accessor name: String

            attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::cadence,
              currency: String,
              item_id: String,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :threshold_total_amount
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::cadence,
              currency: String,
              item_id: String,
              model_type: :threshold_total_amount,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_package =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_package,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class TieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_package

            attr_accessor name: String

            attr_accessor tiered_package_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::cadence,
              currency: String,
              item_id: String,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :tiered_package
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_package,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_tiered =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::cadence,
              currency: String,
              grouped_tiered_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_tiered,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class GroupedTiered < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::cadence

            attr_accessor currency: String

            attr_accessor grouped_tiered_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_tiered

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::cadence,
              currency: String,
              grouped_tiered_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :grouped_tiered
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::cadence,
              currency: String,
              grouped_tiered_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_tiered,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type max_group_tiered_package =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::cadence,
              currency: String,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              model_type: :max_group_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor model_type: :max_group_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::cadence,
              currency: String,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :max_group_tiered_package
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::cadence,
              currency: String,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              model_type: :max_group_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_with_minimum =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_with_minimum,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class TieredWithMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_minimum

            attr_accessor name: String

            attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::cadence,
              currency: String,
              item_id: String,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :tiered_with_minimum
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_with_minimum,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type package_with_allocation =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::cadence,
              currency: String,
              item_id: String,
              model_type: :package_with_allocation,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class PackageWithAllocation < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :package_with_allocation

            attr_accessor name: String

            attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::cadence,
              currency: String,
              item_id: String,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :package_with_allocation
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::cadence,
              currency: String,
              item_id: String,
              model_type: :package_with_allocation,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_package_with_minimum =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_package_with_minimum,
              name: String,
              tiered_package_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class TieredPackageWithMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_package_with_minimum

            attr_accessor name: String

            attr_accessor tiered_package_with_minimum_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::cadence,
              currency: String,
              item_id: String,
              name: String,
              tiered_package_with_minimum_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :tiered_package_with_minimum
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_package_with_minimum,
              name: String,
              tiered_package_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type unit_with_percent =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::cadence,
              currency: String,
              item_id: String,
              model_type: :unit_with_percent,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class UnitWithPercent < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_percent

            attr_accessor name: String

            attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::cadence,
              currency: String,
              item_id: String,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :unit_with_percent
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::cadence,
              currency: String,
              item_id: String,
              model_type: :unit_with_percent,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_with_proration =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_with_proration,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class TieredWithProration < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_proration

            attr_accessor name: String

            attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::cadence,
              currency: String,
              item_id: String,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :tiered_with_proration
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::cadence,
              currency: String,
              item_id: String,
              model_type: :tiered_with_proration,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type unit_with_proration =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::cadence,
              currency: String,
              item_id: String,
              model_type: :unit_with_proration,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class UnitWithProration < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_proration

            attr_accessor name: String

            attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::cadence,
              currency: String,
              item_id: String,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :unit_with_proration
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::cadence,
              currency: String,
              item_id: String,
              model_type: :unit_with_proration,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_allocation =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::cadence,
              currency: String,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_allocation,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class GroupedAllocation < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::cadence

            attr_accessor currency: String

            attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_allocation

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::cadence,
              currency: String,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :grouped_allocation
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::cadence,
              currency: String,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_allocation,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_with_prorated_minimum =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::cadence,
              currency: String,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_prorated_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::cadence

            attr_accessor currency: String

            attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_prorated_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::cadence,
              currency: String,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :grouped_with_prorated_minimum
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::cadence,
              currency: String,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_prorated_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_with_metered_minimum =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::cadence,
              currency: String,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_metered_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::cadence

            attr_accessor currency: String

            attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_metered_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::cadence,
              currency: String,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :grouped_with_metered_minimum
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::cadence,
              currency: String,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_metered_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type matrix_with_display_name =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::cadence,
              currency: String,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              model_type: :matrix_with_display_name,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

            attr_accessor model_type: :matrix_with_display_name

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::cadence,
              currency: String,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :matrix_with_display_name
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::cadence,
              currency: String,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              model_type: :matrix_with_display_name,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk_with_proration =
            {
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::cadence,
              currency: String,
              item_id: String,
              model_type: :bulk_with_proration,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class BulkWithProration < Orb::Internal::Type::BaseModel
            attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_with_proration

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::cadence,
              currency: String,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :bulk_with_proration
            ) -> void

            def to_hash: -> {
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::cadence,
              currency: String,
              item_id: String,
              model_type: :bulk_with_proration,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_tiered_package =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::cadence,
              currency: String,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class GroupedTieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::cadence

            attr_accessor currency: String

            attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::cadence,
              currency: String,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :grouped_tiered_package
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::cadence,
              currency: String,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type scalable_matrix_with_unit_pricing =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::cadence,
              currency: String,
              item_id: String,
              model_type: :scalable_matrix_with_unit_pricing,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_unit_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::cadence,
              currency: String,
              item_id: String,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :scalable_matrix_with_unit_pricing
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::cadence,
              currency: String,
              item_id: String,
              model_type: :scalable_matrix_with_unit_pricing,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type scalable_matrix_with_tiered_pricing =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::cadence,
              currency: String,
              item_id: String,
              model_type: :scalable_matrix_with_tiered_pricing,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::cadence

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_tiered_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::cadence,
              currency: String,
              item_id: String,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :scalable_matrix_with_tiered_pricing
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::cadence,
              currency: String,
              item_id: String,
              model_type: :scalable_matrix_with_tiered_pricing,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type cumulative_grouped_bulk =
            {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              currency: String,
              item_id: String,
              model_type: :cumulative_grouped_bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

          class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::cadence

            attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

            attr_accessor currency: String

            attr_accessor item_id: String

            attr_accessor model_type: :cumulative_grouped_bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            def initialize: (
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              currency: String,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?model_type: :cumulative_grouped_bulk
            ) -> void

            def to_hash: -> {
              cadence: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              currency: String,
              item_id: String,
              model_type: :cumulative_grouped_bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
              conversion_rate: Float?,
              dimensional_price_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?
            }

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit]
              end
            end

            type dimensional_price_configuration =
              {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }

            class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor dimension_values: ::Array[String]

              attr_accessor dimensional_price_group_id: String?

              attr_accessor external_dimensional_price_group_id: String?

              def initialize: (
                dimension_values: ::Array[String],
                ?dimensional_price_group_id: String?,
                ?external_dimensional_price_group_id: String?
              ) -> void

              def to_hash: -> {
                dimension_values: ::Array[String],
                dimensional_price_group_id: String?,
                external_dimensional_price_group_id: String?
              }
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::price]
        end
      end

      type add_adjustment =
        {
          adjustment: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?
        }

      class AddAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment

        attr_accessor start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?

        def initialize: (
          adjustment: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date,
          ?end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?
        ) -> void

        def to_hash: -> {
          adjustment: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?
        }

        type adjustment =
          Orb::SubscriptionPriceIntervalsParams::AddAdjustment::Adjustment::PercentageDiscount
          | Orb::SubscriptionPriceIntervalsParams::AddAdjustment::Adjustment::UsageDiscount
          | Orb::SubscriptionPriceIntervalsParams::AddAdjustment::Adjustment::AmountDiscount
          | Orb::SubscriptionPriceIntervalsParams::AddAdjustment::Adjustment::Minimum
          | Orb::SubscriptionPriceIntervalsParams::AddAdjustment::Adjustment::Maximum

        module Adjustment
          extend Orb::Internal::Type::Union

          type percentage_discount =
            {
              adjustment_type: :percentage_discount,
              percentage_discount: Float,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }

          class PercentageDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :percentage_discount

            attr_accessor percentage_discount: Float

            attr_accessor applies_to_price_ids: ::Array[String]?

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              percentage_discount: Float,
              ?applies_to_price_ids: ::Array[String]?,
              ?is_invoice_level: bool,
              ?adjustment_type: :percentage_discount
            ) -> void

            def to_hash: -> {
              adjustment_type: :percentage_discount,
              percentage_discount: Float,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }
          end

          type usage_discount =
            {
              adjustment_type: :usage_discount,
              usage_discount: Float,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }

          class UsageDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :usage_discount

            attr_accessor usage_discount: Float

            attr_accessor applies_to_price_ids: ::Array[String]?

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              usage_discount: Float,
              ?applies_to_price_ids: ::Array[String]?,
              ?is_invoice_level: bool,
              ?adjustment_type: :usage_discount
            ) -> void

            def to_hash: -> {
              adjustment_type: :usage_discount,
              usage_discount: Float,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }
          end

          type amount_discount =
            {
              adjustment_type: :amount_discount,
              amount_discount: String,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }

          class AmountDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :amount_discount

            attr_accessor amount_discount: String

            attr_accessor applies_to_price_ids: ::Array[String]?

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              amount_discount: String,
              ?applies_to_price_ids: ::Array[String]?,
              ?is_invoice_level: bool,
              ?adjustment_type: :amount_discount
            ) -> void

            def to_hash: -> {
              adjustment_type: :amount_discount,
              amount_discount: String,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }
          end

          type minimum =
            {
              adjustment_type: :minimum,
              item_id: String,
              minimum_amount: String,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }

          class Minimum < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :minimum

            attr_accessor item_id: String

            attr_accessor minimum_amount: String

            attr_accessor applies_to_price_ids: ::Array[String]?

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              item_id: String,
              minimum_amount: String,
              ?applies_to_price_ids: ::Array[String]?,
              ?is_invoice_level: bool,
              ?adjustment_type: :minimum
            ) -> void

            def to_hash: -> {
              adjustment_type: :minimum,
              item_id: String,
              minimum_amount: String,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }
          end

          type maximum =
            {
              adjustment_type: :maximum,
              maximum_amount: String,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }

          class Maximum < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :maximum

            attr_accessor maximum_amount: String

            attr_accessor applies_to_price_ids: ::Array[String]?

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              maximum_amount: String,
              ?applies_to_price_ids: ::Array[String]?,
              ?is_invoice_level: bool,
              ?adjustment_type: :maximum
            ) -> void

            def to_hash: -> {
              adjustment_type: :maximum,
              maximum_amount: String,
              applies_to_price_ids: ::Array[String]?,
              is_invoice_level: bool
            }
          end

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment]
        end

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        module StartDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date]
        end

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        module EndDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date]
        end
      end

      type edit =
        {
          price_interval_id: String,
          billing_cycle_day: Integer?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit::FixedFeeQuantityTransition]?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date,
          usage_customer_ids: ::Array[String]?
        }

      class Edit < Orb::Internal::Type::BaseModel
        attr_accessor price_interval_id: String

        attr_accessor billing_cycle_day: Integer?

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?

        attr_accessor filter: String?

        attr_accessor fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit::FixedFeeQuantityTransition]?

        attr_reader start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date?

        def start_date=: (
          Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date
        ) -> Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date

        attr_accessor usage_customer_ids: ::Array[String]?

        def initialize: (
          price_interval_id: String,
          ?billing_cycle_day: Integer?,
          ?end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?,
          ?filter: String?,
          ?fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit::FixedFeeQuantityTransition]?,
          ?start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date,
          ?usage_customer_ids: ::Array[String]?
        ) -> void

        def to_hash: -> {
          price_interval_id: String,
          billing_cycle_day: Integer?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit::FixedFeeQuantityTransition]?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date,
          usage_customer_ids: ::Array[String]?
        }

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        module EndDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date]
        end

        type fixed_fee_quantity_transition =
          { effective_date: Time, quantity: Integer }

        class FixedFeeQuantityTransition < Orb::Internal::Type::BaseModel
          attr_accessor effective_date: Time

          attr_accessor quantity: Integer

          def initialize: (effective_date: Time, quantity: Integer) -> void

          def to_hash: -> { effective_date: Time, quantity: Integer }
        end

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        module StartDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date]
        end
      end

      type edit_adjustment =
        {
          adjustment_interval_id: String,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        }

      class EditAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment_interval_id: String

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?

        attr_reader start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date?

        def start_date=: (
          Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        ) -> Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date

        def initialize: (
          adjustment_interval_id: String,
          ?end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?,
          ?start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        ) -> void

        def to_hash: -> {
          adjustment_interval_id: String,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        }

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        module EndDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date]
        end

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        module StartDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date]
        end
      end
    end
  end
end
