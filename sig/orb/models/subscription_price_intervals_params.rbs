module Orb
  module Models
    type subscription_price_intervals_params =
      {
        add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add],
        add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment],
        allow_invoice_credit_or_void: bool?,
        edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit],
        edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment]
      }
      & Orb::Internal::Type::request_parameters

    class SubscriptionPriceIntervalsParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_reader add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add]?

      def add=: (
        ::Array[Orb::SubscriptionPriceIntervalsParams::Add]
      ) -> ::Array[Orb::SubscriptionPriceIntervalsParams::Add]

      attr_reader add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment]?

      def add_adjustments=: (
        ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment]
      ) -> ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment]

      attr_accessor allow_invoice_credit_or_void: bool?

      attr_reader edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit]?

      def edit=: (
        ::Array[Orb::SubscriptionPriceIntervalsParams::Edit]
      ) -> ::Array[Orb::SubscriptionPriceIntervalsParams::Edit]

      attr_reader edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment]?

      def edit_adjustments=: (
        ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment]
      ) -> ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment]

      def initialize: (
        ?add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add],
        ?add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment],
        ?allow_invoice_credit_or_void: bool?,
        ?edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit],
        ?edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment],
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> {
        add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add],
        add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment],
        allow_invoice_credit_or_void: bool?,
        edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit],
        edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment],
        request_options: Orb::RequestOptions
      }

      type add =
        {
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date,
          allocation_price: Orb::NewAllocationPrice?,
          discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?,
          external_price_id: String?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::FixedFeeQuantityTransition]?,
          maximum_amount: Float?,
          minimum_amount: Float?,
          price: Orb::Models::SubscriptionPriceIntervalsParams::Add::price?,
          price_id: String?,
          usage_customer_ids: ::Array[String]?
        }

      class Add < Orb::Internal::Type::BaseModel
        attr_accessor start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date

        attr_accessor allocation_price: Orb::NewAllocationPrice?

        attr_accessor discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?

        attr_accessor external_price_id: String?

        attr_accessor filter: String?

        attr_accessor fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::FixedFeeQuantityTransition]?

        attr_accessor maximum_amount: Float?

        attr_accessor minimum_amount: Float?

        attr_accessor price: Orb::Models::SubscriptionPriceIntervalsParams::Add::price?

        attr_accessor price_id: String?

        attr_accessor usage_customer_ids: ::Array[String]?

        def initialize: (
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date,
          ?allocation_price: Orb::NewAllocationPrice?,
          ?discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?,
          ?end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?,
          ?external_price_id: String?,
          ?filter: String?,
          ?fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::FixedFeeQuantityTransition]?,
          ?maximum_amount: Float?,
          ?minimum_amount: Float?,
          ?price: Orb::Models::SubscriptionPriceIntervalsParams::Add::price?,
          ?price_id: String?,
          ?usage_customer_ids: ::Array[String]?
        ) -> void

        def to_hash: -> {
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date,
          allocation_price: Orb::NewAllocationPrice?,
          discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?,
          external_price_id: String?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Add::FixedFeeQuantityTransition]?,
          maximum_amount: Float?,
          minimum_amount: Float?,
          price: Orb::Models::SubscriptionPriceIntervalsParams::Add::price?,
          price_id: String?,
          usage_customer_ids: ::Array[String]?
        }

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        module StartDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date]
        end

        type discount =
          Orb::SubscriptionPriceIntervalsParams::Add::Discount::Amount
          | Orb::SubscriptionPriceIntervalsParams::Add::Discount::Percentage
          | Orb::SubscriptionPriceIntervalsParams::Add::Discount::Usage

        module Discount
          extend Orb::Internal::Type::Union

          type amount = { amount_discount: Float, discount_type: :amount }

          class Amount < Orb::Internal::Type::BaseModel
            attr_accessor amount_discount: Float

            attr_accessor discount_type: :amount

            def initialize: (
              amount_discount: Float,
              ?discount_type: :amount
            ) -> void

            def to_hash: -> { amount_discount: Float, discount_type: :amount }
          end

          type percentage =
            { discount_type: :percentage, percentage_discount: Float }

          class Percentage < Orb::Internal::Type::BaseModel
            attr_accessor discount_type: :percentage

            attr_accessor percentage_discount: Float

            def initialize: (
              percentage_discount: Float,
              ?discount_type: :percentage
            ) -> void

            def to_hash: -> {
              discount_type: :percentage,
              percentage_discount: Float
            }
          end

          type usage = { discount_type: :usage, usage_discount: Float }

          class Usage < Orb::Internal::Type::BaseModel
            attr_accessor discount_type: :usage

            attr_accessor usage_discount: Float

            def initialize: (
              usage_discount: Float,
              ?discount_type: :usage
            ) -> void

            def to_hash: -> { discount_type: :usage, usage_discount: Float }
          end

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]
        end

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        module EndDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date]
        end

        type fixed_fee_quantity_transition =
          { effective_date: Time, quantity: Integer }

        class FixedFeeQuantityTransition < Orb::Internal::Type::BaseModel
          attr_accessor effective_date: Time

          attr_accessor quantity: Integer

          def initialize: (effective_date: Time, quantity: Integer) -> void

          def to_hash: -> { effective_date: Time, quantity: Integer }
        end

        type price =
          Orb::NewFloatingUnitPrice
          | Orb::NewFloatingPackagePrice
          | Orb::NewFloatingMatrixPrice
          | Orb::NewFloatingMatrixWithAllocationPrice
          | Orb::NewFloatingTieredPrice
          | Orb::NewFloatingTieredBPSPrice
          | Orb::NewFloatingBPSPrice
          | Orb::NewFloatingBulkBPSPrice
          | Orb::NewFloatingBulkPrice
          | Orb::NewFloatingThresholdTotalAmountPrice
          | Orb::NewFloatingTieredPackagePrice
          | Orb::NewFloatingGroupedTieredPrice
          | Orb::NewFloatingMaxGroupTieredPackagePrice
          | Orb::NewFloatingTieredWithMinimumPrice
          | Orb::NewFloatingPackageWithAllocationPrice
          | Orb::NewFloatingTieredPackageWithMinimumPrice
          | Orb::NewFloatingUnitWithPercentPrice
          | Orb::NewFloatingTieredWithProrationPrice
          | Orb::NewFloatingUnitWithProrationPrice
          | Orb::NewFloatingGroupedAllocationPrice
          | Orb::NewFloatingGroupedWithProratedMinimumPrice
          | Orb::NewFloatingGroupedWithMeteredMinimumPrice
          | Orb::NewFloatingMatrixWithDisplayNamePrice
          | Orb::NewFloatingBulkWithProrationPrice
          | Orb::NewFloatingGroupedTieredPackagePrice
          | Orb::NewFloatingScalableMatrixWithUnitPricingPrice
          | Orb::NewFloatingScalableMatrixWithTieredPricingPrice
          | Orb::NewFloatingCumulativeGroupedBulkPrice

        module Price
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::price]
        end
      end

      type add_adjustment =
        {
          adjustment: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?
        }

      class AddAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment

        attr_accessor start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?

        def initialize: (
          adjustment: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date,
          ?end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?
        ) -> void

        def to_hash: -> {
          adjustment: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?
        }

        type adjustment =
          Orb::NewPercentageDiscount
          | Orb::NewUsageDiscount
          | Orb::NewAmountDiscount
          | Orb::NewMinimum
          | Orb::NewMaximum

        module Adjustment
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::adjustment]
        end

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        module StartDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date]
        end

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        module EndDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date]
        end
      end

      type edit =
        {
          price_interval_id: String,
          billing_cycle_day: Integer?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit::FixedFeeQuantityTransition]?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date,
          usage_customer_ids: ::Array[String]?
        }

      class Edit < Orb::Internal::Type::BaseModel
        attr_accessor price_interval_id: String

        attr_accessor billing_cycle_day: Integer?

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?

        attr_accessor filter: String?

        attr_accessor fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit::FixedFeeQuantityTransition]?

        attr_reader start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date?

        def start_date=: (
          Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date
        ) -> Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date

        attr_accessor usage_customer_ids: ::Array[String]?

        def initialize: (
          price_interval_id: String,
          ?billing_cycle_day: Integer?,
          ?end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?,
          ?filter: String?,
          ?fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit::FixedFeeQuantityTransition]?,
          ?start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date,
          ?usage_customer_ids: ::Array[String]?
        ) -> void

        def to_hash: -> {
          price_interval_id: String,
          billing_cycle_day: Integer?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit::FixedFeeQuantityTransition]?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date,
          usage_customer_ids: ::Array[String]?
        }

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        module EndDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date]
        end

        type fixed_fee_quantity_transition =
          { effective_date: Time, quantity: Integer }

        class FixedFeeQuantityTransition < Orb::Internal::Type::BaseModel
          attr_accessor effective_date: Time

          attr_accessor quantity: Integer

          def initialize: (effective_date: Time, quantity: Integer) -> void

          def to_hash: -> { effective_date: Time, quantity: Integer }
        end

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        module StartDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date]
        end
      end

      type edit_adjustment =
        {
          adjustment_interval_id: String,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        }

      class EditAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment_interval_id: String

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?

        attr_reader start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date?

        def start_date=: (
          Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        ) -> Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date

        def initialize: (
          adjustment_interval_id: String,
          ?end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?,
          ?start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        ) -> void

        def to_hash: -> {
          adjustment_interval_id: String,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        }

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        module EndDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date]
        end

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        module StartDate
          extend Orb::Internal::Type::Union

          def self?.variants: -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date]
        end
      end
    end
  end
end
