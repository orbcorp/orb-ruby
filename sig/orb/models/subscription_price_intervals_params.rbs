module Orb
  module Models
    type subscription_price_intervals_params =
      {
        add: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add],
        add_adjustments: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment],
        allow_invoice_credit_or_void: bool?,
        edit: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit],
        edit_adjustments: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment]
      }
      & Orb::request_parameters

    class SubscriptionPriceIntervalsParams < Orb::BaseModel
      extend Orb::RequestParameters::Converter
      include Orb::RequestParameters

      attr_reader add: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add]?

      def add=: (
        ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add]
      ) -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add]

      attr_reader add_adjustments: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment]?

      def add_adjustments=: (
        ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment]
      ) -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment]

      attr_accessor allow_invoice_credit_or_void: bool?

      attr_reader edit: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit]?

      def edit=: (
        ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit]
      ) -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit]

      attr_reader edit_adjustments: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment]?

      def edit_adjustments=: (
        ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment]
      ) -> ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment]

      def initialize:
        (
          add: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add],
          add_adjustments: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment],
          allow_invoice_credit_or_void: bool?,
          edit: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Edit],
          edit_adjustments: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment],
          request_options: Orb::request_opts
        ) -> void
        | (
          ?Orb::Models::subscription_price_intervals_params
          | Orb::BaseModel data
        ) -> void

      def to_hash: -> Orb::Models::subscription_price_intervals_params

      type add =
        {
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date,
          allocation_price: Orb::Models::NewAllocationPriceModel?,
          discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?,
          external_price_id: String?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalFixedFeeQuantityTransitionModel]?,
          maximum_amount: Float?,
          minimum_amount: Float?,
          price: Orb::Models::new_floating_price_model?,
          price_id: String?,
          usage_customer_ids: ::Array[String]?
        }

      class Add < Orb::BaseModel
        attr_accessor start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date

        attr_accessor allocation_price: Orb::Models::NewAllocationPriceModel?

        attr_accessor discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?

        attr_accessor external_price_id: String?

        attr_accessor filter: String?

        attr_accessor fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalFixedFeeQuantityTransitionModel]?

        attr_accessor maximum_amount: Float?

        attr_accessor minimum_amount: Float?

        attr_accessor price: Orb::Models::new_floating_price_model?

        attr_accessor price_id: String?

        attr_accessor usage_customer_ids: ::Array[String]?

        def initialize:
          (
            start_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::start_date,
            allocation_price: Orb::Models::NewAllocationPriceModel?,
            discounts: ::Array[Orb::Models::SubscriptionPriceIntervalsParams::Add::discount]?,
            end_date: Orb::Models::SubscriptionPriceIntervalsParams::Add::end_date?,
            external_price_id: String?,
            filter: String?,
            fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalFixedFeeQuantityTransitionModel]?,
            maximum_amount: Float?,
            minimum_amount: Float?,
            price: Orb::Models::new_floating_price_model?,
            price_id: String?,
            usage_customer_ids: ::Array[String]?
          ) -> void
          | (
            ?Orb::Models::SubscriptionPriceIntervalsParams::add
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::SubscriptionPriceIntervalsParams::add

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        class StartDate < Orb::Union
          private def self.variants: -> [[nil, Time], [nil, Orb::Models::billing_cycle_relative_date]]
        end

        type discount =
          Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::AmountDiscountCreationParams
          | Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::PercentageDiscountCreationParams
          | Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::UsageDiscountCreationParams

        class Discount < Orb::Union
          type amount_discount_creation_params =
            { amount_discount: Float, discount_type: :amount }

          class AmountDiscountCreationParams < Orb::BaseModel
            attr_accessor amount_discount: Float

            attr_accessor discount_type: :amount

            def initialize:
              (amount_discount: Float, discount_type: :amount) -> void
              | (
                ?Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::amount_discount_creation_params
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::amount_discount_creation_params
          end

          type percentage_discount_creation_params =
            { discount_type: :percentage, percentage_discount: Float }

          class PercentageDiscountCreationParams < Orb::BaseModel
            attr_accessor discount_type: :percentage

            attr_accessor percentage_discount: Float

            def initialize:
              (percentage_discount: Float, discount_type: :percentage) -> void
              | (
                ?Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::percentage_discount_creation_params
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::percentage_discount_creation_params
          end

          type usage_discount_creation_params =
            { discount_type: :usage, usage_discount: Float }

          class UsageDiscountCreationParams < Orb::BaseModel
            attr_accessor discount_type: :usage

            attr_accessor usage_discount: Float

            def initialize:
              (usage_discount: Float, discount_type: :usage) -> void
              | (
                ?Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::usage_discount_creation_params
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::usage_discount_creation_params
          end

          private def self.variants: -> [[:amount, Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::AmountDiscountCreationParams], [:percentage, Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::PercentageDiscountCreationParams], [:usage, Orb::Models::SubscriptionPriceIntervalsParams::Add::Discount::UsageDiscountCreationParams]]
        end

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        class EndDate < Orb::Union
          private def self.variants: -> [[nil, Time], [nil, Orb::Models::billing_cycle_relative_date]]
        end
      end

      type add_adjustment =
        {
          adjustment: Orb::Models::new_adjustment_model,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?
        }

      class AddAdjustment < Orb::BaseModel
        attr_accessor adjustment: Orb::Models::new_adjustment_model

        attr_accessor start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?

        def initialize:
          (
            adjustment: Orb::Models::new_adjustment_model,
            start_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::start_date,
            end_date: Orb::Models::SubscriptionPriceIntervalsParams::AddAdjustment::end_date?
          ) -> void
          | (
            ?Orb::Models::SubscriptionPriceIntervalsParams::add_adjustment
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::SubscriptionPriceIntervalsParams::add_adjustment

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        class StartDate < Orb::Union
          private def self.variants: -> [[nil, Time], [nil, Orb::Models::billing_cycle_relative_date]]
        end

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        class EndDate < Orb::Union
          private def self.variants: -> [[nil, Time], [nil, Orb::Models::billing_cycle_relative_date]]
        end
      end

      type edit =
        {
          price_interval_id: String,
          billing_cycle_day: Integer?,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalFixedFeeQuantityTransitionModel]?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date,
          usage_customer_ids: ::Array[String]?
        }

      class Edit < Orb::BaseModel
        attr_accessor price_interval_id: String

        attr_accessor billing_cycle_day: Integer?

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?

        attr_accessor filter: String?

        attr_accessor fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalFixedFeeQuantityTransitionModel]?

        attr_reader start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date?

        def start_date=: (
          Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date
        ) -> Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date

        attr_accessor usage_customer_ids: ::Array[String]?

        def initialize:
          (
            price_interval_id: String,
            billing_cycle_day: Integer?,
            end_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::end_date?,
            filter: String?,
            fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalFixedFeeQuantityTransitionModel]?,
            start_date: Orb::Models::SubscriptionPriceIntervalsParams::Edit::start_date,
            usage_customer_ids: ::Array[String]?
          ) -> void
          | (
            ?Orb::Models::SubscriptionPriceIntervalsParams::edit
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::SubscriptionPriceIntervalsParams::edit

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        class EndDate < Orb::Union
          private def self.variants: -> [[nil, Time], [nil, Orb::Models::billing_cycle_relative_date]]
        end

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        class StartDate < Orb::Union
          private def self.variants: -> [[nil, Time], [nil, Orb::Models::billing_cycle_relative_date]]
        end
      end

      type edit_adjustment =
        {
          adjustment_interval_id: String,
          end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?,
          start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        }

      class EditAdjustment < Orb::BaseModel
        attr_accessor adjustment_interval_id: String

        attr_accessor end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?

        attr_reader start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date?

        def start_date=: (
          Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
        ) -> Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date

        def initialize:
          (
            adjustment_interval_id: String,
            end_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::end_date?,
            start_date: Orb::Models::SubscriptionPriceIntervalsParams::EditAdjustment::start_date
          ) -> void
          | (
            ?Orb::Models::SubscriptionPriceIntervalsParams::edit_adjustment
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::SubscriptionPriceIntervalsParams::edit_adjustment

        type end_date = Time | Orb::Models::billing_cycle_relative_date

        class EndDate < Orb::Union
          private def self.variants: -> [[nil, Time], [nil, Orb::Models::billing_cycle_relative_date]]
        end

        type start_date = Time | Orb::Models::billing_cycle_relative_date

        class StartDate < Orb::Union
          private def self.variants: -> [[nil, Time], [nil, Orb::Models::billing_cycle_relative_date]]
        end
      end
    end
  end
end
