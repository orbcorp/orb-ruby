module Orb
  module Models
    type subscription_change_apply_response =
      {
        id: String,
        expiration_time: Time,
        status: Orb::Models::SubscriptionChangeApplyResponse::status,
        subscription: Orb::MutatedSubscription?,
        applied_at: Time?,
        cancelled_at: Time?
      }

    class SubscriptionChangeApplyResponse < Orb::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor expiration_time: Time

      attr_accessor status: Orb::Models::SubscriptionChangeApplyResponse::status

      attr_accessor subscription: Orb::MutatedSubscription?

      attr_accessor applied_at: Time?

      attr_accessor cancelled_at: Time?

      def initialize: (
        id: String,
        expiration_time: Time,
        status: Orb::Models::SubscriptionChangeApplyResponse::status,
        subscription: Orb::MutatedSubscription?,
        ?applied_at: Time?,
        ?cancelled_at: Time?
      ) -> void

      def to_hash: -> {
        id: String,
        expiration_time: Time,
        status: Orb::Models::SubscriptionChangeApplyResponse::status,
        subscription: Orb::MutatedSubscription?,
        applied_at: Time?,
        cancelled_at: Time?
      }

      type status = :pending | :applied | :cancelled

      module Status
        extend Orb::Internal::Type::Enum

        PENDING: :pending
        APPLIED: :applied
        CANCELLED: :cancelled

        def self?.values: -> ::Array[Orb::Models::SubscriptionChangeApplyResponse::status]
      end
    end
  end
end
