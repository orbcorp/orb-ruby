module Orb
  module Models
    type new_plan_unit_price =
      {
        cadence: Orb::Models::NewPlanUnitPrice::cadence,
        item_id: String,
        model_type: Orb::Models::NewPlanUnitPrice::model_type,
        name: String,
        unit_config: Orb::UnitConfig,
        billable_metric_id: String?,
        billed_in_advance: bool?,
        billing_cycle_configuration: Orb::NewBillingCycleConfiguration?,
        conversion_rate: Float?,
        conversion_rate_config: Orb::Models::NewPlanUnitPrice::conversion_rate_config?,
        currency: String?,
        dimensional_price_configuration: Orb::NewDimensionalPriceConfiguration?,
        external_price_id: String?,
        fixed_price_quantity: Float?,
        invoice_grouping_key: String?,
        invoicing_cycle_configuration: Orb::NewBillingCycleConfiguration?,
        metadata: ::Hash[Symbol, String?]?
      }

    class NewPlanUnitPrice < Orb::Internal::Type::BaseModel
      attr_accessor cadence: Orb::Models::NewPlanUnitPrice::cadence

      attr_accessor item_id: String

      attr_accessor model_type: Orb::Models::NewPlanUnitPrice::model_type

      attr_accessor name: String

      attr_accessor unit_config: Orb::UnitConfig

      attr_accessor billable_metric_id: String?

      attr_accessor billed_in_advance: bool?

      attr_accessor billing_cycle_configuration: Orb::NewBillingCycleConfiguration?

      attr_accessor conversion_rate: Float?

      attr_accessor conversion_rate_config: Orb::Models::NewPlanUnitPrice::conversion_rate_config?

      attr_accessor currency: String?

      attr_accessor dimensional_price_configuration: Orb::NewDimensionalPriceConfiguration?

      attr_accessor external_price_id: String?

      attr_accessor fixed_price_quantity: Float?

      attr_accessor invoice_grouping_key: String?

      attr_accessor invoicing_cycle_configuration: Orb::NewBillingCycleConfiguration?

      attr_accessor metadata: ::Hash[Symbol, String?]?

      def initialize: (
        cadence: Orb::Models::NewPlanUnitPrice::cadence,
        item_id: String,
        model_type: Orb::Models::NewPlanUnitPrice::model_type,
        name: String,
        unit_config: Orb::UnitConfig,
        ?billable_metric_id: String?,
        ?billed_in_advance: bool?,
        ?billing_cycle_configuration: Orb::NewBillingCycleConfiguration?,
        ?conversion_rate: Float?,
        ?conversion_rate_config: Orb::Models::NewPlanUnitPrice::conversion_rate_config?,
        ?currency: String?,
        ?dimensional_price_configuration: Orb::NewDimensionalPriceConfiguration?,
        ?external_price_id: String?,
        ?fixed_price_quantity: Float?,
        ?invoice_grouping_key: String?,
        ?invoicing_cycle_configuration: Orb::NewBillingCycleConfiguration?,
        ?metadata: ::Hash[Symbol, String?]?
      ) -> void

      def to_hash: -> {
        cadence: Orb::Models::NewPlanUnitPrice::cadence,
        item_id: String,
        model_type: Orb::Models::NewPlanUnitPrice::model_type,
        name: String,
        unit_config: Orb::UnitConfig,
        billable_metric_id: String?,
        billed_in_advance: bool?,
        billing_cycle_configuration: Orb::NewBillingCycleConfiguration?,
        conversion_rate: Float?,
        conversion_rate_config: Orb::Models::NewPlanUnitPrice::conversion_rate_config?,
        currency: String?,
        dimensional_price_configuration: Orb::NewDimensionalPriceConfiguration?,
        external_price_id: String?,
        fixed_price_quantity: Float?,
        invoice_grouping_key: String?,
        invoicing_cycle_configuration: Orb::NewBillingCycleConfiguration?,
        metadata: ::Hash[Symbol, String?]?
      }

      type cadence =
        :annual | :semi_annual | :monthly | :quarterly | :one_time | :custom

      module Cadence
        extend Orb::Internal::Type::Enum

        ANNUAL: :annual
        SEMI_ANNUAL: :semi_annual
        MONTHLY: :monthly
        QUARTERLY: :quarterly
        ONE_TIME: :one_time
        CUSTOM: :custom

        def self?.values: -> ::Array[Orb::Models::NewPlanUnitPrice::cadence]
      end

      type model_type = :unit

      module ModelType
        extend Orb::Internal::Type::Enum

        UNIT: :unit

        def self?.values: -> ::Array[Orb::Models::NewPlanUnitPrice::model_type]
      end

      type conversion_rate_config =
        Orb::NewPlanUnitPrice::ConversionRateConfig::Unit
        | Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered

      module ConversionRateConfig
        extend Orb::Internal::Type::Union

        type unit =
          {
            conversion_rate_type: :unit,
            unit_config: Orb::NewPlanUnitPrice::ConversionRateConfig::Unit::UnitConfig
          }

        class Unit < Orb::Internal::Type::BaseModel
          attr_accessor conversion_rate_type: :unit

          attr_accessor unit_config: Orb::NewPlanUnitPrice::ConversionRateConfig::Unit::UnitConfig

          def initialize: (
            unit_config: Orb::NewPlanUnitPrice::ConversionRateConfig::Unit::UnitConfig,
            ?conversion_rate_type: :unit
          ) -> void

          def to_hash: -> {
            conversion_rate_type: :unit,
            unit_config: Orb::NewPlanUnitPrice::ConversionRateConfig::Unit::UnitConfig
          }

          type unit_config = { unit_amount: String }

          class UnitConfig < Orb::Internal::Type::BaseModel
            attr_accessor unit_amount: String

            def initialize: (unit_amount: String) -> void

            def to_hash: -> { unit_amount: String }
          end
        end

        type tiered =
          {
            conversion_rate_type: :tiered,
            tiered_config: Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered::TieredConfig
          }

        class Tiered < Orb::Internal::Type::BaseModel
          attr_accessor conversion_rate_type: :tiered

          attr_accessor tiered_config: Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered::TieredConfig

          def initialize: (
            tiered_config: Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered::TieredConfig,
            ?conversion_rate_type: :tiered
          ) -> void

          def to_hash: -> {
            conversion_rate_type: :tiered,
            tiered_config: Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered::TieredConfig
          }

          type tiered_config =
            {
              tiers: ::Array[Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered::TieredConfig::Tier]
            }

          class TieredConfig < Orb::Internal::Type::BaseModel
            attr_accessor tiers: ::Array[Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered::TieredConfig::Tier]

            def initialize: (
              tiers: ::Array[Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered::TieredConfig::Tier]
            ) -> void

            def to_hash: -> {
              tiers: ::Array[Orb::NewPlanUnitPrice::ConversionRateConfig::Tiered::TieredConfig::Tier]
            }

            type tier =
              { first_unit: Float, unit_amount: String, last_unit: Float? }

            class Tier < Orb::Internal::Type::BaseModel
              attr_accessor first_unit: Float

              attr_accessor unit_amount: String

              attr_accessor last_unit: Float?

              def initialize: (
                first_unit: Float,
                unit_amount: String,
                ?last_unit: Float?
              ) -> void

              def to_hash: -> {
                first_unit: Float,
                unit_amount: String,
                last_unit: Float?
              }
            end
          end
        end

        def self?.variants: -> ::Array[Orb::Models::NewPlanUnitPrice::conversion_rate_config]
      end
    end
  end
end
