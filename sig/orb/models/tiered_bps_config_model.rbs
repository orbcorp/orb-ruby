module Orb
  module Models
    type tiered_bps_config_model =
      { tiers: ::Array[Orb::Models::TieredBpsConfigModel::Tier] }

    class TieredBpsConfigModel < Orb::BaseModel
      attr_accessor tiers: ::Array[Orb::Models::TieredBpsConfigModel::Tier]

      def initialize:
        (tiers: ::Array[Orb::Models::TieredBpsConfigModel::Tier]) -> void
        | (?Orb::Models::tiered_bps_config_model | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::tiered_bps_config_model

      type tier =
        {
          bps: Float,
          minimum_amount: String,
          maximum_amount: String?,
          per_unit_maximum: String?
        }

      class Tier < Orb::BaseModel
        attr_accessor bps: Float

        attr_accessor minimum_amount: String

        attr_accessor maximum_amount: String?

        attr_accessor per_unit_maximum: String?

        def initialize:
          (
            bps: Float,
            minimum_amount: String,
            maximum_amount: String?,
            per_unit_maximum: String?
          ) -> void
          | (
            ?Orb::Models::TieredBpsConfigModel::tier | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::TieredBpsConfigModel::tier
      end
    end
  end
end
