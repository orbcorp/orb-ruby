module Orb
  module Models
    type alert_model =
      {
        id: String,
        created_at: Time,
        currency: String?,
        customer: Orb::Models::CustomerMinifiedModel?,
        enabled: bool,
        metric: Orb::Models::AlertModel::Metric?,
        plan: Orb::Models::AlertModel::Plan?,
        subscription: Orb::Models::SubscriptionMinifiedModel?,
        thresholds: ::Array[Orb::Models::ThresholdModel]?,
        type: Orb::Models::AlertModel::type_
      }

    class AlertModel < Orb::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Time

      attr_accessor currency: String?

      attr_accessor customer: Orb::Models::CustomerMinifiedModel?

      attr_accessor enabled: bool

      attr_accessor metric: Orb::Models::AlertModel::Metric?

      attr_accessor plan: Orb::Models::AlertModel::Plan?

      attr_accessor subscription: Orb::Models::SubscriptionMinifiedModel?

      attr_accessor thresholds: ::Array[Orb::Models::ThresholdModel]?

      attr_accessor type: Orb::Models::AlertModel::type_

      def initialize:
        (
          id: String,
          created_at: Time,
          currency: String?,
          customer: Orb::Models::CustomerMinifiedModel?,
          enabled: bool,
          metric: Orb::Models::AlertModel::Metric?,
          plan: Orb::Models::AlertModel::Plan?,
          subscription: Orb::Models::SubscriptionMinifiedModel?,
          thresholds: ::Array[Orb::Models::ThresholdModel]?,
          type: Orb::Models::AlertModel::type_
        ) -> void
        | (?Orb::Models::alert_model | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::alert_model

      type metric = { id: String }

      class Metric < Orb::BaseModel
        attr_accessor id: String

        def initialize:
          (id: String) -> void
          | (?Orb::Models::AlertModel::metric | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::AlertModel::metric
      end

      type plan =
        {
          id: String?,
          external_plan_id: String?,
          name: String?,
          plan_version: String
        }

      class Plan < Orb::BaseModel
        attr_accessor id: String?

        attr_accessor external_plan_id: String?

        attr_accessor name: String?

        attr_accessor plan_version: String

        def initialize:
          (
            id: String?,
            external_plan_id: String?,
            name: String?,
            plan_version: String
          ) -> void
          | (?Orb::Models::AlertModel::plan | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::AlertModel::plan
      end

      type type_ =
        :usage_exceeded
        | :cost_exceeded
        | :credit_balance_depleted
        | :credit_balance_dropped
        | :credit_balance_recovered

      class Type < Orb::Enum
        USAGE_EXCEEDED: :usage_exceeded
        COST_EXCEEDED: :cost_exceeded
        CREDIT_BALANCE_DEPLETED: :credit_balance_depleted
        CREDIT_BALANCE_DROPPED: :credit_balance_dropped
        CREDIT_BALANCE_RECOVERED: :credit_balance_recovered

        def self.values: -> ::Array[Orb::Models::AlertModel::type_]
      end
    end
  end
end
