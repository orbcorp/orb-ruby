module Orb
  module Models
    type plan =
      {
        id: String,
        adjustments: ::Array[Orb::Models::adjustment_model],
        base_plan: Orb::Models::PlanMinifiedModel?,
        base_plan_id: String?,
        created_at: Time,
        currency: String,
        default_invoice_memo: String?,
        description: String,
        discount: Orb::Models::discount?,
        external_plan_id: String?,
        invoicing_currency: String,
        maximum: Orb::Models::MaximumModel?,
        maximum_amount: String?,
        metadata: ::Hash[Symbol, String],
        minimum: Orb::Models::MinimumModel?,
        minimum_amount: String?,
        name: String,
        net_terms: Integer?,
        plan_phases: ::Array[Orb::Models::Plan::PlanPhase]?,
        prices: ::Array[Orb::Models::price_model],
        product: Orb::Models::Plan::Product,
        status: Orb::Models::Plan::status,
        trial_config: Orb::Models::Plan::TrialConfig,
        version: Integer
      }

    class Plan < Orb::BaseModel
      attr_accessor id: String

      attr_accessor adjustments: ::Array[Orb::Models::adjustment_model]

      attr_accessor base_plan: Orb::Models::PlanMinifiedModel?

      attr_accessor base_plan_id: String?

      attr_accessor created_at: Time

      attr_accessor currency: String

      attr_accessor default_invoice_memo: String?

      attr_accessor description: String

      attr_accessor discount: Orb::Models::discount?

      attr_accessor external_plan_id: String?

      attr_accessor invoicing_currency: String

      attr_accessor maximum: Orb::Models::MaximumModel?

      attr_accessor maximum_amount: String?

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor minimum: Orb::Models::MinimumModel?

      attr_accessor minimum_amount: String?

      attr_accessor name: String

      attr_accessor net_terms: Integer?

      attr_accessor plan_phases: ::Array[Orb::Models::Plan::PlanPhase]?

      attr_accessor prices: ::Array[Orb::Models::price_model]

      attr_accessor product: Orb::Models::Plan::Product

      attr_accessor status: Orb::Models::Plan::status

      attr_accessor trial_config: Orb::Models::Plan::TrialConfig

      attr_accessor version: Integer

      def initialize:
        (
          id: String,
          adjustments: ::Array[Orb::Models::adjustment_model],
          base_plan: Orb::Models::PlanMinifiedModel?,
          base_plan_id: String?,
          created_at: Time,
          currency: String,
          default_invoice_memo: String?,
          description: String,
          discount: Orb::Models::discount?,
          external_plan_id: String?,
          invoicing_currency: String,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          metadata: ::Hash[Symbol, String],
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          name: String,
          net_terms: Integer?,
          plan_phases: ::Array[Orb::Models::Plan::PlanPhase]?,
          prices: ::Array[Orb::Models::price_model],
          product: Orb::Models::Plan::Product,
          status: Orb::Models::Plan::status,
          trial_config: Orb::Models::Plan::TrialConfig,
          version: Integer
        ) -> void
        | (?Orb::Models::plan | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::plan

      type plan_phase =
        {
          id: String,
          description: String?,
          discount: Orb::Models::discount?,
          duration: Integer?,
          duration_unit: Orb::Models::Plan::PlanPhase::duration_unit?,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          name: String,
          order: Integer
        }

      class PlanPhase < Orb::BaseModel
        attr_accessor id: String

        attr_accessor description: String?

        attr_accessor discount: Orb::Models::discount?

        attr_accessor duration: Integer?

        attr_accessor duration_unit: Orb::Models::Plan::PlanPhase::duration_unit?

        attr_accessor maximum: Orb::Models::MaximumModel?

        attr_accessor maximum_amount: String?

        attr_accessor minimum: Orb::Models::MinimumModel?

        attr_accessor minimum_amount: String?

        attr_accessor name: String

        attr_accessor order: Integer

        def initialize:
          (
            id: String,
            description: String?,
            discount: Orb::Models::discount?,
            duration: Integer?,
            duration_unit: Orb::Models::Plan::PlanPhase::duration_unit?,
            maximum: Orb::Models::MaximumModel?,
            maximum_amount: String?,
            minimum: Orb::Models::MinimumModel?,
            minimum_amount: String?,
            name: String,
            order: Integer
          ) -> void
          | (?Orb::Models::Plan::plan_phase | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::Plan::plan_phase

        type duration_unit =
          :daily | :monthly | :quarterly | :semi_annual | :annual

        class DurationUnit < Orb::Enum
          DAILY: :daily
          MONTHLY: :monthly
          QUARTERLY: :quarterly
          SEMI_ANNUAL: :semi_annual
          ANNUAL: :annual

          def self.values: -> ::Array[Orb::Models::Plan::PlanPhase::duration_unit]
        end
      end

      type product = { id: String, created_at: Time, name: String }

      class Product < Orb::BaseModel
        attr_accessor id: String

        attr_accessor created_at: Time

        attr_accessor name: String

        def initialize:
          (id: String, created_at: Time, name: String) -> void
          | (?Orb::Models::Plan::product | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::Plan::product
      end

      type status = :active | :archived | :draft

      class Status < Orb::Enum
        ACTIVE: :active
        ARCHIVED: :archived
        DRAFT: :draft

        def self.values: -> ::Array[Orb::Models::Plan::status]
      end

      type trial_config =
        {
          trial_period: Integer?,
          trial_period_unit: Orb::Models::Plan::TrialConfig::trial_period_unit
        }

      class TrialConfig < Orb::BaseModel
        attr_accessor trial_period: Integer?

        attr_accessor trial_period_unit: Orb::Models::Plan::TrialConfig::trial_period_unit

        def initialize:
          (
            trial_period: Integer?,
            trial_period_unit: Orb::Models::Plan::TrialConfig::trial_period_unit
          ) -> void
          | (?Orb::Models::Plan::trial_config | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::Plan::trial_config

        type trial_period_unit = :days

        class TrialPeriodUnit < Orb::Enum
          DAYS: :days

          def self.values: -> ::Array[Orb::Models::Plan::TrialConfig::trial_period_unit]
        end
      end
    end
  end
end
