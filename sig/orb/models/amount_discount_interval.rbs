module Orb
  module Models
    type amount_discount_interval =
      {
        amount_discount: String,
        applies_to_price_interval_ids: ::Array[String],
        discount_type: Orb::Models::AmountDiscountInterval::discount_type,
        end_date: Time?,
        filters: ::Array[Orb::TransformPriceFilter],
        start_date: Time
      }

    class AmountDiscountInterval < Orb::Internal::Type::BaseModel
      attr_accessor amount_discount: String

      attr_accessor applies_to_price_interval_ids: ::Array[String]

      attr_accessor discount_type: Orb::Models::AmountDiscountInterval::discount_type

      attr_accessor end_date: Time?

      attr_accessor filters: ::Array[Orb::TransformPriceFilter]

      attr_accessor start_date: Time

      def initialize: (
        amount_discount: String,
        applies_to_price_interval_ids: ::Array[String],
        discount_type: Orb::Models::AmountDiscountInterval::discount_type,
        end_date: Time?,
        filters: ::Array[Orb::TransformPriceFilter],
        start_date: Time
      ) -> void

      def to_hash: -> {
        amount_discount: String,
        applies_to_price_interval_ids: ::Array[String],
        discount_type: Orb::Models::AmountDiscountInterval::discount_type,
        end_date: Time?,
        filters: ::Array[Orb::TransformPriceFilter],
        start_date: Time
      }

      type discount_type = :amount

      module DiscountType
        extend Orb::Internal::Type::Enum

        AMOUNT: :amount

        def self?.values: -> ::Array[Orb::Models::AmountDiscountInterval::discount_type]
      end
    end
  end
end
