module Orb
  module Models
    type usage_discount_interval =
      {
        applies_to_price_interval_ids: ::Array[String],
        discount_type: Orb::Models::UsageDiscountInterval::discount_type,
        end_date: Time?,
        filters: ::Array[Orb::TransformPriceFilter],
        start_date: Time,
        usage_discount: Float
      }

    class UsageDiscountInterval < Orb::Internal::Type::BaseModel
      attr_accessor applies_to_price_interval_ids: ::Array[String]

      attr_accessor discount_type: Orb::Models::UsageDiscountInterval::discount_type

      attr_accessor end_date: Time?

      attr_accessor filters: ::Array[Orb::TransformPriceFilter]

      attr_accessor start_date: Time

      attr_accessor usage_discount: Float

      def initialize: (
        applies_to_price_interval_ids: ::Array[String],
        discount_type: Orb::Models::UsageDiscountInterval::discount_type,
        end_date: Time?,
        filters: ::Array[Orb::TransformPriceFilter],
        start_date: Time,
        usage_discount: Float
      ) -> void

      def to_hash: -> {
        applies_to_price_interval_ids: ::Array[String],
        discount_type: Orb::Models::UsageDiscountInterval::discount_type,
        end_date: Time?,
        filters: ::Array[Orb::TransformPriceFilter],
        start_date: Time,
        usage_discount: Float
      }

      type discount_type = :usage

      module DiscountType
        extend Orb::Internal::Type::Enum

        USAGE: :usage

        def self?.values: -> ::Array[Orb::Models::UsageDiscountInterval::discount_type]
      end
    end
  end
end
