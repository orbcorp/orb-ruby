module Orb
  module Models
    type subscription_unschedule_pending_plan_changes_response =
      {
        id: String,
        active_plan_phase_order: Integer?,
        adjustment_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval],
        auto_collection: bool?,
        billing_cycle_anchor_configuration: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::BillingCycleAnchorConfiguration,
        billing_cycle_day: Integer,
        created_at: Time,
        current_billing_period_end_date: Time?,
        current_billing_period_start_date: Time?,
        customer: Orb::Models::Customer,
        default_invoice_memo: String?,
        discount_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::discount_interval],
        end_date: Time?,
        fixed_fee_quantity_schedule: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::FixedFeeQuantitySchedule],
        invoicing_threshold: String?,
        maximum_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::MaximumInterval],
        metadata: ::Hash[Symbol, String],
        minimum_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::MinimumInterval],
        net_terms: Integer,
        plan: Orb::Models::Plan,
        price_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::PriceInterval],
        redeemed_coupon: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::RedeemedCoupon?,
        start_date: Time,
        status: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::status,
        trial_info: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::TrialInfo
      }

    class SubscriptionUnschedulePendingPlanChangesResponse < Orb::BaseModel
      attr_accessor id: String

      attr_accessor active_plan_phase_order: Integer?

      attr_accessor adjustment_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval]

      attr_accessor auto_collection: bool?

      attr_accessor billing_cycle_anchor_configuration: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::BillingCycleAnchorConfiguration

      attr_accessor billing_cycle_day: Integer

      attr_accessor created_at: Time

      attr_accessor current_billing_period_end_date: Time?

      attr_accessor current_billing_period_start_date: Time?

      attr_accessor customer: Orb::Models::Customer

      attr_accessor default_invoice_memo: String?

      attr_accessor discount_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::discount_interval]

      attr_accessor end_date: Time?

      attr_accessor fixed_fee_quantity_schedule: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::FixedFeeQuantitySchedule]

      attr_accessor invoicing_threshold: String?

      attr_accessor maximum_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::MaximumInterval]

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor minimum_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::MinimumInterval]

      attr_accessor net_terms: Integer

      attr_accessor plan: Orb::Models::Plan

      attr_accessor price_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::PriceInterval]

      attr_accessor redeemed_coupon: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::RedeemedCoupon?

      attr_accessor start_date: Time

      attr_accessor status: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::status

      attr_accessor trial_info: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::TrialInfo

      def initialize: (
        id: String,
        active_plan_phase_order: Integer?,
        adjustment_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval],
        auto_collection: bool?,
        billing_cycle_anchor_configuration: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::BillingCycleAnchorConfiguration,
        billing_cycle_day: Integer,
        created_at: Time,
        current_billing_period_end_date: Time?,
        current_billing_period_start_date: Time?,
        customer: Orb::Models::Customer,
        default_invoice_memo: String?,
        discount_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::discount_interval],
        end_date: Time?,
        fixed_fee_quantity_schedule: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::FixedFeeQuantitySchedule],
        invoicing_threshold: String?,
        maximum_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::MaximumInterval],
        metadata: ::Hash[Symbol, String],
        minimum_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::MinimumInterval],
        net_terms: Integer,
        plan: Orb::Models::Plan,
        price_intervals: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::PriceInterval],
        redeemed_coupon: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::RedeemedCoupon?,
        start_date: Time,
        status: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::status,
        trial_info: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::TrialInfo
      ) -> void

      def to_hash: -> Orb::Models::subscription_unschedule_pending_plan_changes_response

      type adjustment_interval =
        {
          id: String,
          adjustment: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::adjustment,
          applies_to_price_interval_ids: ::Array[String],
          end_date: Time?,
          start_date: Time
        }

      class AdjustmentInterval < Orb::BaseModel
        attr_accessor id: String

        attr_accessor adjustment: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::adjustment

        attr_accessor applies_to_price_interval_ids: ::Array[String]

        attr_accessor end_date: Time?

        attr_accessor start_date: Time

        def initialize: (
          id: String,
          adjustment: Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::adjustment,
          applies_to_price_interval_ids: ::Array[String],
          end_date: Time?,
          start_date: Time
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::adjustment_interval

        type adjustment =
          Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhaseUsageDiscountAdjustment
          | Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhaseAmountDiscountAdjustment
          | Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhasePercentageDiscountAdjustment
          | Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhaseMinimumAdjustment
          | Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhaseMaximumAdjustment

        class Adjustment < Orb::Union
          type plan_phase_usage_discount_adjustment =
            {
              id: String,
              adjustment_type: :usage_discount,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              plan_phase_order: Integer?,
              reason: String?,
              usage_discount: Float
            }

          class PlanPhaseUsageDiscountAdjustment < Orb::BaseModel
            attr_accessor id: String

            attr_accessor adjustment_type: :usage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor is_invoice_level: bool

            attr_accessor plan_phase_order: Integer?

            attr_accessor reason: String?

            attr_accessor usage_discount: Float

            def initialize: (
              id: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              plan_phase_order: Integer?,
              reason: String?,
              usage_discount: Float,
              ?adjustment_type: :usage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::plan_phase_usage_discount_adjustment
          end

          type plan_phase_amount_discount_adjustment =
            {
              id: String,
              adjustment_type: :amount_discount,
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              plan_phase_order: Integer?,
              reason: String?
            }

          class PlanPhaseAmountDiscountAdjustment < Orb::BaseModel
            attr_accessor id: String

            attr_accessor adjustment_type: :amount_discount

            attr_accessor amount_discount: String

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor is_invoice_level: bool

            attr_accessor plan_phase_order: Integer?

            attr_accessor reason: String?

            def initialize: (
              id: String,
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              plan_phase_order: Integer?,
              reason: String?,
              ?adjustment_type: :amount_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::plan_phase_amount_discount_adjustment
          end

          type plan_phase_percentage_discount_adjustment =
            {
              id: String,
              adjustment_type: :percentage_discount,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              percentage_discount: Float,
              plan_phase_order: Integer?,
              reason: String?
            }

          class PlanPhasePercentageDiscountAdjustment < Orb::BaseModel
            attr_accessor id: String

            attr_accessor adjustment_type: :percentage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor is_invoice_level: bool

            attr_accessor percentage_discount: Float

            attr_accessor plan_phase_order: Integer?

            attr_accessor reason: String?

            def initialize: (
              id: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              percentage_discount: Float,
              plan_phase_order: Integer?,
              reason: String?,
              ?adjustment_type: :percentage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::plan_phase_percentage_discount_adjustment
          end

          type plan_phase_minimum_adjustment =
            {
              id: String,
              adjustment_type: :minimum,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              item_id: String,
              minimum_amount: String,
              plan_phase_order: Integer?,
              reason: String?
            }

          class PlanPhaseMinimumAdjustment < Orb::BaseModel
            attr_accessor id: String

            attr_accessor adjustment_type: :minimum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor is_invoice_level: bool

            attr_accessor item_id: String

            attr_accessor minimum_amount: String

            attr_accessor plan_phase_order: Integer?

            attr_accessor reason: String?

            def initialize: (
              id: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              item_id: String,
              minimum_amount: String,
              plan_phase_order: Integer?,
              reason: String?,
              ?adjustment_type: :minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::plan_phase_minimum_adjustment
          end

          type plan_phase_maximum_adjustment =
            {
              id: String,
              adjustment_type: :maximum,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              maximum_amount: String,
              plan_phase_order: Integer?,
              reason: String?
            }

          class PlanPhaseMaximumAdjustment < Orb::BaseModel
            attr_accessor id: String

            attr_accessor adjustment_type: :maximum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor is_invoice_level: bool

            attr_accessor maximum_amount: String

            attr_accessor plan_phase_order: Integer?

            attr_accessor reason: String?

            def initialize: (
              id: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              maximum_amount: String,
              plan_phase_order: Integer?,
              reason: String?,
              ?adjustment_type: :maximum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::plan_phase_maximum_adjustment
          end

          def self.variants: -> [Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhaseUsageDiscountAdjustment, Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhaseAmountDiscountAdjustment, Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhasePercentageDiscountAdjustment, Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhaseMinimumAdjustment, Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::AdjustmentInterval::Adjustment::PlanPhaseMaximumAdjustment]
        end
      end

      type billing_cycle_anchor_configuration =
        { day: Integer, month: Integer?, year: Integer? }

      class BillingCycleAnchorConfiguration < Orb::BaseModel
        attr_accessor day: Integer

        attr_accessor month: Integer?

        attr_accessor year: Integer?

        def initialize: (
          day: Integer,
          ?month: Integer?,
          ?year: Integer?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::billing_cycle_anchor_configuration
      end

      type discount_interval =
        Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::AmountDiscountInterval
        | Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::PercentageDiscountInterval
        | Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::UsageDiscountInterval

      class DiscountInterval < Orb::Union
        type amount_discount_interval =
          {
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            applies_to_price_interval_ids: ::Array[String],
            discount_type: :amount,
            end_date: Time?,
            start_date: Time
          }

        class AmountDiscountInterval < Orb::BaseModel
          attr_accessor amount_discount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor applies_to_price_interval_ids: ::Array[String]

          attr_accessor discount_type: :amount

          attr_accessor end_date: Time?

          attr_accessor start_date: Time

          def initialize: (
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            applies_to_price_interval_ids: ::Array[String],
            end_date: Time?,
            start_date: Time,
            ?discount_type: :amount
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::amount_discount_interval
        end

        type percentage_discount_interval =
          {
            applies_to_price_ids: ::Array[String],
            applies_to_price_interval_ids: ::Array[String],
            discount_type: :percentage,
            end_date: Time?,
            percentage_discount: Float,
            start_date: Time
          }

        class PercentageDiscountInterval < Orb::BaseModel
          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor applies_to_price_interval_ids: ::Array[String]

          attr_accessor discount_type: :percentage

          attr_accessor end_date: Time?

          attr_accessor percentage_discount: Float

          attr_accessor start_date: Time

          def initialize: (
            applies_to_price_ids: ::Array[String],
            applies_to_price_interval_ids: ::Array[String],
            end_date: Time?,
            percentage_discount: Float,
            start_date: Time,
            ?discount_type: :percentage
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::percentage_discount_interval
        end

        type usage_discount_interval =
          {
            applies_to_price_ids: ::Array[String],
            applies_to_price_interval_ids: ::Array[String],
            discount_type: :usage,
            end_date: Time?,
            start_date: Time,
            usage_discount: Float
          }

        class UsageDiscountInterval < Orb::BaseModel
          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor applies_to_price_interval_ids: ::Array[String]

          attr_accessor discount_type: :usage

          attr_accessor end_date: Time?

          attr_accessor start_date: Time

          attr_accessor usage_discount: Float

          def initialize: (
            applies_to_price_ids: ::Array[String],
            applies_to_price_interval_ids: ::Array[String],
            end_date: Time?,
            start_date: Time,
            usage_discount: Float,
            ?discount_type: :usage
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::usage_discount_interval
        end

        def self.variants: -> [Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::AmountDiscountInterval, Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::PercentageDiscountInterval, Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::DiscountInterval::UsageDiscountInterval]
      end

      type fixed_fee_quantity_schedule =
        { end_date: Time?, price_id: String, quantity: Float, start_date: Time }

      class FixedFeeQuantitySchedule < Orb::BaseModel
        attr_accessor end_date: Time?

        attr_accessor price_id: String

        attr_accessor quantity: Float

        attr_accessor start_date: Time

        def initialize: (
          end_date: Time?,
          price_id: String,
          quantity: Float,
          start_date: Time
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::fixed_fee_quantity_schedule
      end

      type maximum_interval =
        {
          applies_to_price_ids: ::Array[String],
          applies_to_price_interval_ids: ::Array[String],
          end_date: Time?,
          maximum_amount: String,
          start_date: Time
        }

      class MaximumInterval < Orb::BaseModel
        attr_accessor applies_to_price_ids: ::Array[String]

        attr_accessor applies_to_price_interval_ids: ::Array[String]

        attr_accessor end_date: Time?

        attr_accessor maximum_amount: String

        attr_accessor start_date: Time

        def initialize: (
          applies_to_price_ids: ::Array[String],
          applies_to_price_interval_ids: ::Array[String],
          end_date: Time?,
          maximum_amount: String,
          start_date: Time
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::maximum_interval
      end

      type minimum_interval =
        {
          applies_to_price_ids: ::Array[String],
          applies_to_price_interval_ids: ::Array[String],
          end_date: Time?,
          minimum_amount: String,
          start_date: Time
        }

      class MinimumInterval < Orb::BaseModel
        attr_accessor applies_to_price_ids: ::Array[String]

        attr_accessor applies_to_price_interval_ids: ::Array[String]

        attr_accessor end_date: Time?

        attr_accessor minimum_amount: String

        attr_accessor start_date: Time

        def initialize: (
          applies_to_price_ids: ::Array[String],
          applies_to_price_interval_ids: ::Array[String],
          end_date: Time?,
          minimum_amount: String,
          start_date: Time
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::minimum_interval
      end

      type price_interval =
        {
          id: String,
          billing_cycle_day: Integer,
          current_billing_period_end_date: Time?,
          current_billing_period_start_date: Time?,
          end_date: Time?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::PriceInterval::FixedFeeQuantityTransition]?,
          price: Orb::Models::price,
          start_date: Time,
          usage_customer_ids: ::Array[String]?
        }

      class PriceInterval < Orb::BaseModel
        attr_accessor id: String

        attr_accessor billing_cycle_day: Integer

        attr_accessor current_billing_period_end_date: Time?

        attr_accessor current_billing_period_start_date: Time?

        attr_accessor end_date: Time?

        attr_accessor filter: String?

        attr_accessor fixed_fee_quantity_transitions: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::PriceInterval::FixedFeeQuantityTransition]?

        attr_accessor price: Orb::Models::price

        attr_accessor start_date: Time

        attr_accessor usage_customer_ids: ::Array[String]?

        def initialize: (
          id: String,
          billing_cycle_day: Integer,
          current_billing_period_end_date: Time?,
          current_billing_period_start_date: Time?,
          end_date: Time?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::PriceInterval::FixedFeeQuantityTransition]?,
          price: Orb::Models::price,
          start_date: Time,
          usage_customer_ids: ::Array[String]?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::price_interval

        type fixed_fee_quantity_transition =
          { effective_date: Time, price_id: String, quantity: Integer }

        class FixedFeeQuantityTransition < Orb::BaseModel
          attr_accessor effective_date: Time

          attr_accessor price_id: String

          attr_accessor quantity: Integer

          def initialize: (
            effective_date: Time,
            price_id: String,
            quantity: Integer
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::PriceInterval::fixed_fee_quantity_transition
        end
      end

      type redeemed_coupon =
        { coupon_id: String, end_date: Time?, start_date: Time }

      class RedeemedCoupon < Orb::BaseModel
        attr_accessor coupon_id: String

        attr_accessor end_date: Time?

        attr_accessor start_date: Time

        def initialize: (
          coupon_id: String,
          end_date: Time?,
          start_date: Time
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::redeemed_coupon
      end

      type status = :active | :ended | :upcoming

      class Status < Orb::Enum
        ACTIVE: :active
        ENDED: :ended
        UPCOMING: :upcoming

        def self.values: -> ::Array[Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::status]
      end

      type trial_info = { end_date: Time? }

      class TrialInfo < Orb::BaseModel
        attr_accessor end_date: Time?

        def initialize: (end_date: Time?) -> void

        def to_hash: -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse::trial_info
      end
    end
  end
end
