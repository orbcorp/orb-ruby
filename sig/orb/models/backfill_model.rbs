module Orb
  module Models
    type backfill_model =
      {
        id: String,
        close_time: Time?,
        created_at: Time,
        customer_id: String?,
        events_ingested: Integer,
        replace_existing_events: bool,
        reverted_at: Time?,
        status: Orb::Models::BackfillModel::status,
        timeframe_end: Time,
        timeframe_start: Time,
        deprecation_filter: String?
      }

    class BackfillModel < Orb::BaseModel
      attr_accessor id: String

      attr_accessor close_time: Time?

      attr_accessor created_at: Time

      attr_accessor customer_id: String?

      attr_accessor events_ingested: Integer

      attr_accessor replace_existing_events: bool

      attr_accessor reverted_at: Time?

      attr_accessor status: Orb::Models::BackfillModel::status

      attr_accessor timeframe_end: Time

      attr_accessor timeframe_start: Time

      attr_accessor deprecation_filter: String?

      def initialize:
        (
          id: String,
          close_time: Time?,
          created_at: Time,
          customer_id: String?,
          events_ingested: Integer,
          replace_existing_events: bool,
          reverted_at: Time?,
          status: Orb::Models::BackfillModel::status,
          timeframe_end: Time,
          timeframe_start: Time,
          deprecation_filter: String?
        ) -> void
        | (?Orb::Models::backfill_model | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::backfill_model

      type status = :pending | :reflected | :pending_revert | :reverted

      class Status < Orb::Enum
        PENDING: :pending
        REFLECTED: :reflected
        PENDING_REVERT: :pending_revert
        REVERTED: :reverted

        def self.values: -> ::Array[Orb::Models::BackfillModel::status]
      end
    end
  end
end
