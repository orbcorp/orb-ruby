module Orb
  module Models
    type price_interval_model =
      {
        id: String,
        billing_cycle_day: Integer,
        current_billing_period_end_date: Time?,
        current_billing_period_start_date: Time?,
        end_date: Time?,
        filter: String?,
        fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalModel::FixedFeeQuantityTransition]?,
        price: Orb::Models::price_model,
        start_date: Time,
        usage_customer_ids: ::Array[String]?
      }

    class PriceIntervalModel < Orb::BaseModel
      attr_accessor id: String

      attr_accessor billing_cycle_day: Integer

      attr_accessor current_billing_period_end_date: Time?

      attr_accessor current_billing_period_start_date: Time?

      attr_accessor end_date: Time?

      attr_accessor filter: String?

      attr_accessor fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalModel::FixedFeeQuantityTransition]?

      attr_accessor price: Orb::Models::price_model

      attr_accessor start_date: Time

      attr_accessor usage_customer_ids: ::Array[String]?

      def initialize:
        (
          id: String,
          billing_cycle_day: Integer,
          current_billing_period_end_date: Time?,
          current_billing_period_start_date: Time?,
          end_date: Time?,
          filter: String?,
          fixed_fee_quantity_transitions: ::Array[Orb::Models::PriceIntervalModel::FixedFeeQuantityTransition]?,
          price: Orb::Models::price_model,
          start_date: Time,
          usage_customer_ids: ::Array[String]?
        ) -> void
        | (?Orb::Models::price_interval_model | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::price_interval_model

      type fixed_fee_quantity_transition =
        { effective_date: Time, price_id: String, quantity: Integer }

      class FixedFeeQuantityTransition < Orb::BaseModel
        attr_accessor effective_date: Time

        attr_accessor price_id: String

        attr_accessor quantity: Integer

        def initialize:
          (effective_date: Time, price_id: String, quantity: Integer) -> void
          | (
            ?Orb::Models::PriceIntervalModel::fixed_fee_quantity_transition
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::PriceIntervalModel::fixed_fee_quantity_transition
      end
    end
  end
end
