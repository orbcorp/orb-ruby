module Orb
  module Models
    type aggregated_cost_model =
      {
        per_price_costs: ::Array[Orb::Models::AggregatedCostModel::PerPriceCost],
        subtotal: String,
        timeframe_end: Time,
        timeframe_start: Time,
        total: String
      }

    class AggregatedCostModel < Orb::BaseModel
      attr_accessor per_price_costs: ::Array[Orb::Models::AggregatedCostModel::PerPriceCost]

      attr_accessor subtotal: String

      attr_accessor timeframe_end: Time

      attr_accessor timeframe_start: Time

      attr_accessor total: String

      def initialize:
        (
          per_price_costs: ::Array[Orb::Models::AggregatedCostModel::PerPriceCost],
          subtotal: String,
          timeframe_end: Time,
          timeframe_start: Time,
          total: String
        ) -> void
        | (?Orb::Models::aggregated_cost_model | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::aggregated_cost_model

      type per_price_cost =
        {
          price: Orb::Models::price_model,
          price_id: String,
          subtotal: String,
          total: String,
          quantity: Float?
        }

      class PerPriceCost < Orb::BaseModel
        attr_accessor price: Orb::Models::price_model

        attr_accessor price_id: String

        attr_accessor subtotal: String

        attr_accessor total: String

        attr_accessor quantity: Float?

        def initialize:
          (
            price: Orb::Models::price_model,
            price_id: String,
            subtotal: String,
            total: String,
            quantity: Float?
          ) -> void
          | (
            ?Orb::Models::AggregatedCostModel::per_price_cost
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::AggregatedCostModel::per_price_cost
      end
    end
  end
end
