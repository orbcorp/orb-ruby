module Orb
  module Models
    module Plans
      module ExternalPlanID
        type version_create_response =
          {
            adjustments: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::adjustment],
            created_at: Time,
            plan_phases: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase]?,
            prices: ::Array[Orb::Models::price],
            version: Integer
          }

        class VersionCreateResponse < Orb::Internal::Type::BaseModel
          attr_accessor adjustments: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::adjustment]

          attr_accessor created_at: Time

          attr_accessor plan_phases: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase]?

          attr_accessor prices: ::Array[Orb::Models::price]

          attr_accessor version: Integer

          def initialize: (
            adjustments: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::adjustment],
            created_at: Time,
            plan_phases: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase]?,
            prices: ::Array[Orb::Models::price],
            version: Integer
          ) -> void

          def to_hash: -> {
            adjustments: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::adjustment],
            created_at: Time,
            plan_phases: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase]?,
            prices: ::Array[Orb::Models::price],
            version: Integer
          }

          type adjustment =
            Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount
            | Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount
            | Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount
            | Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum
            | Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum

          module Adjustment
            extend Orb::Internal::Type::Union

            type usage_discount =
              {
                id: String,
                adjustment_type: :usage_discount,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter],
                is_invoice_level: bool,
                plan_phase_order: Integer?,
                reason: String?,
                usage_discount: Float
              }

            class UsageDiscount < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor adjustment_type: :usage_discount

              attr_accessor applies_to_price_ids: ::Array[String]

              attr_accessor filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter]

              attr_accessor is_invoice_level: bool

              attr_accessor plan_phase_order: Integer?

              attr_accessor reason: String?

              attr_accessor usage_discount: Float

              def initialize: (
                id: String,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter],
                is_invoice_level: bool,
                plan_phase_order: Integer?,
                reason: String?,
                usage_discount: Float,
                ?adjustment_type: :usage_discount
              ) -> void

              def to_hash: -> {
                id: String,
                adjustment_type: :usage_discount,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter],
                is_invoice_level: bool,
                plan_phase_order: Integer?,
                reason: String?,
                usage_discount: Float
              }

              type filter =
                {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::field

                attr_accessor operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::UsageDiscount::Filter::operator]
                end
              end
            end

            type amount_discount =
              {
                id: String,
                adjustment_type: :amount_discount,
                amount_discount: String,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter],
                is_invoice_level: bool,
                plan_phase_order: Integer?,
                reason: String?
              }

            class AmountDiscount < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor adjustment_type: :amount_discount

              attr_accessor amount_discount: String

              attr_accessor applies_to_price_ids: ::Array[String]

              attr_accessor filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter]

              attr_accessor is_invoice_level: bool

              attr_accessor plan_phase_order: Integer?

              attr_accessor reason: String?

              def initialize: (
                id: String,
                amount_discount: String,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter],
                is_invoice_level: bool,
                plan_phase_order: Integer?,
                reason: String?,
                ?adjustment_type: :amount_discount
              ) -> void

              def to_hash: -> {
                id: String,
                adjustment_type: :amount_discount,
                amount_discount: String,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter],
                is_invoice_level: bool,
                plan_phase_order: Integer?,
                reason: String?
              }

              type filter =
                {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::field

                attr_accessor operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::AmountDiscount::Filter::operator]
                end
              end
            end

            type percentage_discount =
              {
                id: String,
                adjustment_type: :percentage_discount,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter],
                is_invoice_level: bool,
                percentage_discount: Float,
                plan_phase_order: Integer?,
                reason: String?
              }

            class PercentageDiscount < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor adjustment_type: :percentage_discount

              attr_accessor applies_to_price_ids: ::Array[String]

              attr_accessor filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter]

              attr_accessor is_invoice_level: bool

              attr_accessor percentage_discount: Float

              attr_accessor plan_phase_order: Integer?

              attr_accessor reason: String?

              def initialize: (
                id: String,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter],
                is_invoice_level: bool,
                percentage_discount: Float,
                plan_phase_order: Integer?,
                reason: String?,
                ?adjustment_type: :percentage_discount
              ) -> void

              def to_hash: -> {
                id: String,
                adjustment_type: :percentage_discount,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter],
                is_invoice_level: bool,
                percentage_discount: Float,
                plan_phase_order: Integer?,
                reason: String?
              }

              type filter =
                {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::field

                attr_accessor operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::PercentageDiscount::Filter::operator]
                end
              end
            end

            type minimum =
              {
                id: String,
                adjustment_type: :minimum,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter],
                is_invoice_level: bool,
                item_id: String,
                minimum_amount: String,
                plan_phase_order: Integer?,
                reason: String?
              }

            class Minimum < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor adjustment_type: :minimum

              attr_accessor applies_to_price_ids: ::Array[String]

              attr_accessor filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter]

              attr_accessor is_invoice_level: bool

              attr_accessor item_id: String

              attr_accessor minimum_amount: String

              attr_accessor plan_phase_order: Integer?

              attr_accessor reason: String?

              def initialize: (
                id: String,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter],
                is_invoice_level: bool,
                item_id: String,
                minimum_amount: String,
                plan_phase_order: Integer?,
                reason: String?,
                ?adjustment_type: :minimum
              ) -> void

              def to_hash: -> {
                id: String,
                adjustment_type: :minimum,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter],
                is_invoice_level: bool,
                item_id: String,
                minimum_amount: String,
                plan_phase_order: Integer?,
                reason: String?
              }

              type filter =
                {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::field

                attr_accessor operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Minimum::Filter::operator]
                end
              end
            end

            type maximum =
              {
                id: String,
                adjustment_type: :maximum,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter],
                is_invoice_level: bool,
                maximum_amount: String,
                plan_phase_order: Integer?,
                reason: String?
              }

            class Maximum < Orb::Internal::Type::BaseModel
              attr_accessor id: String

              attr_accessor adjustment_type: :maximum

              attr_accessor applies_to_price_ids: ::Array[String]

              attr_accessor filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter]

              attr_accessor is_invoice_level: bool

              attr_accessor maximum_amount: String

              attr_accessor plan_phase_order: Integer?

              attr_accessor reason: String?

              def initialize: (
                id: String,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter],
                is_invoice_level: bool,
                maximum_amount: String,
                plan_phase_order: Integer?,
                reason: String?,
                ?adjustment_type: :maximum
              ) -> void

              def to_hash: -> {
                id: String,
                adjustment_type: :maximum,
                applies_to_price_ids: ::Array[String],
                filters: ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter],
                is_invoice_level: bool,
                maximum_amount: String,
                plan_phase_order: Integer?,
                reason: String?
              }

              type filter =
                {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::field

                attr_accessor operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::Adjustment::Maximum::Filter::operator]
                end
              end
            end

            def self?.variants: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::adjustment]
          end

          type plan_phase =
            {
              id: String,
              description: String?,
              duration: Integer?,
              duration_unit: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase::duration_unit?,
              name: String,
              order: Integer
            }

          class PlanPhase < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor description: String?

            attr_accessor duration: Integer?

            attr_accessor duration_unit: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase::duration_unit?

            attr_accessor name: String

            attr_accessor order: Integer

            def initialize: (
              id: String,
              description: String?,
              duration: Integer?,
              duration_unit: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase::duration_unit?,
              name: String,
              order: Integer
            ) -> void

            def to_hash: -> {
              id: String,
              description: String?,
              duration: Integer?,
              duration_unit: Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase::duration_unit?,
              name: String,
              order: Integer
            }

            type duration_unit =
              :daily | :monthly | :quarterly | :semi_annual | :annual

            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAILY: :daily
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              SEMI_ANNUAL: :semi_annual
              ANNUAL: :annual

              def self?.values: -> ::Array[Orb::Models::Plans::ExternalPlanID::VersionCreateResponse::PlanPhase::duration_unit]
            end
          end
        end
      end
    end
  end
end
