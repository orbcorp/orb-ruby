module Orb
  module Models
    type event_search_response =
      { data: ::Array[Orb::Models::EventSearchResponse::Data] }

    class EventSearchResponse < Orb::Internal::Type::BaseModel
      attr_accessor data: ::Array[Orb::Models::EventSearchResponse::Data]

      def initialize: (
        data: ::Array[Orb::Models::EventSearchResponse::Data]
      ) -> void

      def to_hash: -> { data: ::Array[Orb::Models::EventSearchResponse::Data] }

      type data =
        {
          id: String,
          customer_id: String?,
          deprecated: bool,
          event_name: String,
          external_customer_id: String?,
          properties: ::Hash[Symbol, top],
          timestamp: Time
        }

      class Data < Orb::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor customer_id: String?

        attr_accessor deprecated: bool

        attr_accessor event_name: String

        attr_accessor external_customer_id: String?

        attr_accessor properties: ::Hash[Symbol, top]

        attr_accessor timestamp: Time

        def initialize: (
          id: String,
          customer_id: String?,
          deprecated: bool,
          event_name: String,
          external_customer_id: String?,
          properties: ::Hash[Symbol, top],
          timestamp: Time
        ) -> void

        def to_hash: -> {
          id: String,
          customer_id: String?,
          deprecated: bool,
          event_name: String,
          external_customer_id: String?,
          properties: ::Hash[Symbol, top],
          timestamp: Time
        }
      end
    end
  end
end
