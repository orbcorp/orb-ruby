module Orb
  module Models
    type alert_create_for_customer_params =
      {
        currency: String,
        type: Orb::Models::AlertCreateForCustomerParams::type_,
        thresholds: ::Array[Orb::Models::AlertCreateForCustomerParams::Threshold]?
      }
      & Orb::Internal::Type::request_parameters

    class AlertCreateForCustomerParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor currency: String

      attr_accessor type: Orb::Models::AlertCreateForCustomerParams::type_

      attr_accessor thresholds: ::Array[Orb::Models::AlertCreateForCustomerParams::Threshold]?

      def initialize: (
        currency: String,
        type: Orb::Models::AlertCreateForCustomerParams::type_,
        ?thresholds: ::Array[Orb::Models::AlertCreateForCustomerParams::Threshold]?,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> Orb::Models::alert_create_for_customer_params

      type type_ =
        :credit_balance_depleted
        | :credit_balance_dropped
        | :credit_balance_recovered

      module Type
        extend Orb::Internal::Type::Enum

        CREDIT_BALANCE_DEPLETED: :credit_balance_depleted
        CREDIT_BALANCE_DROPPED: :credit_balance_dropped
        CREDIT_BALANCE_RECOVERED: :credit_balance_recovered

        def self?.values: -> ::Array[Orb::Models::AlertCreateForCustomerParams::type_]
      end

      type threshold = { value: Float }

      class Threshold < Orb::Internal::Type::BaseModel
        attr_accessor value: Float

        def initialize: (value: Float) -> void

        def to_hash: -> Orb::Models::AlertCreateForCustomerParams::threshold
      end
    end
  end
end
