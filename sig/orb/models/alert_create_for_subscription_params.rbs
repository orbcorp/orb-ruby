module Orb
  module Models
    type alert_create_for_subscription_params =
      {
        thresholds: ::Array[Orb::Models::AlertCreateForSubscriptionParams::Threshold],
        type: Orb::Models::AlertCreateForSubscriptionParams::type_,
        metric_id: String?
      }
      & Orb::Internal::Type::request_parameters

    class AlertCreateForSubscriptionParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor thresholds: ::Array[Orb::Models::AlertCreateForSubscriptionParams::Threshold]

      attr_accessor type: Orb::Models::AlertCreateForSubscriptionParams::type_

      attr_accessor metric_id: String?

      def initialize: (
        thresholds: ::Array[Orb::Models::AlertCreateForSubscriptionParams::Threshold],
        type: Orb::Models::AlertCreateForSubscriptionParams::type_,
        ?metric_id: String?,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> Orb::Models::alert_create_for_subscription_params

      type threshold = { value: Float }

      class Threshold < Orb::Internal::Type::BaseModel
        attr_accessor value: Float

        def initialize: (value: Float) -> void

        def to_hash: -> Orb::Models::AlertCreateForSubscriptionParams::threshold
      end

      type type_ = :usage_exceeded | :cost_exceeded

      module Type
        extend Orb::Internal::Type::Enum

        USAGE_EXCEEDED: :usage_exceeded
        COST_EXCEEDED: :cost_exceeded

        def self?.values: -> ::Array[Orb::Models::AlertCreateForSubscriptionParams::type_]
      end
    end
  end
end
