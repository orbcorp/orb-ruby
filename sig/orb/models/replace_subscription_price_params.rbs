module Orb
  module Models
    type replace_subscription_price_params =
      {
        replaces_price_id: String,
        allocation_price: Orb::Models::NewAllocationPriceModel?,
        discounts: ::Array[Orb::Models::DiscountOverrideModel]?,
        external_price_id: String?,
        fixed_price_quantity: Float?,
        maximum_amount: String?,
        minimum_amount: String?,
        price: Orb::Models::new_subscription_price_model?,
        price_id: String?
      }

    class ReplaceSubscriptionPriceParams < Orb::BaseModel
      attr_accessor replaces_price_id: String

      attr_accessor allocation_price: Orb::Models::NewAllocationPriceModel?

      attr_accessor discounts: ::Array[Orb::Models::DiscountOverrideModel]?

      attr_accessor external_price_id: String?

      attr_accessor fixed_price_quantity: Float?

      attr_accessor maximum_amount: String?

      attr_accessor minimum_amount: String?

      attr_accessor price: Orb::Models::new_subscription_price_model?

      attr_accessor price_id: String?

      def initialize:
        (
          replaces_price_id: String,
          allocation_price: Orb::Models::NewAllocationPriceModel?,
          discounts: ::Array[Orb::Models::DiscountOverrideModel]?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          maximum_amount: String?,
          minimum_amount: String?,
          price: Orb::Models::new_subscription_price_model?,
          price_id: String?
        ) -> void
        | (
          ?Orb::Models::replace_subscription_price_params | Orb::BaseModel data
        ) -> void

      def to_hash: -> Orb::Models::replace_subscription_price_params
    end
  end
end
