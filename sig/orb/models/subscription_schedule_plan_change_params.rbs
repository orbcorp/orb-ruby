module Orb
  module Models
    type subscription_schedule_plan_change_params =
      {
        change_option: Orb::Models::SubscriptionSchedulePlanChangeParams::change_option,
        add_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment]?,
        add_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice]?,
        align_billing_with_plan_change_date: bool?,
        auto_collection: bool?,
        billing_cycle_alignment: Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment?,
        billing_cycle_anchor_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::BillingCycleAnchorConfiguration?,
        change_date: Time?,
        coupon_redemption_code: String?,
        credits_overage_rate: Float?,
        default_invoice_memo: String?,
        external_plan_id: String?,
        filter: String?,
        initial_phase_order: Integer?,
        invoicing_threshold: String?,
        net_terms: Integer?,
        per_credit_overage_amount: Float?,
        plan_id: String?,
        plan_version_number: Integer?,
        price_overrides: ::Array[top]?,
        remove_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemoveAdjustment]?,
        remove_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemovePrice]?,
        replace_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment]?,
        replace_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice]?,
        trial_duration_days: Integer?,
        usage_customer_ids: ::Array[String]?
      }
      & Orb::Internal::Type::request_parameters

    class SubscriptionSchedulePlanChangeParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor change_option: Orb::Models::SubscriptionSchedulePlanChangeParams::change_option

      attr_accessor add_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment]?

      attr_accessor add_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice]?

      attr_accessor align_billing_with_plan_change_date: bool?

      attr_accessor auto_collection: bool?

      attr_accessor billing_cycle_alignment: Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment?

      attr_accessor billing_cycle_anchor_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::BillingCycleAnchorConfiguration?

      attr_accessor change_date: Time?

      attr_accessor coupon_redemption_code: String?

      attr_accessor credits_overage_rate: Float?

      attr_accessor default_invoice_memo: String?

      attr_accessor external_plan_id: String?

      attr_accessor filter: String?

      attr_accessor initial_phase_order: Integer?

      attr_accessor invoicing_threshold: String?

      attr_accessor net_terms: Integer?

      attr_accessor per_credit_overage_amount: Float?

      attr_accessor plan_id: String?

      attr_accessor plan_version_number: Integer?

      attr_accessor price_overrides: ::Array[top]?

      attr_accessor remove_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemoveAdjustment]?

      attr_accessor remove_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemovePrice]?

      attr_accessor replace_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment]?

      attr_accessor replace_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice]?

      attr_accessor trial_duration_days: Integer?

      attr_accessor usage_customer_ids: ::Array[String]?

      def initialize: (
        change_option: Orb::Models::SubscriptionSchedulePlanChangeParams::change_option,
        ?add_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment]?,
        ?add_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice]?,
        ?align_billing_with_plan_change_date: bool?,
        ?auto_collection: bool?,
        ?billing_cycle_alignment: Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment?,
        ?billing_cycle_anchor_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::BillingCycleAnchorConfiguration?,
        ?change_date: Time?,
        ?coupon_redemption_code: String?,
        ?credits_overage_rate: Float?,
        ?default_invoice_memo: String?,
        ?external_plan_id: String?,
        ?filter: String?,
        ?initial_phase_order: Integer?,
        ?invoicing_threshold: String?,
        ?net_terms: Integer?,
        ?per_credit_overage_amount: Float?,
        ?plan_id: String?,
        ?plan_version_number: Integer?,
        ?price_overrides: ::Array[top]?,
        ?remove_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemoveAdjustment]?,
        ?remove_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemovePrice]?,
        ?replace_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment]?,
        ?replace_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice]?,
        ?trial_duration_days: Integer?,
        ?usage_customer_ids: ::Array[String]?,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> Orb::Models::subscription_schedule_plan_change_params

      type change_option =
        :requested_date | :end_of_subscription_term | :immediate

      module ChangeOption
        extend Orb::Internal::Type::Enum

        REQUESTED_DATE: :requested_date
        END_OF_SUBSCRIPTION_TERM: :end_of_subscription_term
        IMMEDIATE: :immediate

        def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::change_option]
      end

      type add_adjustment =
        {
          adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::adjustment,
          end_date: Time?,
          plan_phase_order: Integer?,
          start_date: Time?
        }

      class AddAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::adjustment

        attr_accessor end_date: Time?

        attr_accessor plan_phase_order: Integer?

        attr_accessor start_date: Time?

        def initialize: (
          adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::adjustment,
          ?end_date: Time?,
          ?plan_phase_order: Integer?,
          ?start_date: Time?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::add_adjustment

        type adjustment =
          Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::PercentageDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::UsageDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::AmountDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::Minimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::Maximum

        module Adjustment
          extend Orb::Internal::Type::Union

          type percentage_discount =
            {
              adjustment_type: :percentage_discount,
              applies_to_price_ids: ::Array[String],
              percentage_discount: Float,
              is_invoice_level: bool
            }

          class PercentageDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :percentage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor percentage_discount: Float

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              percentage_discount: Float,
              ?is_invoice_level: bool,
              ?adjustment_type: :percentage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::percentage_discount
          end

          type usage_discount =
            {
              adjustment_type: :usage_discount,
              applies_to_price_ids: ::Array[String],
              usage_discount: Float,
              is_invoice_level: bool
            }

          class UsageDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :usage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor usage_discount: Float

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              usage_discount: Float,
              ?is_invoice_level: bool,
              ?adjustment_type: :usage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::usage_discount
          end

          type amount_discount =
            {
              adjustment_type: :amount_discount,
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool
            }

          class AmountDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :amount_discount

            attr_accessor amount_discount: String

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              ?is_invoice_level: bool,
              ?adjustment_type: :amount_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::amount_discount
          end

          type minimum =
            {
              adjustment_type: :minimum,
              applies_to_price_ids: ::Array[String],
              item_id: String,
              minimum_amount: String,
              is_invoice_level: bool
            }

          class Minimum < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :minimum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor item_id: String

            attr_accessor minimum_amount: String

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              item_id: String,
              minimum_amount: String,
              ?is_invoice_level: bool,
              ?adjustment_type: :minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::minimum
          end

          type maximum =
            {
              adjustment_type: :maximum,
              applies_to_price_ids: ::Array[String],
              maximum_amount: String,
              is_invoice_level: bool
            }

          class Maximum < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :maximum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor maximum_amount: String

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              maximum_amount: String,
              ?is_invoice_level: bool,
              ?adjustment_type: :maximum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::maximum
          end

          def self?.variants: -> [Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::PercentageDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::UsageDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::AmountDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::Minimum, Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::Maximum]
        end
      end

      type add_price =
        {
          allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice?,
          discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount]?,
          end_date: Time?,
          external_price_id: String?,
          maximum_amount: String?,
          minimum_amount: String?,
          plan_phase_order: Integer?,
          price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::price?,
          price_id: String?,
          start_date: Time?
        }

      class AddPrice < Orb::Internal::Type::BaseModel
        attr_accessor allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice?

        attr_accessor discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount]?

        attr_accessor end_date: Time?

        attr_accessor external_price_id: String?

        attr_accessor maximum_amount: String?

        attr_accessor minimum_amount: String?

        attr_accessor plan_phase_order: Integer?

        attr_accessor price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::price?

        attr_accessor price_id: String?

        attr_accessor start_date: Time?

        def initialize: (
          ?allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice?,
          ?discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount]?,
          ?end_date: Time?,
          ?external_price_id: String?,
          ?maximum_amount: String?,
          ?minimum_amount: String?,
          ?plan_phase_order: Integer?,
          ?price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::price?,
          ?price_id: String?,
          ?start_date: Time?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::add_price

        type allocation_price =
          {
            amount: String,
            cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          }

        class AllocationPrice < Orb::Internal::Type::BaseModel
          attr_accessor amount: String

          attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice::cadence

          attr_accessor currency: String

          attr_accessor expires_at_end_of_cadence: bool

          def initialize: (
            amount: String,
            cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::allocation_price

          type cadence =
            :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ONE_TIME: :one_time
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            SEMI_ANNUAL: :semi_annual
            ANNUAL: :annual
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice::cadence]
          end
        end

        type discount =
          {
            discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount::discount_type,
            amount_discount: String?,
            percentage_discount: Float?,
            usage_discount: Float?
          }

        class Discount < Orb::Internal::Type::BaseModel
          attr_accessor discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount::discount_type

          attr_accessor amount_discount: String?

          attr_accessor percentage_discount: Float?

          attr_accessor usage_discount: Float?

          def initialize: (
            discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount::discount_type,
            ?amount_discount: String?,
            ?percentage_discount: Float?,
            ?usage_discount: Float?
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::discount

          type discount_type = :percentage | :usage | :amount

          module DiscountType
            extend Orb::Internal::Type::Enum

            PERCENTAGE: :percentage
            USAGE: :usage
            AMOUNT: :amount

            def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount::discount_type]
          end
        end

        type price =
          Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage

        module Price
          extend Orb::Internal::Type::Union

          type unit =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::cadence,
              item_id: String,
              model_type: :unit,
              name: String,
              unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::UnitConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Unit < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit

            attr_accessor name: String

            attr_accessor unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::UnitConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::cadence,
              item_id: String,
              name: String,
              unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::UnitConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::unit

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::cadence]
            end

            type unit_config = { unit_amount: String }

            class UnitConfig < Orb::Internal::Type::BaseModel
              attr_accessor unit_amount: String

              def initialize: (unit_amount: String) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::unit_config
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type package =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::cadence,
              item_id: String,
              model_type: :package,
              name: String,
              package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::PackageConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Package < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :package

            attr_accessor name: String

            attr_accessor package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::PackageConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::cadence,
              item_id: String,
              name: String,
              package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::PackageConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::package

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::cadence]
            end

            type package_config =
              { package_amount: String, package_size: Integer }

            class PackageConfig < Orb::Internal::Type::BaseModel
              attr_accessor package_amount: String

              attr_accessor package_size: Integer

              def initialize: (
                package_amount: String,
                package_size: Integer
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::package_config
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type matrix =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::cadence,
              item_id: String,
              matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::MatrixConfig,
              model_type: :matrix,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Matrix < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::cadence

            attr_accessor item_id: String

            attr_accessor matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::MatrixConfig

            attr_accessor model_type: :matrix

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::cadence,
              item_id: String,
              matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::MatrixConfig,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :matrix
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::matrix

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::cadence]
            end

            type matrix_config =
              {
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue]
              }

            class MatrixConfig < Orb::Internal::Type::BaseModel
              attr_accessor default_unit_amount: String

              attr_accessor dimensions: ::Array[String?]

              attr_accessor matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue]

              def initialize: (
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::matrix_config

              type matrix_value =
                { dimension_values: ::Array[String?], unit_amount: String }

              class MatrixValue < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String?]

                attr_accessor unit_amount: String

                def initialize: (
                  dimension_values: ::Array[String?],
                  unit_amount: String
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::MatrixConfig::matrix_value
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::cadence,
              item_id: String,
              model_type: :tiered,
              name: String,
              tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::TieredConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Tiered < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered

            attr_accessor name: String

            attr_accessor tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::TieredConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::cadence,
              item_id: String,
              name: String,
              tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::TieredConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::tiered

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::cadence]
            end

            type tiered_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::TieredConfig::Tier]
              }

            class TieredConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::TieredConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::TieredConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::tiered_config

              type tier =
                { first_unit: Float, unit_amount: String, last_unit: Float? }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor first_unit: Float

                attr_accessor unit_amount: String

                attr_accessor last_unit: Float?

                def initialize: (
                  first_unit: Float,
                  unit_amount: String,
                  ?last_unit: Float?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::TieredConfig::tier
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_bps =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::cadence,
              item_id: String,
              model_type: :tiered_bps,
              name: String,
              tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::TieredBpsConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class TieredBps < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_bps

            attr_accessor name: String

            attr_accessor tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::TieredBpsConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::cadence,
              item_id: String,
              name: String,
              tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::TieredBpsConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::tiered_bps

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::cadence]
            end

            type tiered_bps_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier]
              }

            class TieredBpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::tiered_bps_config

              type tier =
                {
                  bps: Float,
                  minimum_amount: String,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor bps: Float

                attr_accessor minimum_amount: String

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  minimum_amount: String,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::TieredBpsConfig::tier
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bps =
            {
              bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::cadence,
              item_id: String,
              model_type: :bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Bps < Orb::Internal::Type::BaseModel
            attr_accessor bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::bps

            type bps_config = { bps: Float, per_unit_maximum: String? }

            class BpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor bps: Float

              attr_accessor per_unit_maximum: String?

              def initialize: (bps: Float, ?per_unit_maximum: String?) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::bps_config
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk_bps =
            {
              bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::cadence,
              item_id: String,
              model_type: :bulk_bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class BulkBps < Orb::Internal::Type::BaseModel
            attr_accessor bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BulkBpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk_bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::bulk_bps

            type bulk_bps_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier]
              }

            class BulkBpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::bulk_bps_config

              type tier =
                {
                  bps: Float,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor bps: Float

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BulkBpsConfig::tier
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk =
            {
              bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BulkConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::cadence,
              item_id: String,
              model_type: :bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Bulk < Orb::Internal::Type::BaseModel
            attr_accessor bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BulkConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BulkConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::bulk

            type bulk_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BulkConfig::Tier]
              }

            class BulkConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BulkConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BulkConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::bulk_config

              type tier = { unit_amount: String, maximum_units: Float? }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor unit_amount: String

                attr_accessor maximum_units: Float?

                def initialize: (
                  unit_amount: String,
                  ?maximum_units: Float?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BulkConfig::tier
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type threshold_total_amount =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::cadence,
              item_id: String,
              model_type: :threshold_total_amount,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :threshold_total_amount

            attr_accessor name: String

            attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::cadence,
              item_id: String,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :threshold_total_amount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::threshold_total_amount

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_package =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::cadence,
              item_id: String,
              model_type: :tiered_package,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class TieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_package

            attr_accessor name: String

            attr_accessor tiered_package_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::cadence,
              item_id: String,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::tiered_package

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_with_minimum =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::cadence,
              item_id: String,
              model_type: :tiered_with_minimum,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class TieredWithMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_minimum

            attr_accessor name: String

            attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::cadence,
              item_id: String,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_with_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::tiered_with_minimum

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type unit_with_percent =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::cadence,
              item_id: String,
              model_type: :unit_with_percent,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class UnitWithPercent < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_percent

            attr_accessor name: String

            attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::cadence,
              item_id: String,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit_with_percent
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::unit_with_percent

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type package_with_allocation =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::cadence,
              item_id: String,
              model_type: :package_with_allocation,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class PackageWithAllocation < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :package_with_allocation

            attr_accessor name: String

            attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::cadence,
              item_id: String,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :package_with_allocation
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::package_with_allocation

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_with_proration =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::cadence,
              item_id: String,
              model_type: :tiered_with_proration,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class TieredWithProration < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_proration

            attr_accessor name: String

            attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::cadence,
              item_id: String,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::tiered_with_proration

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type unit_with_proration =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::cadence,
              item_id: String,
              model_type: :unit_with_proration,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class UnitWithProration < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_proration

            attr_accessor name: String

            attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::cadence,
              item_id: String,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::unit_with_proration

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_allocation =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_allocation,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class GroupedAllocation < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::cadence

            attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_allocation

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_allocation
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::grouped_allocation

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_with_prorated_minimum =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_prorated_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::cadence

            attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_prorated_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_with_prorated_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::grouped_with_prorated_minimum

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk_with_proration =
            {
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::cadence,
              item_id: String,
              model_type: :bulk_with_proration,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class BulkWithProration < Orb::Internal::Type::BaseModel
            attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_with_proration

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::bulk_with_proration

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type scalable_matrix_with_unit_pricing =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence,
              item_id: String,
              model_type: :scalable_matrix_with_unit_pricing,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_unit_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :scalable_matrix_with_unit_pricing
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::scalable_matrix_with_unit_pricing

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type scalable_matrix_with_tiered_pricing =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence,
              item_id: String,
              model_type: :scalable_matrix_with_tiered_pricing,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_tiered_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :scalable_matrix_with_tiered_pricing
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::scalable_matrix_with_tiered_pricing

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type cumulative_grouped_bulk =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :cumulative_grouped_bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::cadence

            attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :cumulative_grouped_bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :cumulative_grouped_bulk
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::cumulative_grouped_bulk

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type max_group_tiered_package =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              model_type: :max_group_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::cadence

            attr_accessor item_id: String

            attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor model_type: :max_group_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :max_group_tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::max_group_tiered_package

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_with_metered_minimum =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_metered_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence

            attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_metered_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_with_metered_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::grouped_with_metered_minimum

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type matrix_with_display_name =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              model_type: :matrix_with_display_name,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::cadence

            attr_accessor item_id: String

            attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

            attr_accessor model_type: :matrix_with_display_name

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :matrix_with_display_name
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::matrix_with_display_name

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_tiered_package =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class GroupedTieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::cadence

            attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::grouped_tiered_package

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          def self?.variants: -> [Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Unit, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Package, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Matrix, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Tiered, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredBps, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bps, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkBps, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::Bulk, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ThresholdTotalAmount, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredPackage, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithMinimum, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithPercent, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::PackageWithAllocation, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::TieredWithProration, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::UnitWithProration, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedAllocation, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithProratedMinimum, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::BulkWithProration, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithUnitPricing, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::ScalableMatrixWithTieredPricing, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::CumulativeGroupedBulk, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MaxGroupTieredPackage, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedWithMeteredMinimum, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::MatrixWithDisplayName, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::GroupedTieredPackage]
        end
      end

      type billing_cycle_alignment =
        :unchanged | :plan_change_date | :start_of_month

      module BillingCycleAlignment
        extend Orb::Internal::Type::Enum

        UNCHANGED: :unchanged
        PLAN_CHANGE_DATE: :plan_change_date
        START_OF_MONTH: :start_of_month

        def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment]
      end

      type billing_cycle_anchor_configuration =
        { day: Integer, month: Integer?, year: Integer? }

      class BillingCycleAnchorConfiguration < Orb::Internal::Type::BaseModel
        attr_accessor day: Integer

        attr_accessor month: Integer?

        attr_accessor year: Integer?

        def initialize: (
          day: Integer,
          ?month: Integer?,
          ?year: Integer?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_anchor_configuration
      end

      type remove_adjustment = { adjustment_id: String }

      class RemoveAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment_id: String

        def initialize: (adjustment_id: String) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::remove_adjustment
      end

      type remove_price = { external_price_id: String?, price_id: String? }

      class RemovePrice < Orb::Internal::Type::BaseModel
        attr_accessor external_price_id: String?

        attr_accessor price_id: String?

        def initialize: (
          ?external_price_id: String?,
          ?price_id: String?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::remove_price
      end

      type replace_adjustment =
        {
          adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::adjustment,
          replaces_adjustment_id: String
        }

      class ReplaceAdjustment < Orb::Internal::Type::BaseModel
        attr_accessor adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::adjustment

        attr_accessor replaces_adjustment_id: String

        def initialize: (
          adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::adjustment,
          replaces_adjustment_id: String
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::replace_adjustment

        type adjustment =
          Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::PercentageDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::UsageDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::AmountDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::Minimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::Maximum

        module Adjustment
          extend Orb::Internal::Type::Union

          type percentage_discount =
            {
              adjustment_type: :percentage_discount,
              applies_to_price_ids: ::Array[String],
              percentage_discount: Float,
              is_invoice_level: bool
            }

          class PercentageDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :percentage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor percentage_discount: Float

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              percentage_discount: Float,
              ?is_invoice_level: bool,
              ?adjustment_type: :percentage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::percentage_discount
          end

          type usage_discount =
            {
              adjustment_type: :usage_discount,
              applies_to_price_ids: ::Array[String],
              usage_discount: Float,
              is_invoice_level: bool
            }

          class UsageDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :usage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor usage_discount: Float

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              usage_discount: Float,
              ?is_invoice_level: bool,
              ?adjustment_type: :usage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::usage_discount
          end

          type amount_discount =
            {
              adjustment_type: :amount_discount,
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool
            }

          class AmountDiscount < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :amount_discount

            attr_accessor amount_discount: String

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              ?is_invoice_level: bool,
              ?adjustment_type: :amount_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::amount_discount
          end

          type minimum =
            {
              adjustment_type: :minimum,
              applies_to_price_ids: ::Array[String],
              item_id: String,
              minimum_amount: String,
              is_invoice_level: bool
            }

          class Minimum < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :minimum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor item_id: String

            attr_accessor minimum_amount: String

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              item_id: String,
              minimum_amount: String,
              ?is_invoice_level: bool,
              ?adjustment_type: :minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::minimum
          end

          type maximum =
            {
              adjustment_type: :maximum,
              applies_to_price_ids: ::Array[String],
              maximum_amount: String,
              is_invoice_level: bool
            }

          class Maximum < Orb::Internal::Type::BaseModel
            attr_accessor adjustment_type: :maximum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor maximum_amount: String

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              maximum_amount: String,
              ?is_invoice_level: bool,
              ?adjustment_type: :maximum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::maximum
          end

          def self?.variants: -> [Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::PercentageDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::UsageDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::AmountDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::Minimum, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::Maximum]
        end
      end

      type replace_price =
        {
          replaces_price_id: String,
          allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice?,
          discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount]?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          maximum_amount: String?,
          minimum_amount: String?,
          price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::price?,
          price_id: String?
        }

      class ReplacePrice < Orb::Internal::Type::BaseModel
        attr_accessor replaces_price_id: String

        attr_accessor allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice?

        attr_accessor discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount]?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor maximum_amount: String?

        attr_accessor minimum_amount: String?

        attr_accessor price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::price?

        attr_accessor price_id: String?

        def initialize: (
          replaces_price_id: String,
          ?allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice?,
          ?discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount]?,
          ?external_price_id: String?,
          ?fixed_price_quantity: Float?,
          ?maximum_amount: String?,
          ?minimum_amount: String?,
          ?price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::price?,
          ?price_id: String?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::replace_price

        type allocation_price =
          {
            amount: String,
            cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          }

        class AllocationPrice < Orb::Internal::Type::BaseModel
          attr_accessor amount: String

          attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice::cadence

          attr_accessor currency: String

          attr_accessor expires_at_end_of_cadence: bool

          def initialize: (
            amount: String,
            cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::allocation_price

          type cadence =
            :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

          module Cadence
            extend Orb::Internal::Type::Enum

            ONE_TIME: :one_time
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            SEMI_ANNUAL: :semi_annual
            ANNUAL: :annual
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice::cadence]
          end
        end

        type discount =
          {
            discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount::discount_type,
            amount_discount: String?,
            percentage_discount: Float?,
            usage_discount: Float?
          }

        class Discount < Orb::Internal::Type::BaseModel
          attr_accessor discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount::discount_type

          attr_accessor amount_discount: String?

          attr_accessor percentage_discount: Float?

          attr_accessor usage_discount: Float?

          def initialize: (
            discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount::discount_type,
            ?amount_discount: String?,
            ?percentage_discount: Float?,
            ?usage_discount: Float?
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::discount

          type discount_type = :percentage | :usage | :amount

          module DiscountType
            extend Orb::Internal::Type::Enum

            PERCENTAGE: :percentage
            USAGE: :usage
            AMOUNT: :amount

            def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount::discount_type]
          end
        end

        type price =
          Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage

        module Price
          extend Orb::Internal::Type::Union

          type unit =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::cadence,
              item_id: String,
              model_type: :unit,
              name: String,
              unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::UnitConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Unit < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit

            attr_accessor name: String

            attr_accessor unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::UnitConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::cadence,
              item_id: String,
              name: String,
              unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::UnitConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::unit

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::cadence]
            end

            type unit_config = { unit_amount: String }

            class UnitConfig < Orb::Internal::Type::BaseModel
              attr_accessor unit_amount: String

              def initialize: (unit_amount: String) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::unit_config
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type package =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::cadence,
              item_id: String,
              model_type: :package,
              name: String,
              package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::PackageConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Package < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :package

            attr_accessor name: String

            attr_accessor package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::PackageConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::cadence,
              item_id: String,
              name: String,
              package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::PackageConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::package

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::cadence]
            end

            type package_config =
              { package_amount: String, package_size: Integer }

            class PackageConfig < Orb::Internal::Type::BaseModel
              attr_accessor package_amount: String

              attr_accessor package_size: Integer

              def initialize: (
                package_amount: String,
                package_size: Integer
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::package_config
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type matrix =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::cadence,
              item_id: String,
              matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::MatrixConfig,
              model_type: :matrix,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Matrix < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::cadence

            attr_accessor item_id: String

            attr_accessor matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::MatrixConfig

            attr_accessor model_type: :matrix

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::cadence,
              item_id: String,
              matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::MatrixConfig,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :matrix
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::matrix

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::cadence]
            end

            type matrix_config =
              {
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue]
              }

            class MatrixConfig < Orb::Internal::Type::BaseModel
              attr_accessor default_unit_amount: String

              attr_accessor dimensions: ::Array[String?]

              attr_accessor matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue]

              def initialize: (
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::matrix_config

              type matrix_value =
                { dimension_values: ::Array[String?], unit_amount: String }

              class MatrixValue < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String?]

                attr_accessor unit_amount: String

                def initialize: (
                  dimension_values: ::Array[String?],
                  unit_amount: String
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::MatrixConfig::matrix_value
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::cadence,
              item_id: String,
              model_type: :tiered,
              name: String,
              tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::TieredConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Tiered < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered

            attr_accessor name: String

            attr_accessor tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::TieredConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::cadence,
              item_id: String,
              name: String,
              tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::TieredConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::tiered

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::cadence]
            end

            type tiered_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::TieredConfig::Tier]
              }

            class TieredConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::TieredConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::TieredConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::tiered_config

              type tier =
                { first_unit: Float, unit_amount: String, last_unit: Float? }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor first_unit: Float

                attr_accessor unit_amount: String

                attr_accessor last_unit: Float?

                def initialize: (
                  first_unit: Float,
                  unit_amount: String,
                  ?last_unit: Float?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::TieredConfig::tier
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_bps =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::cadence,
              item_id: String,
              model_type: :tiered_bps,
              name: String,
              tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class TieredBps < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_bps

            attr_accessor name: String

            attr_accessor tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::TieredBpsConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::cadence,
              item_id: String,
              name: String,
              tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::tiered_bps

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::cadence]
            end

            type tiered_bps_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier]
              }

            class TieredBpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::tiered_bps_config

              type tier =
                {
                  bps: Float,
                  minimum_amount: String,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor bps: Float

                attr_accessor minimum_amount: String

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  minimum_amount: String,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::tier
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bps =
            {
              bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::cadence,
              item_id: String,
              model_type: :bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Bps < Orb::Internal::Type::BaseModel
            attr_accessor bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::bps

            type bps_config = { bps: Float, per_unit_maximum: String? }

            class BpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor bps: Float

              attr_accessor per_unit_maximum: String?

              def initialize: (bps: Float, ?per_unit_maximum: String?) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::bps_config
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk_bps =
            {
              bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::cadence,
              item_id: String,
              model_type: :bulk_bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class BulkBps < Orb::Internal::Type::BaseModel
            attr_accessor bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BulkBpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk_bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::bulk_bps

            type bulk_bps_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier]
              }

            class BulkBpsConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::bulk_bps_config

              type tier =
                {
                  bps: Float,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor bps: Float

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::tier
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk =
            {
              bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BulkConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::cadence,
              item_id: String,
              model_type: :bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class Bulk < Orb::Internal::Type::BaseModel
            attr_accessor bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BulkConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BulkConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::bulk

            type bulk_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BulkConfig::Tier]
              }

            class BulkConfig < Orb::Internal::Type::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BulkConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BulkConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::bulk_config

              type tier = { unit_amount: String, maximum_units: Float? }

              class Tier < Orb::Internal::Type::BaseModel
                attr_accessor unit_amount: String

                attr_accessor maximum_units: Float?

                def initialize: (
                  unit_amount: String,
                  ?maximum_units: Float?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BulkConfig::tier
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type threshold_total_amount =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::cadence,
              item_id: String,
              model_type: :threshold_total_amount,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :threshold_total_amount

            attr_accessor name: String

            attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::cadence,
              item_id: String,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :threshold_total_amount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::threshold_total_amount

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_package =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::cadence,
              item_id: String,
              model_type: :tiered_package,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class TieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_package

            attr_accessor name: String

            attr_accessor tiered_package_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::cadence,
              item_id: String,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::tiered_package

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_with_minimum =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::cadence,
              item_id: String,
              model_type: :tiered_with_minimum,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class TieredWithMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_minimum

            attr_accessor name: String

            attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::cadence,
              item_id: String,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_with_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::tiered_with_minimum

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type unit_with_percent =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::cadence,
              item_id: String,
              model_type: :unit_with_percent,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class UnitWithPercent < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_percent

            attr_accessor name: String

            attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::cadence,
              item_id: String,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit_with_percent
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::unit_with_percent

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type package_with_allocation =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::cadence,
              item_id: String,
              model_type: :package_with_allocation,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class PackageWithAllocation < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :package_with_allocation

            attr_accessor name: String

            attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::cadence,
              item_id: String,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :package_with_allocation
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::package_with_allocation

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type tiered_with_proration =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::cadence,
              item_id: String,
              model_type: :tiered_with_proration,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class TieredWithProration < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_proration

            attr_accessor name: String

            attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::cadence,
              item_id: String,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::tiered_with_proration

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type unit_with_proration =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::cadence,
              item_id: String,
              model_type: :unit_with_proration,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class UnitWithProration < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_proration

            attr_accessor name: String

            attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::cadence,
              item_id: String,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::unit_with_proration

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_allocation =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_allocation,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class GroupedAllocation < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::cadence

            attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_allocation

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_allocation
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::grouped_allocation

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_with_prorated_minimum =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_prorated_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence

            attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_prorated_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_with_prorated_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::grouped_with_prorated_minimum

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type bulk_with_proration =
            {
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::cadence,
              item_id: String,
              model_type: :bulk_with_proration,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class BulkWithProration < Orb::Internal::Type::BaseModel
            attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_with_proration

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::bulk_with_proration

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type scalable_matrix_with_unit_pricing =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence,
              item_id: String,
              model_type: :scalable_matrix_with_unit_pricing,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_unit_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :scalable_matrix_with_unit_pricing
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::scalable_matrix_with_unit_pricing

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type scalable_matrix_with_tiered_pricing =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence,
              item_id: String,
              model_type: :scalable_matrix_with_tiered_pricing,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_tiered_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :scalable_matrix_with_tiered_pricing
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::scalable_matrix_with_tiered_pricing

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type cumulative_grouped_bulk =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :cumulative_grouped_bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence

            attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :cumulative_grouped_bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :cumulative_grouped_bulk
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::cumulative_grouped_bulk

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type max_group_tiered_package =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              model_type: :max_group_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence

            attr_accessor item_id: String

            attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor model_type: :max_group_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :max_group_tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::max_group_tiered_package

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_with_metered_minimum =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_metered_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence

            attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_metered_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_with_metered_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::grouped_with_metered_minimum

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type matrix_with_display_name =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              model_type: :matrix_with_display_name,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::cadence

            attr_accessor item_id: String

            attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

            attr_accessor model_type: :matrix_with_display_name

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :matrix_with_display_name
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::matrix_with_display_name

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type grouped_tiered_package =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class GroupedTieredPackage < Orb::Internal::Type::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::cadence

            attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::grouped_tiered_package

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          def self?.variants: -> [Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Unit, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Package, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Matrix, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Tiered, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredBps, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bps, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkBps, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::Bulk, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ThresholdTotalAmount, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredPackage, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithMinimum, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithPercent, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::PackageWithAllocation, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::TieredWithProration, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::UnitWithProration, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedAllocation, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithProratedMinimum, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::BulkWithProration, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::CumulativeGroupedBulk, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MaxGroupTieredPackage, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedWithMeteredMinimum, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::MatrixWithDisplayName, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::GroupedTieredPackage]
        end
      end
    end
  end
end
