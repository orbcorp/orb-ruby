module Orb
  module Models
    type subscription_schedule_plan_change_params =
      {
        change_option: Orb::Models::SubscriptionSchedulePlanChangeParams::change_option,
        add_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment]?,
        add_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice]?,
        align_billing_with_plan_change_date: bool?,
        auto_collection: bool?,
        billing_cycle_alignment: Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment?,
        billing_cycle_anchor_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::BillingCycleAnchorConfiguration?,
        change_date: Time?,
        coupon_redemption_code: String?,
        credits_overage_rate: Float?,
        default_invoice_memo: String?,
        external_plan_id: String?,
        filter: String?,
        initial_phase_order: Integer?,
        invoicing_threshold: String?,
        net_terms: Integer?,
        per_credit_overage_amount: Float?,
        plan_id: String?,
        plan_version_number: Integer?,
        price_overrides: ::Array[top]?,
        remove_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemoveAdjustment]?,
        remove_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemovePrice]?,
        replace_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment]?,
        replace_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice]?,
        trial_duration_days: Integer?,
        usage_customer_ids: ::Array[String]?
      }
      & Orb::request_parameters

    class SubscriptionSchedulePlanChangeParams < Orb::BaseModel
      extend Orb::RequestParameters::Converter
      include Orb::RequestParameters

      attr_accessor change_option: Orb::Models::SubscriptionSchedulePlanChangeParams::change_option

      attr_accessor add_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment]?

      attr_accessor add_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice]?

      attr_accessor align_billing_with_plan_change_date: bool?

      attr_accessor auto_collection: bool?

      attr_accessor billing_cycle_alignment: Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment?

      attr_accessor billing_cycle_anchor_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::BillingCycleAnchorConfiguration?

      attr_accessor change_date: Time?

      attr_accessor coupon_redemption_code: String?

      attr_accessor credits_overage_rate: Float?

      attr_accessor default_invoice_memo: String?

      attr_accessor external_plan_id: String?

      attr_accessor filter: String?

      attr_accessor initial_phase_order: Integer?

      attr_accessor invoicing_threshold: String?

      attr_accessor net_terms: Integer?

      attr_accessor per_credit_overage_amount: Float?

      attr_accessor plan_id: String?

      attr_accessor plan_version_number: Integer?

      attr_accessor price_overrides: ::Array[top]?

      attr_accessor remove_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemoveAdjustment]?

      attr_accessor remove_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemovePrice]?

      attr_accessor replace_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment]?

      attr_accessor replace_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice]?

      attr_accessor trial_duration_days: Integer?

      attr_accessor usage_customer_ids: ::Array[String]?

      def initialize: (
        change_option: Orb::Models::SubscriptionSchedulePlanChangeParams::change_option,
        ?add_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment]?,
        ?add_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice]?,
        ?align_billing_with_plan_change_date: bool?,
        ?auto_collection: bool?,
        ?billing_cycle_alignment: Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment?,
        ?billing_cycle_anchor_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::BillingCycleAnchorConfiguration?,
        ?change_date: Time?,
        ?coupon_redemption_code: String?,
        ?credits_overage_rate: Float?,
        ?default_invoice_memo: String?,
        ?external_plan_id: String?,
        ?filter: String?,
        ?initial_phase_order: Integer?,
        ?invoicing_threshold: String?,
        ?net_terms: Integer?,
        ?per_credit_overage_amount: Float?,
        ?plan_id: String?,
        ?plan_version_number: Integer?,
        ?price_overrides: ::Array[top]?,
        ?remove_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemoveAdjustment]?,
        ?remove_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::RemovePrice]?,
        ?replace_adjustments: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment]?,
        ?replace_prices: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice]?,
        ?trial_duration_days: Integer?,
        ?usage_customer_ids: ::Array[String]?,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> Orb::Models::subscription_schedule_plan_change_params

      type change_option =
        :requested_date | :end_of_subscription_term | :immediate

      module ChangeOption
        extend Orb::Enum

        REQUESTED_DATE: :requested_date
        END_OF_SUBSCRIPTION_TERM: :end_of_subscription_term
        IMMEDIATE: :immediate

        def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::change_option]
      end

      type add_adjustment =
        {
          adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::adjustment,
          end_date: Time?,
          plan_phase_order: Integer?,
          start_date: Time?
        }

      class AddAdjustment < Orb::BaseModel
        attr_accessor adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::adjustment

        attr_accessor end_date: Time?

        attr_accessor plan_phase_order: Integer?

        attr_accessor start_date: Time?

        def initialize: (
          adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::adjustment,
          ?end_date: Time?,
          ?plan_phase_order: Integer?,
          ?start_date: Time?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::add_adjustment

        type adjustment =
          Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewPercentageDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewUsageDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewAmountDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewMinimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewMaximum

        module Adjustment
          extend Orb::Union

          type new_percentage_discount =
            {
              adjustment_type: :percentage_discount,
              applies_to_price_ids: ::Array[String],
              percentage_discount: Float,
              is_invoice_level: bool
            }

          class NewPercentageDiscount < Orb::BaseModel
            attr_accessor adjustment_type: :percentage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor percentage_discount: Float

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              percentage_discount: Float,
              ?is_invoice_level: bool,
              ?adjustment_type: :percentage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::new_percentage_discount
          end

          type new_usage_discount =
            {
              adjustment_type: :usage_discount,
              applies_to_price_ids: ::Array[String],
              usage_discount: Float,
              is_invoice_level: bool
            }

          class NewUsageDiscount < Orb::BaseModel
            attr_accessor adjustment_type: :usage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor usage_discount: Float

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              usage_discount: Float,
              ?is_invoice_level: bool,
              ?adjustment_type: :usage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::new_usage_discount
          end

          type new_amount_discount =
            {
              adjustment_type: :amount_discount,
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool
            }

          class NewAmountDiscount < Orb::BaseModel
            attr_accessor adjustment_type: :amount_discount

            attr_accessor amount_discount: String

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              ?is_invoice_level: bool,
              ?adjustment_type: :amount_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::new_amount_discount
          end

          type new_minimum =
            {
              adjustment_type: :minimum,
              applies_to_price_ids: ::Array[String],
              item_id: String,
              minimum_amount: String,
              is_invoice_level: bool
            }

          class NewMinimum < Orb::BaseModel
            attr_accessor adjustment_type: :minimum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor item_id: String

            attr_accessor minimum_amount: String

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              item_id: String,
              minimum_amount: String,
              ?is_invoice_level: bool,
              ?adjustment_type: :minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::new_minimum
          end

          type new_maximum =
            {
              adjustment_type: :maximum,
              applies_to_price_ids: ::Array[String],
              maximum_amount: String,
              is_invoice_level: bool
            }

          class NewMaximum < Orb::BaseModel
            attr_accessor adjustment_type: :maximum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor maximum_amount: String

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              maximum_amount: String,
              ?is_invoice_level: bool,
              ?adjustment_type: :maximum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::new_maximum
          end

          def self?.variants: -> [Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewPercentageDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewUsageDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewAmountDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewMinimum, Orb::Models::SubscriptionSchedulePlanChangeParams::AddAdjustment::Adjustment::NewMaximum]
        end
      end

      type add_price =
        {
          allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice?,
          discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount]?,
          end_date: Time?,
          external_price_id: String?,
          maximum_amount: String?,
          minimum_amount: String?,
          plan_phase_order: Integer?,
          price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::price?,
          price_id: String?,
          start_date: Time?
        }

      class AddPrice < Orb::BaseModel
        attr_accessor allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice?

        attr_accessor discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount]?

        attr_accessor end_date: Time?

        attr_accessor external_price_id: String?

        attr_accessor maximum_amount: String?

        attr_accessor minimum_amount: String?

        attr_accessor plan_phase_order: Integer?

        attr_accessor price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::price?

        attr_accessor price_id: String?

        attr_accessor start_date: Time?

        def initialize: (
          ?allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice?,
          ?discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount]?,
          ?end_date: Time?,
          ?external_price_id: String?,
          ?maximum_amount: String?,
          ?minimum_amount: String?,
          ?plan_phase_order: Integer?,
          ?price: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::price?,
          ?price_id: String?,
          ?start_date: Time?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::add_price

        type allocation_price =
          {
            amount: String,
            cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          }

        class AllocationPrice < Orb::BaseModel
          attr_accessor amount: String

          attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice::cadence

          attr_accessor currency: String

          attr_accessor expires_at_end_of_cadence: bool

          def initialize: (
            amount: String,
            cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::allocation_price

          type cadence =
            :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

          module Cadence
            extend Orb::Enum

            ONE_TIME: :one_time
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            SEMI_ANNUAL: :semi_annual
            ANNUAL: :annual
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::AllocationPrice::cadence]
          end
        end

        type discount =
          {
            discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount::discount_type,
            amount_discount: String?,
            percentage_discount: Float?,
            usage_discount: Float?
          }

        class Discount < Orb::BaseModel
          attr_accessor discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount::discount_type

          attr_accessor amount_discount: String?

          attr_accessor percentage_discount: Float?

          attr_accessor usage_discount: Float?

          def initialize: (
            discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount::discount_type,
            ?amount_discount: String?,
            ?percentage_discount: Float?,
            ?usage_discount: Float?
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::discount

          type discount_type = :percentage | :usage | :amount

          module DiscountType
            extend Orb::Enum

            PERCENTAGE: :percentage
            USAGE: :usage
            AMOUNT: :amount

            def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Discount::discount_type]
          end
        end

        type price =
          Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice

        module Price
          extend Orb::Union

          type new_subscription_unit_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::cadence,
              item_id: String,
              model_type: :unit,
              name: String,
              unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::UnitConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionUnitPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit

            attr_accessor name: String

            attr_accessor unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::UnitConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::cadence,
              item_id: String,
              name: String,
              unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::UnitConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_unit_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::cadence]
            end

            type unit_config = { unit_amount: String }

            class UnitConfig < Orb::BaseModel
              attr_accessor unit_amount: String

              def initialize: (unit_amount: String) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::unit_config
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_package_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::cadence,
              item_id: String,
              model_type: :package,
              name: String,
              package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::PackageConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionPackagePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :package

            attr_accessor name: String

            attr_accessor package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::PackageConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::cadence,
              item_id: String,
              name: String,
              package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::PackageConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_package_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::cadence]
            end

            type package_config =
              { package_amount: String, package_size: Integer }

            class PackageConfig < Orb::BaseModel
              attr_accessor package_amount: String

              attr_accessor package_size: Integer

              def initialize: (
                package_amount: String,
                package_size: Integer
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::package_config
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_matrix_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::cadence,
              item_id: String,
              matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::MatrixConfig,
              model_type: :matrix,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionMatrixPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::cadence

            attr_accessor item_id: String

            attr_accessor matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::MatrixConfig

            attr_accessor model_type: :matrix

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::cadence,
              item_id: String,
              matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::MatrixConfig,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :matrix
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_matrix_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::cadence]
            end

            type matrix_config =
              {
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]
              }

            class MatrixConfig < Orb::BaseModel
              attr_accessor default_unit_amount: String

              attr_accessor dimensions: ::Array[String?]

              attr_accessor matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]

              def initialize: (
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::matrix_config

              type matrix_value =
                { dimension_values: ::Array[String?], unit_amount: String }

              class MatrixValue < Orb::BaseModel
                attr_accessor dimension_values: ::Array[String?]

                attr_accessor unit_amount: String

                def initialize: (
                  dimension_values: ::Array[String?],
                  unit_amount: String
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::MatrixConfig::matrix_value
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tiered_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::cadence,
              item_id: String,
              model_type: :tiered,
              name: String,
              tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::TieredConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTieredPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered

            attr_accessor name: String

            attr_accessor tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::TieredConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::cadence,
              item_id: String,
              name: String,
              tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::TieredConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_tiered_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::cadence]
            end

            type tiered_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]
              }

            class TieredConfig < Orb::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::tiered_config

              type tier =
                { first_unit: Float, unit_amount: String, last_unit: Float? }

              class Tier < Orb::BaseModel
                attr_accessor first_unit: Float

                attr_accessor unit_amount: String

                attr_accessor last_unit: Float?

                def initialize: (
                  first_unit: Float,
                  unit_amount: String,
                  ?last_unit: Float?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::TieredConfig::tier
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tiered_bps_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::cadence,
              item_id: String,
              model_type: :tiered_bps,
              name: String,
              tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTieredBpsPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_bps

            attr_accessor name: String

            attr_accessor tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::cadence,
              item_id: String,
              name: String,
              tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_tiered_bps_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::cadence]
            end

            type tiered_bps_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]
              }

            class TieredBpsConfig < Orb::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::tiered_bps_config

              type tier =
                {
                  bps: Float,
                  minimum_amount: String,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::BaseModel
                attr_accessor bps: Float

                attr_accessor minimum_amount: String

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  minimum_amount: String,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::tier
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_bps_price =
            {
              bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::cadence,
              item_id: String,
              model_type: :bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionBpsPrice < Orb::BaseModel
            attr_accessor bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_bps_price

            type bps_config = { bps: Float, per_unit_maximum: String? }

            class BpsConfig < Orb::BaseModel
              attr_accessor bps: Float

              attr_accessor per_unit_maximum: String?

              def initialize: (bps: Float, ?per_unit_maximum: String?) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::bps_config
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_bulk_bps_price =
            {
              bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::cadence,
              item_id: String,
              model_type: :bulk_bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionBulkBpsPrice < Orb::BaseModel
            attr_accessor bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk_bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_bulk_bps_price

            type bulk_bps_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]
              }

            class BulkBpsConfig < Orb::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::bulk_bps_config

              type tier =
                {
                  bps: Float,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::BaseModel
                attr_accessor bps: Float

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::tier
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_bulk_price =
            {
              bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BulkConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::cadence,
              item_id: String,
              model_type: :bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionBulkPrice < Orb::BaseModel
            attr_accessor bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BulkConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BulkConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_bulk_price

            type bulk_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]
              }

            class BulkConfig < Orb::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::bulk_config

              type tier = { unit_amount: String, maximum_units: Float? }

              class Tier < Orb::BaseModel
                attr_accessor unit_amount: String

                attr_accessor maximum_units: Float?

                def initialize: (
                  unit_amount: String,
                  ?maximum_units: Float?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BulkConfig::tier
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_threshold_total_amount_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::cadence,
              item_id: String,
              model_type: :threshold_total_amount,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionThresholdTotalAmountPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :threshold_total_amount

            attr_accessor name: String

            attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::cadence,
              item_id: String,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :threshold_total_amount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_threshold_total_amount_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tiered_package_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::cadence,
              item_id: String,
              model_type: :tiered_package,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTieredPackagePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_package

            attr_accessor name: String

            attr_accessor tiered_package_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::cadence,
              item_id: String,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_tiered_package_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tiered_with_minimum_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::cadence,
              item_id: String,
              model_type: :tiered_with_minimum,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTieredWithMinimumPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_minimum

            attr_accessor name: String

            attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::cadence,
              item_id: String,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_with_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_tiered_with_minimum_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_unit_with_percent_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::cadence,
              item_id: String,
              model_type: :unit_with_percent,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionUnitWithPercentPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_percent

            attr_accessor name: String

            attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::cadence,
              item_id: String,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit_with_percent
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_unit_with_percent_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_package_with_allocation_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::cadence,
              item_id: String,
              model_type: :package_with_allocation,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionPackageWithAllocationPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :package_with_allocation

            attr_accessor name: String

            attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::cadence,
              item_id: String,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :package_with_allocation
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_package_with_allocation_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tier_with_proration_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::cadence,
              item_id: String,
              model_type: :tiered_with_proration,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTierWithProrationPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_proration

            attr_accessor name: String

            attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::cadence,
              item_id: String,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_tier_with_proration_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_unit_with_proration_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::cadence,
              item_id: String,
              model_type: :unit_with_proration,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionUnitWithProrationPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_proration

            attr_accessor name: String

            attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::cadence,
              item_id: String,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_unit_with_proration_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_grouped_allocation_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_allocation,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionGroupedAllocationPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::cadence

            attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_allocation

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_allocation
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_grouped_allocation_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_grouped_with_prorated_minimum_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_prorated_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionGroupedWithProratedMinimumPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence

            attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_prorated_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_with_prorated_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_grouped_with_prorated_minimum_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_bulk_with_proration_price =
            {
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::cadence,
              item_id: String,
              model_type: :bulk_with_proration,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionBulkWithProrationPrice < Orb::BaseModel
            attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_with_proration

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_bulk_with_proration_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_scalable_matrix_with_unit_pricing_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence,
              item_id: String,
              model_type: :scalable_matrix_with_unit_pricing,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionScalableMatrixWithUnitPricingPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_unit_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :scalable_matrix_with_unit_pricing
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_scalable_matrix_with_unit_pricing_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_scalable_matrix_with_tiered_pricing_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence,
              item_id: String,
              model_type: :scalable_matrix_with_tiered_pricing,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionScalableMatrixWithTieredPricingPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_tiered_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :scalable_matrix_with_tiered_pricing
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_scalable_matrix_with_tiered_pricing_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_cumulative_grouped_bulk_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :cumulative_grouped_bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionCumulativeGroupedBulkPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence

            attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :cumulative_grouped_bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :cumulative_grouped_bulk
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_cumulative_grouped_bulk_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_max_group_tiered_package_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              model_type: :max_group_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionMaxGroupTieredPackagePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence

            attr_accessor item_id: String

            attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor model_type: :max_group_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :max_group_tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_max_group_tiered_package_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_grouped_with_metered_minimum_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_metered_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionGroupedWithMeteredMinimumPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence

            attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_metered_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_with_metered_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_grouped_with_metered_minimum_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_matrix_with_display_name_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              model_type: :matrix_with_display_name,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionMatrixWithDisplayNamePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence

            attr_accessor item_id: String

            attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

            attr_accessor model_type: :matrix_with_display_name

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :matrix_with_display_name
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_matrix_with_display_name_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_grouped_tiered_package_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionGroupedTieredPackagePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::cadence

            attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::new_subscription_grouped_tiered_package_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          def self?.variants: -> [Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackagePrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredBpsPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBpsPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkBpsPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionThresholdTotalAmountPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredPackagePrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTieredWithMinimumPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithPercentPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionPackageWithAllocationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionTierWithProrationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionUnitWithProrationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedAllocationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionBulkWithProrationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionCumulativeGroupedBulkPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMaxGroupTieredPackagePrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionMatrixWithDisplayNamePrice, Orb::Models::SubscriptionSchedulePlanChangeParams::AddPrice::Price::NewSubscriptionGroupedTieredPackagePrice]
        end
      end

      type billing_cycle_alignment =
        :unchanged | :plan_change_date | :start_of_month

      module BillingCycleAlignment
        extend Orb::Enum

        UNCHANGED: :unchanged
        PLAN_CHANGE_DATE: :plan_change_date
        START_OF_MONTH: :start_of_month

        def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment]
      end

      type billing_cycle_anchor_configuration =
        { day: Integer, month: Integer?, year: Integer? }

      class BillingCycleAnchorConfiguration < Orb::BaseModel
        attr_accessor day: Integer

        attr_accessor month: Integer?

        attr_accessor year: Integer?

        def initialize: (
          day: Integer,
          ?month: Integer?,
          ?year: Integer?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_anchor_configuration
      end

      type remove_adjustment = { adjustment_id: String }

      class RemoveAdjustment < Orb::BaseModel
        attr_accessor adjustment_id: String

        def initialize: (adjustment_id: String) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::remove_adjustment
      end

      type remove_price = { external_price_id: String?, price_id: String? }

      class RemovePrice < Orb::BaseModel
        attr_accessor external_price_id: String?

        attr_accessor price_id: String?

        def initialize: (
          ?external_price_id: String?,
          ?price_id: String?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::remove_price
      end

      type replace_adjustment =
        {
          adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::adjustment,
          replaces_adjustment_id: String
        }

      class ReplaceAdjustment < Orb::BaseModel
        attr_accessor adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::adjustment

        attr_accessor replaces_adjustment_id: String

        def initialize: (
          adjustment: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::adjustment,
          replaces_adjustment_id: String
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::replace_adjustment

        type adjustment =
          Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewPercentageDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewUsageDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewAmountDiscount
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewMinimum
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewMaximum

        module Adjustment
          extend Orb::Union

          type new_percentage_discount =
            {
              adjustment_type: :percentage_discount,
              applies_to_price_ids: ::Array[String],
              percentage_discount: Float,
              is_invoice_level: bool
            }

          class NewPercentageDiscount < Orb::BaseModel
            attr_accessor adjustment_type: :percentage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor percentage_discount: Float

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              percentage_discount: Float,
              ?is_invoice_level: bool,
              ?adjustment_type: :percentage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::new_percentage_discount
          end

          type new_usage_discount =
            {
              adjustment_type: :usage_discount,
              applies_to_price_ids: ::Array[String],
              usage_discount: Float,
              is_invoice_level: bool
            }

          class NewUsageDiscount < Orb::BaseModel
            attr_accessor adjustment_type: :usage_discount

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor usage_discount: Float

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              usage_discount: Float,
              ?is_invoice_level: bool,
              ?adjustment_type: :usage_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::new_usage_discount
          end

          type new_amount_discount =
            {
              adjustment_type: :amount_discount,
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool
            }

          class NewAmountDiscount < Orb::BaseModel
            attr_accessor adjustment_type: :amount_discount

            attr_accessor amount_discount: String

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              ?is_invoice_level: bool,
              ?adjustment_type: :amount_discount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::new_amount_discount
          end

          type new_minimum =
            {
              adjustment_type: :minimum,
              applies_to_price_ids: ::Array[String],
              item_id: String,
              minimum_amount: String,
              is_invoice_level: bool
            }

          class NewMinimum < Orb::BaseModel
            attr_accessor adjustment_type: :minimum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor item_id: String

            attr_accessor minimum_amount: String

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              item_id: String,
              minimum_amount: String,
              ?is_invoice_level: bool,
              ?adjustment_type: :minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::new_minimum
          end

          type new_maximum =
            {
              adjustment_type: :maximum,
              applies_to_price_ids: ::Array[String],
              maximum_amount: String,
              is_invoice_level: bool
            }

          class NewMaximum < Orb::BaseModel
            attr_accessor adjustment_type: :maximum

            attr_accessor applies_to_price_ids: ::Array[String]

            attr_accessor maximum_amount: String

            attr_reader is_invoice_level: bool?

            def is_invoice_level=: (bool) -> bool

            def initialize: (
              applies_to_price_ids: ::Array[String],
              maximum_amount: String,
              ?is_invoice_level: bool,
              ?adjustment_type: :maximum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::new_maximum
          end

          def self?.variants: -> [Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewPercentageDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewUsageDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewAmountDiscount, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewMinimum, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment::Adjustment::NewMaximum]
        end
      end

      type replace_price =
        {
          replaces_price_id: String,
          allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice?,
          discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount]?,
          external_price_id: String?,
          fixed_price_quantity: Float?,
          maximum_amount: String?,
          minimum_amount: String?,
          price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::price?,
          price_id: String?
        }

      class ReplacePrice < Orb::BaseModel
        attr_accessor replaces_price_id: String

        attr_accessor allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice?

        attr_accessor discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount]?

        attr_accessor external_price_id: String?

        attr_accessor fixed_price_quantity: Float?

        attr_accessor maximum_amount: String?

        attr_accessor minimum_amount: String?

        attr_accessor price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::price?

        attr_accessor price_id: String?

        def initialize: (
          replaces_price_id: String,
          ?allocation_price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice?,
          ?discounts: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount]?,
          ?external_price_id: String?,
          ?fixed_price_quantity: Float?,
          ?maximum_amount: String?,
          ?minimum_amount: String?,
          ?price: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::price?,
          ?price_id: String?
        ) -> void

        def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::replace_price

        type allocation_price =
          {
            amount: String,
            cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          }

        class AllocationPrice < Orb::BaseModel
          attr_accessor amount: String

          attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice::cadence

          attr_accessor currency: String

          attr_accessor expires_at_end_of_cadence: bool

          def initialize: (
            amount: String,
            cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice::cadence,
            currency: String,
            expires_at_end_of_cadence: bool
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::allocation_price

          type cadence =
            :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

          module Cadence
            extend Orb::Enum

            ONE_TIME: :one_time
            MONTHLY: :monthly
            QUARTERLY: :quarterly
            SEMI_ANNUAL: :semi_annual
            ANNUAL: :annual
            CUSTOM: :custom

            def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::AllocationPrice::cadence]
          end
        end

        type discount =
          {
            discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount::discount_type,
            amount_discount: String?,
            percentage_discount: Float?,
            usage_discount: Float?
          }

        class Discount < Orb::BaseModel
          attr_accessor discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount::discount_type

          attr_accessor amount_discount: String?

          attr_accessor percentage_discount: Float?

          attr_accessor usage_discount: Float?

          def initialize: (
            discount_type: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount::discount_type,
            ?amount_discount: String?,
            ?percentage_discount: Float?,
            ?usage_discount: Float?
          ) -> void

          def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::discount

          type discount_type = :percentage | :usage | :amount

          module DiscountType
            extend Orb::Enum

            PERCENTAGE: :percentage
            USAGE: :usage
            AMOUNT: :amount

            def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Discount::discount_type]
          end
        end

        type price =
          Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice
          | Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice

        module Price
          extend Orb::Union

          type new_subscription_unit_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::cadence,
              item_id: String,
              model_type: :unit,
              name: String,
              unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::UnitConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionUnitPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit

            attr_accessor name: String

            attr_accessor unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::UnitConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::cadence,
              item_id: String,
              name: String,
              unit_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::UnitConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_unit_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::cadence]
            end

            type unit_config = { unit_amount: String }

            class UnitConfig < Orb::BaseModel
              attr_accessor unit_amount: String

              def initialize: (unit_amount: String) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::unit_config
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_package_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::cadence,
              item_id: String,
              model_type: :package,
              name: String,
              package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::PackageConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionPackagePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :package

            attr_accessor name: String

            attr_accessor package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::PackageConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::cadence,
              item_id: String,
              name: String,
              package_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::PackageConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_package_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::cadence]
            end

            type package_config =
              { package_amount: String, package_size: Integer }

            class PackageConfig < Orb::BaseModel
              attr_accessor package_amount: String

              attr_accessor package_size: Integer

              def initialize: (
                package_amount: String,
                package_size: Integer
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::package_config
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_matrix_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::cadence,
              item_id: String,
              matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::MatrixConfig,
              model_type: :matrix,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionMatrixPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::cadence

            attr_accessor item_id: String

            attr_accessor matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::MatrixConfig

            attr_accessor model_type: :matrix

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::cadence,
              item_id: String,
              matrix_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::MatrixConfig,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :matrix
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_matrix_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::cadence]
            end

            type matrix_config =
              {
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]
              }

            class MatrixConfig < Orb::BaseModel
              attr_accessor default_unit_amount: String

              attr_accessor dimensions: ::Array[String?]

              attr_accessor matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]

              def initialize: (
                default_unit_amount: String,
                dimensions: ::Array[String?],
                matrix_values: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::MatrixConfig::MatrixValue]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::matrix_config

              type matrix_value =
                { dimension_values: ::Array[String?], unit_amount: String }

              class MatrixValue < Orb::BaseModel
                attr_accessor dimension_values: ::Array[String?]

                attr_accessor unit_amount: String

                def initialize: (
                  dimension_values: ::Array[String?],
                  unit_amount: String
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::MatrixConfig::matrix_value
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tiered_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::cadence,
              item_id: String,
              model_type: :tiered,
              name: String,
              tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::TieredConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTieredPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered

            attr_accessor name: String

            attr_accessor tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::TieredConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::cadence,
              item_id: String,
              name: String,
              tiered_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::TieredConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_tiered_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::cadence]
            end

            type tiered_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]
              }

            class TieredConfig < Orb::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::TieredConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::tiered_config

              type tier =
                { first_unit: Float, unit_amount: String, last_unit: Float? }

              class Tier < Orb::BaseModel
                attr_accessor first_unit: Float

                attr_accessor unit_amount: String

                attr_accessor last_unit: Float?

                def initialize: (
                  first_unit: Float,
                  unit_amount: String,
                  ?last_unit: Float?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::TieredConfig::tier
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tiered_bps_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::cadence,
              item_id: String,
              model_type: :tiered_bps,
              name: String,
              tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTieredBpsPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_bps

            attr_accessor name: String

            attr_accessor tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::cadence,
              item_id: String,
              name: String,
              tiered_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_tiered_bps_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::cadence]
            end

            type tiered_bps_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]
              }

            class TieredBpsConfig < Orb::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::tiered_bps_config

              type tier =
                {
                  bps: Float,
                  minimum_amount: String,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::BaseModel
                attr_accessor bps: Float

                attr_accessor minimum_amount: String

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  minimum_amount: String,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::TieredBpsConfig::tier
              end
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_bps_price =
            {
              bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::cadence,
              item_id: String,
              model_type: :bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionBpsPrice < Orb::BaseModel
            attr_accessor bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_bps_price

            type bps_config = { bps: Float, per_unit_maximum: String? }

            class BpsConfig < Orb::BaseModel
              attr_accessor bps: Float

              attr_accessor per_unit_maximum: String?

              def initialize: (bps: Float, ?per_unit_maximum: String?) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::bps_config
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_bulk_bps_price =
            {
              bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::cadence,
              item_id: String,
              model_type: :bulk_bps,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionBulkBpsPrice < Orb::BaseModel
            attr_accessor bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_bps

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_bps_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk_bps
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_bulk_bps_price

            type bulk_bps_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]
              }

            class BulkBpsConfig < Orb::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::bulk_bps_config

              type tier =
                {
                  bps: Float,
                  maximum_amount: String?,
                  per_unit_maximum: String?
                }

              class Tier < Orb::BaseModel
                attr_accessor bps: Float

                attr_accessor maximum_amount: String?

                attr_accessor per_unit_maximum: String?

                def initialize: (
                  bps: Float,
                  ?maximum_amount: String?,
                  ?per_unit_maximum: String?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BulkBpsConfig::tier
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_bulk_price =
            {
              bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BulkConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::cadence,
              item_id: String,
              model_type: :bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionBulkPrice < Orb::BaseModel
            attr_accessor bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BulkConfig

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_config: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BulkConfig,
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_bulk_price

            type bulk_config =
              {
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]
              }

            class BulkConfig < Orb::BaseModel
              attr_accessor tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]

              def initialize: (
                tiers: ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BulkConfig::Tier]
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::bulk_config

              type tier = { unit_amount: String, maximum_units: Float? }

              class Tier < Orb::BaseModel
                attr_accessor unit_amount: String

                attr_accessor maximum_units: Float?

                def initialize: (
                  unit_amount: String,
                  ?maximum_units: Float?
                ) -> void

                def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BulkConfig::tier
              end
            end

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_threshold_total_amount_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::cadence,
              item_id: String,
              model_type: :threshold_total_amount,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionThresholdTotalAmountPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :threshold_total_amount

            attr_accessor name: String

            attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::cadence,
              item_id: String,
              name: String,
              threshold_total_amount_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :threshold_total_amount
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_threshold_total_amount_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tiered_package_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::cadence,
              item_id: String,
              model_type: :tiered_package,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTieredPackagePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_package

            attr_accessor name: String

            attr_accessor tiered_package_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::cadence,
              item_id: String,
              name: String,
              tiered_package_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_tiered_package_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tiered_with_minimum_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::cadence,
              item_id: String,
              model_type: :tiered_with_minimum,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTieredWithMinimumPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_minimum

            attr_accessor name: String

            attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::cadence,
              item_id: String,
              name: String,
              tiered_with_minimum_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_with_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_tiered_with_minimum_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_unit_with_percent_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::cadence,
              item_id: String,
              model_type: :unit_with_percent,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionUnitWithPercentPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_percent

            attr_accessor name: String

            attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::cadence,
              item_id: String,
              name: String,
              unit_with_percent_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit_with_percent
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_unit_with_percent_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_package_with_allocation_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::cadence,
              item_id: String,
              model_type: :package_with_allocation,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionPackageWithAllocationPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :package_with_allocation

            attr_accessor name: String

            attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::cadence,
              item_id: String,
              name: String,
              package_with_allocation_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :package_with_allocation
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_package_with_allocation_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_tier_with_proration_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::cadence,
              item_id: String,
              model_type: :tiered_with_proration,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionTierWithProrationPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :tiered_with_proration

            attr_accessor name: String

            attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::cadence,
              item_id: String,
              name: String,
              tiered_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :tiered_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_tier_with_proration_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_unit_with_proration_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::cadence,
              item_id: String,
              model_type: :unit_with_proration,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionUnitWithProrationPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :unit_with_proration

            attr_accessor name: String

            attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::cadence,
              item_id: String,
              name: String,
              unit_with_proration_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :unit_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_unit_with_proration_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_grouped_allocation_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_allocation,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionGroupedAllocationPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::cadence

            attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_allocation

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::cadence,
              grouped_allocation_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_allocation
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_grouped_allocation_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_grouped_with_prorated_minimum_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_prorated_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionGroupedWithProratedMinimumPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence

            attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_prorated_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence,
              grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_with_prorated_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_grouped_with_prorated_minimum_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_bulk_with_proration_price =
            {
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::cadence,
              item_id: String,
              model_type: :bulk_with_proration,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionBulkWithProrationPrice < Orb::BaseModel
            attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :bulk_with_proration

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              bulk_with_proration_config: ::Hash[Symbol, top],
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::cadence,
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :bulk_with_proration
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_bulk_with_proration_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_scalable_matrix_with_unit_pricing_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence,
              item_id: String,
              model_type: :scalable_matrix_with_unit_pricing,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionScalableMatrixWithUnitPricingPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_unit_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :scalable_matrix_with_unit_pricing
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_scalable_matrix_with_unit_pricing_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_scalable_matrix_with_tiered_pricing_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence,
              item_id: String,
              model_type: :scalable_matrix_with_tiered_pricing,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionScalableMatrixWithTieredPricingPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence

            attr_accessor item_id: String

            attr_accessor model_type: :scalable_matrix_with_tiered_pricing

            attr_accessor name: String

            attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence,
              item_id: String,
              name: String,
              scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :scalable_matrix_with_tiered_pricing
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_scalable_matrix_with_tiered_pricing_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_cumulative_grouped_bulk_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :cumulative_grouped_bulk,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionCumulativeGroupedBulkPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence

            attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :cumulative_grouped_bulk

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence,
              cumulative_grouped_bulk_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :cumulative_grouped_bulk
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_cumulative_grouped_bulk_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_max_group_tiered_package_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              model_type: :max_group_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionMaxGroupTieredPackagePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence

            attr_accessor item_id: String

            attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor model_type: :max_group_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence,
              item_id: String,
              max_group_tiered_package_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :max_group_tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_max_group_tiered_package_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_grouped_with_metered_minimum_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_with_metered_minimum,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionGroupedWithMeteredMinimumPrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence

            attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_with_metered_minimum

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence,
              grouped_with_metered_minimum_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_with_metered_minimum
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_grouped_with_metered_minimum_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_matrix_with_display_name_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              model_type: :matrix_with_display_name,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionMatrixWithDisplayNamePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence

            attr_accessor item_id: String

            attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

            attr_accessor model_type: :matrix_with_display_name

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence,
              item_id: String,
              matrix_with_display_name_config: ::Hash[Symbol, top],
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :matrix_with_display_name
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_matrix_with_display_name_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          type new_subscription_grouped_tiered_package_price =
            {
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              model_type: :grouped_tiered_package,
              name: String,
              billable_metric_id: String?,
              billed_in_advance: bool?,
              billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?,
              conversion_rate: Float?,
              currency: String?,
              external_price_id: String?,
              fixed_price_quantity: Float?,
              invoice_grouping_key: String?,
              invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?,
              metadata: ::Hash[Symbol, String?]?,
              reference_id: String?
            }

          class NewSubscriptionGroupedTieredPackagePrice < Orb::BaseModel
            attr_accessor cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::cadence

            attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

            attr_accessor item_id: String

            attr_accessor model_type: :grouped_tiered_package

            attr_accessor name: String

            attr_accessor billable_metric_id: String?

            attr_accessor billed_in_advance: bool?

            attr_accessor billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?

            attr_accessor conversion_rate: Float?

            attr_accessor currency: String?

            attr_accessor external_price_id: String?

            attr_accessor fixed_price_quantity: Float?

            attr_accessor invoice_grouping_key: String?

            attr_accessor invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?

            attr_accessor metadata: ::Hash[Symbol, String?]?

            attr_accessor reference_id: String?

            def initialize: (
              cadence: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::cadence,
              grouped_tiered_package_config: ::Hash[Symbol, top],
              item_id: String,
              name: String,
              ?billable_metric_id: String?,
              ?billed_in_advance: bool?,
              ?billing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration?,
              ?conversion_rate: Float?,
              ?currency: String?,
              ?external_price_id: String?,
              ?fixed_price_quantity: Float?,
              ?invoice_grouping_key: String?,
              ?invoicing_cycle_configuration: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration?,
              ?metadata: ::Hash[Symbol, String?]?,
              ?reference_id: String?,
              ?model_type: :grouped_tiered_package
            ) -> void

            def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::new_subscription_grouped_tiered_package_price

            type cadence =
              :annual
              | :semi_annual
              | :monthly
              | :quarterly
              | :one_time
              | :custom

            module Cadence
              extend Orb::Enum

              ANNUAL: :annual
              SEMI_ANNUAL: :semi_annual
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              ONE_TIME: :one_time
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::cadence]
            end

            type billing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit
              }

            class BillingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::billing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::BillingCycleConfiguration::duration_unit]
              end
            end

            type invoicing_cycle_configuration =
              {
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              }

            class InvoicingCycleConfiguration < Orb::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit
              ) -> void

              def to_hash: -> Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::invoicing_cycle_configuration

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice::InvoicingCycleConfiguration::duration_unit]
              end
            end
          end

          def self?.variants: -> [Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackagePrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredBpsPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBpsPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkBpsPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionThresholdTotalAmountPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredPackagePrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTieredWithMinimumPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithPercentPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionPackageWithAllocationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionTierWithProrationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionUnitWithProrationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedAllocationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithProratedMinimumPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionBulkWithProrationPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithUnitPricingPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionScalableMatrixWithTieredPricingPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionCumulativeGroupedBulkPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMaxGroupTieredPackagePrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedWithMeteredMinimumPrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionMatrixWithDisplayNamePrice, Orb::Models::SubscriptionSchedulePlanChangeParams::ReplacePrice::Price::NewSubscriptionGroupedTieredPackagePrice]
        end
      end
    end
  end
end
