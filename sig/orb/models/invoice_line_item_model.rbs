module Orb
  module Models
    type invoice_line_item_model =
      {
        id: String,
        adjusted_subtotal: String,
        adjustments: ::Array[Orb::Models::InvoiceLineItemModel::adjustment],
        amount: String,
        credits_applied: String,
        discount: Orb::Models::discount?,
        end_date: Time,
        filter: String?,
        grouping: String?,
        maximum: Orb::Models::MaximumModel?,
        maximum_amount: String?,
        minimum: Orb::Models::MinimumModel?,
        minimum_amount: String?,
        name: String,
        partially_invoiced_amount: String,
        price: Orb::Models::price_model?,
        quantity: Float,
        start_date: Time,
        sub_line_items: ::Array[Orb::Models::InvoiceLineItemModel::sub_line_item],
        subtotal: String,
        tax_amounts: ::Array[Orb::Models::TaxAmountModel],
        usage_customer_ids: ::Array[String]?
      }

    class InvoiceLineItemModel < Orb::BaseModel
      attr_accessor id: String

      attr_accessor adjusted_subtotal: String

      attr_accessor adjustments: ::Array[Orb::Models::InvoiceLineItemModel::adjustment]

      attr_accessor amount: String

      attr_accessor credits_applied: String

      attr_accessor discount: Orb::Models::discount?

      attr_accessor end_date: Time

      attr_accessor filter: String?

      attr_accessor grouping: String?

      attr_accessor maximum: Orb::Models::MaximumModel?

      attr_accessor maximum_amount: String?

      attr_accessor minimum: Orb::Models::MinimumModel?

      attr_accessor minimum_amount: String?

      attr_accessor name: String

      attr_accessor partially_invoiced_amount: String

      attr_accessor price: Orb::Models::price_model?

      attr_accessor quantity: Float

      attr_accessor start_date: Time

      attr_accessor sub_line_items: ::Array[Orb::Models::InvoiceLineItemModel::sub_line_item]

      attr_accessor subtotal: String

      attr_accessor tax_amounts: ::Array[Orb::Models::TaxAmountModel]

      attr_accessor usage_customer_ids: ::Array[String]?

      def initialize:
        (
          id: String,
          adjusted_subtotal: String,
          adjustments: ::Array[Orb::Models::InvoiceLineItemModel::adjustment],
          amount: String,
          credits_applied: String,
          discount: Orb::Models::discount?,
          end_date: Time,
          filter: String?,
          grouping: String?,
          maximum: Orb::Models::MaximumModel?,
          maximum_amount: String?,
          minimum: Orb::Models::MinimumModel?,
          minimum_amount: String?,
          name: String,
          partially_invoiced_amount: String,
          price: Orb::Models::price_model?,
          quantity: Float,
          start_date: Time,
          sub_line_items: ::Array[Orb::Models::InvoiceLineItemModel::sub_line_item],
          subtotal: String,
          tax_amounts: ::Array[Orb::Models::TaxAmountModel],
          usage_customer_ids: ::Array[String]?
        ) -> void
        | (?Orb::Models::invoice_line_item_model | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::invoice_line_item_model

      type adjustment =
        Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryUsageDiscountAdjustment
        | Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryAmountDiscountAdjustment
        | Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryPercentageDiscountAdjustment
        | Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryMinimumAdjustment
        | Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryMaximumAdjustment

      class Adjustment < Orb::Union
        type monetary_usage_discount_adjustment =
          {
            id: String,
            adjustment_type: :usage_discount,
            amount: String,
            applies_to_price_ids: ::Array[String],
            is_invoice_level: bool,
            reason: String?,
            usage_discount: Float
          }

        class MonetaryUsageDiscountAdjustment < Orb::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :usage_discount

          attr_accessor amount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor is_invoice_level: bool

          attr_accessor reason: String?

          attr_accessor usage_discount: Float

          def initialize:
            (
              id: String,
              amount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              reason: String?,
              usage_discount: Float,
              adjustment_type: :usage_discount
            ) -> void
            | (
              ?Orb::Models::InvoiceLineItemModel::Adjustment::monetary_usage_discount_adjustment
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::InvoiceLineItemModel::Adjustment::monetary_usage_discount_adjustment
        end

        type monetary_amount_discount_adjustment =
          {
            id: String,
            adjustment_type: :amount_discount,
            amount: String,
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            is_invoice_level: bool,
            reason: String?
          }

        class MonetaryAmountDiscountAdjustment < Orb::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :amount_discount

          attr_accessor amount: String

          attr_accessor amount_discount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor is_invoice_level: bool

          attr_accessor reason: String?

          def initialize:
            (
              id: String,
              amount: String,
              amount_discount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              reason: String?,
              adjustment_type: :amount_discount
            ) -> void
            | (
              ?Orb::Models::InvoiceLineItemModel::Adjustment::monetary_amount_discount_adjustment
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::InvoiceLineItemModel::Adjustment::monetary_amount_discount_adjustment
        end

        type monetary_percentage_discount_adjustment =
          {
            id: String,
            adjustment_type: :percentage_discount,
            amount: String,
            applies_to_price_ids: ::Array[String],
            is_invoice_level: bool,
            percentage_discount: Float,
            reason: String?
          }

        class MonetaryPercentageDiscountAdjustment < Orb::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :percentage_discount

          attr_accessor amount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor is_invoice_level: bool

          attr_accessor percentage_discount: Float

          attr_accessor reason: String?

          def initialize:
            (
              id: String,
              amount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              percentage_discount: Float,
              reason: String?,
              adjustment_type: :percentage_discount
            ) -> void
            | (
              ?Orb::Models::InvoiceLineItemModel::Adjustment::monetary_percentage_discount_adjustment
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::InvoiceLineItemModel::Adjustment::monetary_percentage_discount_adjustment
        end

        type monetary_minimum_adjustment =
          {
            id: String,
            adjustment_type: :minimum,
            amount: String,
            applies_to_price_ids: ::Array[String],
            is_invoice_level: bool,
            item_id: String,
            minimum_amount: String,
            reason: String?
          }

        class MonetaryMinimumAdjustment < Orb::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :minimum

          attr_accessor amount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor is_invoice_level: bool

          attr_accessor item_id: String

          attr_accessor minimum_amount: String

          attr_accessor reason: String?

          def initialize:
            (
              id: String,
              amount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              item_id: String,
              minimum_amount: String,
              reason: String?,
              adjustment_type: :minimum
            ) -> void
            | (
              ?Orb::Models::InvoiceLineItemModel::Adjustment::monetary_minimum_adjustment
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::InvoiceLineItemModel::Adjustment::monetary_minimum_adjustment
        end

        type monetary_maximum_adjustment =
          {
            id: String,
            adjustment_type: :maximum,
            amount: String,
            applies_to_price_ids: ::Array[String],
            is_invoice_level: bool,
            maximum_amount: String,
            reason: String?
          }

        class MonetaryMaximumAdjustment < Orb::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :maximum

          attr_accessor amount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor is_invoice_level: bool

          attr_accessor maximum_amount: String

          attr_accessor reason: String?

          def initialize:
            (
              id: String,
              amount: String,
              applies_to_price_ids: ::Array[String],
              is_invoice_level: bool,
              maximum_amount: String,
              reason: String?,
              adjustment_type: :maximum
            ) -> void
            | (
              ?Orb::Models::InvoiceLineItemModel::Adjustment::monetary_maximum_adjustment
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::InvoiceLineItemModel::Adjustment::monetary_maximum_adjustment
        end

        private def self.variants: -> [[:usage_discount, Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryUsageDiscountAdjustment], [:amount_discount, Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryAmountDiscountAdjustment], [:percentage_discount, Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryPercentageDiscountAdjustment], [:minimum, Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryMinimumAdjustment], [:maximum, Orb::Models::InvoiceLineItemModel::Adjustment::MonetaryMaximumAdjustment]]
      end

      type sub_line_item =
        Orb::Models::InvoiceLineItemModel::SubLineItem::MatrixSubLineItem
        | Orb::Models::InvoiceLineItemModel::SubLineItem::TierSubLineItem
        | Orb::Models::InvoiceLineItemModel::SubLineItem::OtherSubLineItem

      class SubLineItem < Orb::Union
        type matrix_sub_line_item =
          {
            amount: String,
            grouping: Orb::Models::SubLineItemGroupingModel?,
            matrix_config: Orb::Models::InvoiceLineItemModel::SubLineItem::MatrixSubLineItem::MatrixConfig,
            name: String,
            quantity: Float,
            type: :matrix
          }

        class MatrixSubLineItem < Orb::BaseModel
          attr_accessor amount: String

          attr_accessor grouping: Orb::Models::SubLineItemGroupingModel?

          attr_accessor matrix_config: Orb::Models::InvoiceLineItemModel::SubLineItem::MatrixSubLineItem::MatrixConfig

          attr_accessor name: String

          attr_accessor quantity: Float

          attr_accessor type: :matrix

          def initialize:
            (
              amount: String,
              grouping: Orb::Models::SubLineItemGroupingModel?,
              matrix_config: Orb::Models::InvoiceLineItemModel::SubLineItem::MatrixSubLineItem::MatrixConfig,
              name: String,
              quantity: Float,
              type: :matrix
            ) -> void
            | (
              ?Orb::Models::InvoiceLineItemModel::SubLineItem::matrix_sub_line_item
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::InvoiceLineItemModel::SubLineItem::matrix_sub_line_item

          type matrix_config = { dimension_values: ::Array[String?] }

          class MatrixConfig < Orb::BaseModel
            attr_accessor dimension_values: ::Array[String?]

            def initialize:
              (dimension_values: ::Array[String?]) -> void
              | (
                ?Orb::Models::InvoiceLineItemModel::SubLineItem::MatrixSubLineItem::matrix_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::InvoiceLineItemModel::SubLineItem::MatrixSubLineItem::matrix_config
          end
        end

        type tier_sub_line_item =
          {
            amount: String,
            grouping: Orb::Models::SubLineItemGroupingModel?,
            name: String,
            quantity: Float,
            tier_config: Orb::Models::InvoiceLineItemModel::SubLineItem::TierSubLineItem::TierConfig,
            type: :tier
          }

        class TierSubLineItem < Orb::BaseModel
          attr_accessor amount: String

          attr_accessor grouping: Orb::Models::SubLineItemGroupingModel?

          attr_accessor name: String

          attr_accessor quantity: Float

          attr_accessor tier_config: Orb::Models::InvoiceLineItemModel::SubLineItem::TierSubLineItem::TierConfig

          attr_accessor type: :tier

          def initialize:
            (
              amount: String,
              grouping: Orb::Models::SubLineItemGroupingModel?,
              name: String,
              quantity: Float,
              tier_config: Orb::Models::InvoiceLineItemModel::SubLineItem::TierSubLineItem::TierConfig,
              type: :tier
            ) -> void
            | (
              ?Orb::Models::InvoiceLineItemModel::SubLineItem::tier_sub_line_item
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::InvoiceLineItemModel::SubLineItem::tier_sub_line_item

          type tier_config =
            { first_unit: Float, last_unit: Float?, unit_amount: String }

          class TierConfig < Orb::BaseModel
            attr_accessor first_unit: Float

            attr_accessor last_unit: Float?

            attr_accessor unit_amount: String

            def initialize:
              (
                first_unit: Float,
                last_unit: Float?,
                unit_amount: String
              ) -> void
              | (
                ?Orb::Models::InvoiceLineItemModel::SubLineItem::TierSubLineItem::tier_config
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::InvoiceLineItemModel::SubLineItem::TierSubLineItem::tier_config
          end
        end

        type other_sub_line_item =
          {
            amount: String,
            grouping: Orb::Models::SubLineItemGroupingModel?,
            name: String,
            quantity: Float,
            type: :"'null'"
          }

        class OtherSubLineItem < Orb::BaseModel
          attr_accessor amount: String

          attr_accessor grouping: Orb::Models::SubLineItemGroupingModel?

          attr_accessor name: String

          attr_accessor quantity: Float

          attr_accessor type: :"'null'"

          def initialize:
            (
              amount: String,
              grouping: Orb::Models::SubLineItemGroupingModel?,
              name: String,
              quantity: Float,
              type: :"'null'"
            ) -> void
            | (
              ?Orb::Models::InvoiceLineItemModel::SubLineItem::other_sub_line_item
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::InvoiceLineItemModel::SubLineItem::other_sub_line_item
        end

        private def self.variants: -> [[:matrix, Orb::Models::InvoiceLineItemModel::SubLineItem::MatrixSubLineItem], [:tier, Orb::Models::InvoiceLineItemModel::SubLineItem::TierSubLineItem], [:"'null'", Orb::Models::InvoiceLineItemModel::SubLineItem::OtherSubLineItem]]
      end
    end
  end
end
