module Orb
  module Models
    type credit_note_discount_model =
      {
        amount_applied: String,
        discount_type: Orb::Models::CreditNoteDiscountModel::discount_type,
        percentage_discount: Float,
        applies_to_prices: ::Array[Orb::Models::CreditNoteDiscountModel::AppliesToPrice]?,
        reason: String?
      }

    class CreditNoteDiscountModel < Orb::BaseModel
      attr_accessor amount_applied: String

      attr_accessor discount_type: Orb::Models::CreditNoteDiscountModel::discount_type

      attr_accessor percentage_discount: Float

      attr_accessor applies_to_prices: ::Array[Orb::Models::CreditNoteDiscountModel::AppliesToPrice]?

      attr_accessor reason: String?

      def initialize:
        (
          amount_applied: String,
          discount_type: Orb::Models::CreditNoteDiscountModel::discount_type,
          percentage_discount: Float,
          applies_to_prices: ::Array[Orb::Models::CreditNoteDiscountModel::AppliesToPrice]?,
          reason: String?
        ) -> void
        | (
          ?Orb::Models::credit_note_discount_model | Orb::BaseModel data
        ) -> void

      def to_hash: -> Orb::Models::credit_note_discount_model

      type discount_type = :percentage

      class DiscountType < Orb::Enum
        PERCENTAGE: :percentage

        def self.values: -> ::Array[Orb::Models::CreditNoteDiscountModel::discount_type]
      end

      type applies_to_price = { id: String, name: String }

      class AppliesToPrice < Orb::BaseModel
        attr_accessor id: String

        attr_accessor name: String

        def initialize:
          (id: String, name: String) -> void
          | (
            ?Orb::Models::CreditNoteDiscountModel::applies_to_price
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::CreditNoteDiscountModel::applies_to_price
      end
    end
  end
end
