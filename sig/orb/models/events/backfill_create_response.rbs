module Orb
  module Models
    module Events
      type backfill_create_response =
        {
          id: String,
          close_time: Time?,
          created_at: Time,
          customer_id: String?,
          events_ingested: Integer,
          replace_existing_events: bool,
          reverted_at: Time?,
          status: Orb::Models::Events::BackfillCreateResponse::status,
          timeframe_end: Time,
          timeframe_start: Time,
          deprecation_filter: String?
        }

      class BackfillCreateResponse < Orb::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor close_time: Time?

        attr_accessor created_at: Time

        attr_accessor customer_id: String?

        attr_accessor events_ingested: Integer

        attr_accessor replace_existing_events: bool

        attr_accessor reverted_at: Time?

        attr_accessor status: Orb::Models::Events::BackfillCreateResponse::status

        attr_accessor timeframe_end: Time

        attr_accessor timeframe_start: Time

        attr_accessor deprecation_filter: String?

        def initialize: (
          id: String,
          close_time: Time?,
          created_at: Time,
          customer_id: String?,
          events_ingested: Integer,
          replace_existing_events: bool,
          reverted_at: Time?,
          status: Orb::Models::Events::BackfillCreateResponse::status,
          timeframe_end: Time,
          timeframe_start: Time,
          ?deprecation_filter: String?
        ) -> void

        type status = :pending | :reflected | :pending_revert | :reverted

        module Status
          extend Orb::Internal::Type::Enum

          PENDING: :pending
          REFLECTED: :reflected
          PENDING_REVERT: :pending_revert
          REVERTED: :reverted

          def self?.values: -> ::Array[Orb::Models::Events::BackfillCreateResponse::status]
        end
      end
    end
  end
end
