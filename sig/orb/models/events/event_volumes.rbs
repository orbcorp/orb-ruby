module Orb
  module Models
    class EventVolumes = Events::EventVolumes

    module Events
      type event_volumes = { data: ::Array[Orb::Events::EventVolumes::Data] }

      class EventVolumes < Orb::Internal::Type::BaseModel
        attr_accessor data: ::Array[Orb::Events::EventVolumes::Data]

        def initialize: (data: ::Array[Orb::Events::EventVolumes::Data]) -> void

        type data =
          { count: Integer, timeframe_end: Time, timeframe_start: Time }

        class Data < Orb::Internal::Type::BaseModel
          attr_accessor count: Integer

          attr_accessor timeframe_end: Time

          attr_accessor timeframe_start: Time

          def initialize: (
            count: Integer,
            timeframe_end: Time,
            timeframe_start: Time
          ) -> void
        end
      end
    end
  end
end
