module Orb
  module Models
    type subscription_usage =
      Orb::SubscriptionUsage::UngroupedSubscriptionUsage
      | Orb::SubscriptionUsage::GroupedSubscriptionUsage

    module SubscriptionUsage
      extend Orb::Internal::Type::Union

      type ungrouped_subscription_usage =
        {
          data: ::Array[Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data]
        }

      class UngroupedSubscriptionUsage < Orb::Internal::Type::BaseModel
        attr_accessor data: ::Array[Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data]

        def initialize: (
          data: ::Array[Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data]
        ) -> void

        def to_hash: -> {
          data: ::Array[Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data]
        }

        type data =
          {
            billable_metric: Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data::BillableMetric,
            usage: ::Array[Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data::Usage],
            view_mode: Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode
          }

        class Data < Orb::Internal::Type::BaseModel
          attr_accessor billable_metric: Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data::BillableMetric

          attr_accessor usage: ::Array[Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data::Usage]

          attr_accessor view_mode: Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode

          def initialize: (
            billable_metric: Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data::BillableMetric,
            usage: ::Array[Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data::Usage],
            view_mode: Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode
          ) -> void

          def to_hash: -> {
            billable_metric: Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data::BillableMetric,
            usage: ::Array[Orb::SubscriptionUsage::UngroupedSubscriptionUsage::Data::Usage],
            view_mode: Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode
          }

          type billable_metric = { id: String, name: String }

          class BillableMetric < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor name: String

            def initialize: (id: String, name: String) -> void

            def to_hash: -> { id: String, name: String }
          end

          type usage =
            { quantity: Float, timeframe_end: Time, timeframe_start: Time }

          class Usage < Orb::Internal::Type::BaseModel
            attr_accessor quantity: Float

            attr_accessor timeframe_end: Time

            attr_accessor timeframe_start: Time

            def initialize: (
              quantity: Float,
              timeframe_end: Time,
              timeframe_start: Time
            ) -> void

            def to_hash: -> {
              quantity: Float,
              timeframe_end: Time,
              timeframe_start: Time
            }
          end

          type view_mode = :periodic | :cumulative

          module ViewMode
            extend Orb::Internal::Type::Enum

            PERIODIC: :periodic
            CUMULATIVE: :cumulative

            def self?.values: -> ::Array[Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode]
          end
        end
      end

      type grouped_subscription_usage =
        {
          data: ::Array[Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data],
          pagination_metadata: Orb::PaginationMetadata?
        }

      class GroupedSubscriptionUsage < Orb::Internal::Type::BaseModel
        attr_accessor data: ::Array[Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data]

        attr_accessor pagination_metadata: Orb::PaginationMetadata?

        def initialize: (
          data: ::Array[Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data],
          ?pagination_metadata: Orb::PaginationMetadata?
        ) -> void

        def to_hash: -> {
          data: ::Array[Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data],
          pagination_metadata: Orb::PaginationMetadata?
        }

        type data =
          {
            billable_metric: Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::BillableMetric,
            metric_group: Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::MetricGroup,
            usage: ::Array[Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::Usage],
            view_mode: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode
          }

        class Data < Orb::Internal::Type::BaseModel
          attr_accessor billable_metric: Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::BillableMetric

          attr_accessor metric_group: Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::MetricGroup

          attr_accessor usage: ::Array[Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::Usage]

          attr_accessor view_mode: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode

          def initialize: (
            billable_metric: Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::BillableMetric,
            metric_group: Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::MetricGroup,
            usage: ::Array[Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::Usage],
            view_mode: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode
          ) -> void

          def to_hash: -> {
            billable_metric: Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::BillableMetric,
            metric_group: Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::MetricGroup,
            usage: ::Array[Orb::SubscriptionUsage::GroupedSubscriptionUsage::Data::Usage],
            view_mode: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode
          }

          type billable_metric = { id: String, name: String }

          class BillableMetric < Orb::Internal::Type::BaseModel
            attr_accessor id: String

            attr_accessor name: String

            def initialize: (id: String, name: String) -> void

            def to_hash: -> { id: String, name: String }
          end

          type metric_group = { property_key: String, property_value: String }

          class MetricGroup < Orb::Internal::Type::BaseModel
            attr_accessor property_key: String

            attr_accessor property_value: String

            def initialize: (
              property_key: String,
              property_value: String
            ) -> void

            def to_hash: -> { property_key: String, property_value: String }
          end

          type usage =
            { quantity: Float, timeframe_end: Time, timeframe_start: Time }

          class Usage < Orb::Internal::Type::BaseModel
            attr_accessor quantity: Float

            attr_accessor timeframe_end: Time

            attr_accessor timeframe_start: Time

            def initialize: (
              quantity: Float,
              timeframe_end: Time,
              timeframe_start: Time
            ) -> void

            def to_hash: -> {
              quantity: Float,
              timeframe_end: Time,
              timeframe_start: Time
            }
          end

          type view_mode = :periodic | :cumulative

          module ViewMode
            extend Orb::Internal::Type::Enum

            PERIODIC: :periodic
            CUMULATIVE: :cumulative

            def self?.values: -> ::Array[Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode]
          end
        end
      end

      def self?.variants: -> ::Array[Orb::Models::subscription_usage]
    end
  end
end
