module Orb
  module Models
    type subscription_usage =
      Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage
      | Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage

    class SubscriptionUsage < Orb::Union
      type ungrouped_subscription_usage =
        {
          data: ::Array[Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data]
        }

      class UngroupedSubscriptionUsage < Orb::BaseModel
        attr_accessor data: ::Array[Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data]

        def initialize:
          (
            data: ::Array[Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data]
          ) -> void
          | (
            ?Orb::Models::SubscriptionUsage::ungrouped_subscription_usage
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::SubscriptionUsage::ungrouped_subscription_usage

        type data =
          {
            billable_metric: Orb::Models::BillableMetricSimpleModel,
            usage: ::Array[Orb::Models::UsageModel],
            view_mode: Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode
          }

        class Data < Orb::BaseModel
          attr_accessor billable_metric: Orb::Models::BillableMetricSimpleModel

          attr_accessor usage: ::Array[Orb::Models::UsageModel]

          attr_accessor view_mode: Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode

          def initialize:
            (
              billable_metric: Orb::Models::BillableMetricSimpleModel,
              usage: ::Array[Orb::Models::UsageModel],
              view_mode: Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode
            ) -> void
            | (
              ?Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::data
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::data

          type view_mode = :periodic | :cumulative

          class ViewMode < Orb::Enum
            PERIODIC: :periodic
            CUMULATIVE: :cumulative

            def self.values: -> ::Array[Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage::Data::view_mode]
          end
        end
      end

      type grouped_subscription_usage =
        {
          data: ::Array[Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data],
          pagination_metadata: Orb::Models::PaginationMetadata?
        }

      class GroupedSubscriptionUsage < Orb::BaseModel
        attr_accessor data: ::Array[Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data]

        attr_accessor pagination_metadata: Orb::Models::PaginationMetadata?

        def initialize:
          (
            data: ::Array[Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data],
            pagination_metadata: Orb::Models::PaginationMetadata?
          ) -> void
          | (
            ?Orb::Models::SubscriptionUsage::grouped_subscription_usage
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::SubscriptionUsage::grouped_subscription_usage

        type data =
          {
            billable_metric: Orb::Models::BillableMetricSimpleModel,
            metric_group: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::MetricGroup,
            usage: ::Array[Orb::Models::UsageModel],
            view_mode: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode
          }

        class Data < Orb::BaseModel
          attr_accessor billable_metric: Orb::Models::BillableMetricSimpleModel

          attr_accessor metric_group: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::MetricGroup

          attr_accessor usage: ::Array[Orb::Models::UsageModel]

          attr_accessor view_mode: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode

          def initialize:
            (
              billable_metric: Orb::Models::BillableMetricSimpleModel,
              metric_group: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::MetricGroup,
              usage: ::Array[Orb::Models::UsageModel],
              view_mode: Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode
            ) -> void
            | (
              ?Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::data
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::data

          type metric_group = { property_key: String, property_value: String }

          class MetricGroup < Orb::BaseModel
            attr_accessor property_key: String

            attr_accessor property_value: String

            def initialize:
              (property_key: String, property_value: String) -> void
              | (
                ?Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::metric_group
                | Orb::BaseModel data
              ) -> void

            def to_hash: -> Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::metric_group
          end

          type view_mode = :periodic | :cumulative

          class ViewMode < Orb::Enum
            PERIODIC: :periodic
            CUMULATIVE: :cumulative

            def self.values: -> ::Array[Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage::Data::view_mode]
          end
        end
      end

      private def self.variants: -> [[nil, Orb::Models::SubscriptionUsage::UngroupedSubscriptionUsage], [nil, Orb::Models::SubscriptionUsage::GroupedSubscriptionUsage]]
    end
  end
end
