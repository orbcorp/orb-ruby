module Orb
  module Models
    type plan_version =
      {
        adjustments: ::Array[Orb::Models::PlanVersion::adjustment],
        created_at: Time,
        plan_phases: ::Array[Orb::PlanVersionPhase]?,
        prices: ::Array[Orb::Models::price],
        version: Integer
      }

    class PlanVersion < Orb::Internal::Type::BaseModel
      attr_accessor adjustments: ::Array[Orb::Models::PlanVersion::adjustment]

      attr_accessor created_at: Time

      attr_accessor plan_phases: ::Array[Orb::PlanVersionPhase]?

      attr_accessor prices: ::Array[Orb::Models::price]

      attr_accessor version: Integer

      def initialize: (
        adjustments: ::Array[Orb::Models::PlanVersion::adjustment],
        created_at: Time,
        plan_phases: ::Array[Orb::PlanVersionPhase]?,
        prices: ::Array[Orb::Models::price],
        version: Integer
      ) -> void

      def to_hash: -> {
        adjustments: ::Array[Orb::Models::PlanVersion::adjustment],
        created_at: Time,
        plan_phases: ::Array[Orb::PlanVersionPhase]?,
        prices: ::Array[Orb::Models::price],
        version: Integer
      }

      type adjustment =
        Orb::PlanPhaseUsageDiscountAdjustment
        | Orb::PlanPhaseAmountDiscountAdjustment
        | Orb::PlanPhasePercentageDiscountAdjustment
        | Orb::PlanPhaseMinimumAdjustment
        | Orb::PlanPhaseMaximumAdjustment

      module Adjustment
        extend Orb::Internal::Type::Union

        def self?.variants: -> ::Array[Orb::Models::PlanVersion::adjustment]
      end
    end
  end
end
