module Orb
  module Models
    type plan_version =
      {
        adjustments: ::Array[Orb::Models::PlanVersion::adjustment],
        created_at: Time,
        plan_phases: ::Array[Orb::PlanVersionPhase]?,
        prices: ::Array[Orb::Models::price],
        version: Integer
      }

    class PlanVersion < Orb::Internal::Type::BaseModel
      attr_accessor adjustments: ::Array[Orb::Models::PlanVersion::adjustment]

      attr_accessor created_at: Time

      attr_accessor plan_phases: ::Array[Orb::PlanVersionPhase]?

      attr_accessor prices: ::Array[Orb::Models::price]

      attr_accessor version: Integer

      def initialize: (
        adjustments: ::Array[Orb::Models::PlanVersion::adjustment],
        created_at: Time,
        plan_phases: ::Array[Orb::PlanVersionPhase]?,
        prices: ::Array[Orb::Models::price],
        version: Integer
      ) -> void

      def to_hash: -> {
        adjustments: ::Array[Orb::Models::PlanVersion::adjustment],
        created_at: Time,
        plan_phases: ::Array[Orb::PlanVersionPhase]?,
        prices: ::Array[Orb::Models::price],
        version: Integer
      }

      type adjustment =
        Orb::PlanVersion::Adjustment::UsageDiscount
        | Orb::PlanVersion::Adjustment::AmountDiscount
        | Orb::PlanVersion::Adjustment::PercentageDiscount
        | Orb::PlanVersion::Adjustment::Minimum
        | Orb::PlanVersion::Adjustment::Maximum

      module Adjustment
        extend Orb::Internal::Type::Union

        type usage_discount =
          {
            id: String,
            adjustment_type: :usage_discount,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::UsageDiscount::Filter],
            is_invoice_level: bool,
            plan_phase_order: Integer?,
            reason: String?,
            usage_discount: Float
          }

        class UsageDiscount < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :usage_discount

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::PlanVersion::Adjustment::UsageDiscount::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor plan_phase_order: Integer?

          attr_accessor reason: String?

          attr_accessor usage_discount: Float

          def initialize: (
            id: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::UsageDiscount::Filter],
            is_invoice_level: bool,
            plan_phase_order: Integer?,
            reason: String?,
            usage_discount: Float,
            ?adjustment_type: :usage_discount
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :usage_discount,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::UsageDiscount::Filter],
            is_invoice_level: bool,
            plan_phase_order: Integer?,
            reason: String?,
            usage_discount: Float
          }

          type filter =
            {
              field: Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::field

            attr_accessor operator: Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::UsageDiscount::Filter::operator]
            end
          end
        end

        type amount_discount =
          {
            id: String,
            adjustment_type: :amount_discount,
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::AmountDiscount::Filter],
            is_invoice_level: bool,
            plan_phase_order: Integer?,
            reason: String?
          }

        class AmountDiscount < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :amount_discount

          attr_accessor amount_discount: String

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::PlanVersion::Adjustment::AmountDiscount::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor plan_phase_order: Integer?

          attr_accessor reason: String?

          def initialize: (
            id: String,
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::AmountDiscount::Filter],
            is_invoice_level: bool,
            plan_phase_order: Integer?,
            reason: String?,
            ?adjustment_type: :amount_discount
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :amount_discount,
            amount_discount: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::AmountDiscount::Filter],
            is_invoice_level: bool,
            plan_phase_order: Integer?,
            reason: String?
          }

          type filter =
            {
              field: Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::field

            attr_accessor operator: Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::AmountDiscount::Filter::operator]
            end
          end
        end

        type percentage_discount =
          {
            id: String,
            adjustment_type: :percentage_discount,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::PercentageDiscount::Filter],
            is_invoice_level: bool,
            percentage_discount: Float,
            plan_phase_order: Integer?,
            reason: String?
          }

        class PercentageDiscount < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :percentage_discount

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::PlanVersion::Adjustment::PercentageDiscount::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor percentage_discount: Float

          attr_accessor plan_phase_order: Integer?

          attr_accessor reason: String?

          def initialize: (
            id: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::PercentageDiscount::Filter],
            is_invoice_level: bool,
            percentage_discount: Float,
            plan_phase_order: Integer?,
            reason: String?,
            ?adjustment_type: :percentage_discount
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :percentage_discount,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::PercentageDiscount::Filter],
            is_invoice_level: bool,
            percentage_discount: Float,
            plan_phase_order: Integer?,
            reason: String?
          }

          type filter =
            {
              field: Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::field

            attr_accessor operator: Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::PercentageDiscount::Filter::operator]
            end
          end
        end

        type minimum =
          {
            id: String,
            adjustment_type: :minimum,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::Minimum::Filter],
            is_invoice_level: bool,
            item_id: String,
            minimum_amount: String,
            plan_phase_order: Integer?,
            reason: String?
          }

        class Minimum < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :minimum

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::PlanVersion::Adjustment::Minimum::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor item_id: String

          attr_accessor minimum_amount: String

          attr_accessor plan_phase_order: Integer?

          attr_accessor reason: String?

          def initialize: (
            id: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::Minimum::Filter],
            is_invoice_level: bool,
            item_id: String,
            minimum_amount: String,
            plan_phase_order: Integer?,
            reason: String?,
            ?adjustment_type: :minimum
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :minimum,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::Minimum::Filter],
            is_invoice_level: bool,
            item_id: String,
            minimum_amount: String,
            plan_phase_order: Integer?,
            reason: String?
          }

          type filter =
            {
              field: Orb::Models::PlanVersion::Adjustment::Minimum::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::Minimum::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::PlanVersion::Adjustment::Minimum::Filter::field

            attr_accessor operator: Orb::Models::PlanVersion::Adjustment::Minimum::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::PlanVersion::Adjustment::Minimum::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::Minimum::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::PlanVersion::Adjustment::Minimum::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::Minimum::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::Minimum::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::Minimum::Filter::operator]
            end
          end
        end

        type maximum =
          {
            id: String,
            adjustment_type: :maximum,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::Maximum::Filter],
            is_invoice_level: bool,
            maximum_amount: String,
            plan_phase_order: Integer?,
            reason: String?
          }

        class Maximum < Orb::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor adjustment_type: :maximum

          attr_accessor applies_to_price_ids: ::Array[String]

          attr_accessor filters: ::Array[Orb::PlanVersion::Adjustment::Maximum::Filter]

          attr_accessor is_invoice_level: bool

          attr_accessor maximum_amount: String

          attr_accessor plan_phase_order: Integer?

          attr_accessor reason: String?

          def initialize: (
            id: String,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::Maximum::Filter],
            is_invoice_level: bool,
            maximum_amount: String,
            plan_phase_order: Integer?,
            reason: String?,
            ?adjustment_type: :maximum
          ) -> void

          def to_hash: -> {
            id: String,
            adjustment_type: :maximum,
            applies_to_price_ids: ::Array[String],
            filters: ::Array[Orb::PlanVersion::Adjustment::Maximum::Filter],
            is_invoice_level: bool,
            maximum_amount: String,
            plan_phase_order: Integer?,
            reason: String?
          }

          type filter =
            {
              field: Orb::Models::PlanVersion::Adjustment::Maximum::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::Maximum::Filter::operator,
              values: ::Array[String]
            }

          class Filter < Orb::Internal::Type::BaseModel
            attr_accessor field: Orb::Models::PlanVersion::Adjustment::Maximum::Filter::field

            attr_accessor operator: Orb::Models::PlanVersion::Adjustment::Maximum::Filter::operator

            attr_accessor values: ::Array[String]

            def initialize: (
              field: Orb::Models::PlanVersion::Adjustment::Maximum::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::Maximum::Filter::operator,
              values: ::Array[String]
            ) -> void

            def to_hash: -> {
              field: Orb::Models::PlanVersion::Adjustment::Maximum::Filter::field,
              operator: Orb::Models::PlanVersion::Adjustment::Maximum::Filter::operator,
              values: ::Array[String]
            }

            type field =
              :price_id | :item_id | :price_type | :currency | :pricing_unit_id

            module Field
              extend Orb::Internal::Type::Enum

              PRICE_ID: :price_id
              ITEM_ID: :item_id
              PRICE_TYPE: :price_type
              CURRENCY: :currency
              PRICING_UNIT_ID: :pricing_unit_id

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::Maximum::Filter::field]
            end

            type operator = :includes | :excludes

            module Operator
              extend Orb::Internal::Type::Enum

              INCLUDES: :includes
              EXCLUDES: :excludes

              def self?.values: -> ::Array[Orb::Models::PlanVersion::Adjustment::Maximum::Filter::operator]
            end
          end
        end

        def self?.variants: -> ::Array[Orb::Models::PlanVersion::adjustment]
      end
    end
  end
end
