module Orb
  module Models
    type subscription_model =
      {
        id: String,
        active_plan_phase_order: Integer?,
        adjustment_intervals: ::Array[Orb::Models::AdjustmentIntervalModel],
        auto_collection: bool?,
        billing_cycle_anchor_configuration: Orb::Models::BillingCycleAnchorConfigurationModel,
        billing_cycle_day: Integer,
        created_at: Time,
        current_billing_period_end_date: Time?,
        current_billing_period_start_date: Time?,
        customer: Orb::Models::CustomerModel,
        default_invoice_memo: String?,
        discount_intervals: ::Array[Orb::Models::SubscriptionModel::discount_interval],
        end_date: Time?,
        fixed_fee_quantity_schedule: ::Array[Orb::Models::FixedFeeQuantityScheduleEntryModel],
        invoicing_threshold: String?,
        maximum_intervals: ::Array[Orb::Models::MaximumIntervalModel],
        metadata: ::Hash[Symbol, String],
        minimum_intervals: ::Array[Orb::Models::MinimumIntervalModel],
        net_terms: Integer,
        plan: Orb::Models::PlanModel,
        price_intervals: ::Array[Orb::Models::PriceIntervalModel],
        redeemed_coupon: Orb::Models::CouponRedemptionModel?,
        start_date: Time,
        status: Orb::Models::SubscriptionModel::status,
        trial_info: Orb::Models::SubscriptionTrialInfoModel
      }

    class SubscriptionModel < Orb::BaseModel
      attr_accessor id: String

      attr_accessor active_plan_phase_order: Integer?

      attr_accessor adjustment_intervals: ::Array[Orb::Models::AdjustmentIntervalModel]

      attr_accessor auto_collection: bool?

      attr_accessor billing_cycle_anchor_configuration: Orb::Models::BillingCycleAnchorConfigurationModel

      attr_accessor billing_cycle_day: Integer

      attr_accessor created_at: Time

      attr_accessor current_billing_period_end_date: Time?

      attr_accessor current_billing_period_start_date: Time?

      attr_accessor customer: Orb::Models::CustomerModel

      attr_accessor default_invoice_memo: String?

      attr_accessor discount_intervals: ::Array[Orb::Models::SubscriptionModel::discount_interval]

      attr_accessor end_date: Time?

      attr_accessor fixed_fee_quantity_schedule: ::Array[Orb::Models::FixedFeeQuantityScheduleEntryModel]

      attr_accessor invoicing_threshold: String?

      attr_accessor maximum_intervals: ::Array[Orb::Models::MaximumIntervalModel]

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor minimum_intervals: ::Array[Orb::Models::MinimumIntervalModel]

      attr_accessor net_terms: Integer

      attr_accessor plan: Orb::Models::PlanModel

      attr_accessor price_intervals: ::Array[Orb::Models::PriceIntervalModel]

      attr_accessor redeemed_coupon: Orb::Models::CouponRedemptionModel?

      attr_accessor start_date: Time

      attr_accessor status: Orb::Models::SubscriptionModel::status

      attr_accessor trial_info: Orb::Models::SubscriptionTrialInfoModel

      def initialize:
        (
          id: String,
          active_plan_phase_order: Integer?,
          adjustment_intervals: ::Array[Orb::Models::AdjustmentIntervalModel],
          auto_collection: bool?,
          billing_cycle_anchor_configuration: Orb::Models::BillingCycleAnchorConfigurationModel,
          billing_cycle_day: Integer,
          created_at: Time,
          current_billing_period_end_date: Time?,
          current_billing_period_start_date: Time?,
          customer: Orb::Models::CustomerModel,
          default_invoice_memo: String?,
          discount_intervals: ::Array[Orb::Models::SubscriptionModel::discount_interval],
          end_date: Time?,
          fixed_fee_quantity_schedule: ::Array[Orb::Models::FixedFeeQuantityScheduleEntryModel],
          invoicing_threshold: String?,
          maximum_intervals: ::Array[Orb::Models::MaximumIntervalModel],
          metadata: ::Hash[Symbol, String],
          minimum_intervals: ::Array[Orb::Models::MinimumIntervalModel],
          net_terms: Integer,
          plan: Orb::Models::PlanModel,
          price_intervals: ::Array[Orb::Models::PriceIntervalModel],
          redeemed_coupon: Orb::Models::CouponRedemptionModel?,
          start_date: Time,
          status: Orb::Models::SubscriptionModel::status,
          trial_info: Orb::Models::SubscriptionTrialInfoModel
        ) -> void
        | (?Orb::Models::subscription_model | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::subscription_model

      type discount_interval =
        Orb::Models::AmountDiscountIntervalModel
        | Orb::Models::PercentageDiscountIntervalModel
        | Orb::Models::UsageDiscountIntervalModel

      class DiscountInterval < Orb::Union
        private def self.variants: -> [[:amount, Orb::Models::AmountDiscountIntervalModel], [:percentage, Orb::Models::PercentageDiscountIntervalModel], [:usage, Orb::Models::UsageDiscountIntervalModel]]
      end

      type status = :active | :ended | :upcoming

      class Status < Orb::Enum
        ACTIVE: :active
        ENDED: :ended
        UPCOMING: :upcoming

        def self.values: -> ::Array[Orb::Models::SubscriptionModel::status]
      end
    end
  end
end
