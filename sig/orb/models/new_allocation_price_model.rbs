module Orb
  module Models
    type new_allocation_price_model =
      {
        amount: String,
        cadence: Orb::Models::NewAllocationPriceModel::cadence,
        currency: String,
        expires_at_end_of_cadence: bool
      }

    class NewAllocationPriceModel < Orb::BaseModel
      attr_accessor amount: String

      attr_accessor cadence: Orb::Models::NewAllocationPriceModel::cadence

      attr_accessor currency: String

      attr_accessor expires_at_end_of_cadence: bool

      def initialize:
        (
          amount: String,
          cadence: Orb::Models::NewAllocationPriceModel::cadence,
          currency: String,
          expires_at_end_of_cadence: bool
        ) -> void
        | (
          ?Orb::Models::new_allocation_price_model | Orb::BaseModel data
        ) -> void

      def to_hash: -> Orb::Models::new_allocation_price_model

      type cadence =
        :one_time | :monthly | :quarterly | :semi_annual | :annual | :custom

      class Cadence < Orb::Enum
        ONE_TIME: :one_time
        MONTHLY: :monthly
        QUARTERLY: :quarterly
        SEMI_ANNUAL: :semi_annual
        ANNUAL: :annual
        CUSTOM: :custom

        def self.values: -> ::Array[Orb::Models::NewAllocationPriceModel::cadence]
      end
    end
  end
end
