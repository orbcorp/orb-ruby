module Orb
  module Models
    type item =
      {
        id: String,
        created_at: Time,
        external_connections: ::Array[Orb::Item::ExternalConnection],
        name: String
      }

    class Item < Orb::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Time

      attr_accessor external_connections: ::Array[Orb::Item::ExternalConnection]

      attr_accessor name: String

      def initialize: (
        id: String,
        created_at: Time,
        external_connections: ::Array[Orb::Item::ExternalConnection],
        name: String
      ) -> void

      type external_connection =
        {
          external_connection_name: Orb::Item::ExternalConnection::external_connection_name,
          external_entity_id: String
        }

      class ExternalConnection < Orb::Internal::Type::BaseModel
        attr_accessor external_connection_name: Orb::Item::ExternalConnection::external_connection_name

        attr_accessor external_entity_id: String

        def initialize: (
          external_connection_name: Orb::Item::ExternalConnection::external_connection_name,
          external_entity_id: String
        ) -> void

        type external_connection_name =
          :stripe
          | :quickbooks
          | :"bill.com"
          | :netsuite
          | :taxjar
          | :avalara
          | :anrok

        module ExternalConnectionName
          extend Orb::Internal::Type::Enum

          STRIPE: :stripe
          QUICKBOOKS: :quickbooks
          BILL_COM: :"bill.com"
          NETSUITE: :netsuite
          TAXJAR: :taxjar
          AVALARA: :avalara
          ANROK: :anrok

          def self?.values: -> ::Array[Orb::Item::ExternalConnection::external_connection_name]
        end
      end
    end
  end
end
