module Orb
  module Models
    type customer_create_params =
      {
        email: String,
        name: String,
        accounting_sync_configuration: Orb::Models::NewAccountingSyncConfigurationModel?,
        additional_emails: ::Array[String]?,
        auto_collection: bool?,
        billing_address: Orb::Models::AddressInputModel?,
        currency: String?,
        email_delivery: bool?,
        external_customer_id: String?,
        hierarchy: Orb::Models::CustomerHierarchyConfigModel?,
        metadata: ::Hash[Symbol, String?]?,
        payment_provider: Orb::Models::CustomerCreateParams::payment_provider?,
        payment_provider_id: String?,
        reporting_configuration: Orb::Models::NewReportingConfigurationModel?,
        shipping_address: Orb::Models::AddressInputModel?,
        tax_configuration: Orb::Models::new_tax_configuration_model?,
        tax_id: Orb::Models::CustomerTaxIDModel?,
        timezone: String?
      }
      & Orb::request_parameters

    class CustomerCreateParams < Orb::BaseModel
      extend Orb::RequestParameters::Converter
      include Orb::RequestParameters

      attr_accessor email: String

      attr_accessor name: String

      attr_accessor accounting_sync_configuration: Orb::Models::NewAccountingSyncConfigurationModel?

      attr_accessor additional_emails: ::Array[String]?

      attr_accessor auto_collection: bool?

      attr_accessor billing_address: Orb::Models::AddressInputModel?

      attr_accessor currency: String?

      attr_accessor email_delivery: bool?

      attr_accessor external_customer_id: String?

      attr_accessor hierarchy: Orb::Models::CustomerHierarchyConfigModel?

      attr_accessor metadata: ::Hash[Symbol, String?]?

      attr_accessor payment_provider: Orb::Models::CustomerCreateParams::payment_provider?

      attr_accessor payment_provider_id: String?

      attr_accessor reporting_configuration: Orb::Models::NewReportingConfigurationModel?

      attr_accessor shipping_address: Orb::Models::AddressInputModel?

      attr_accessor tax_configuration: Orb::Models::new_tax_configuration_model?

      attr_accessor tax_id: Orb::Models::CustomerTaxIDModel?

      attr_accessor timezone: String?

      def initialize:
        (
          email: String,
          name: String,
          accounting_sync_configuration: Orb::Models::NewAccountingSyncConfigurationModel?,
          additional_emails: ::Array[String]?,
          auto_collection: bool?,
          billing_address: Orb::Models::AddressInputModel?,
          currency: String?,
          email_delivery: bool?,
          external_customer_id: String?,
          hierarchy: Orb::Models::CustomerHierarchyConfigModel?,
          metadata: ::Hash[Symbol, String?]?,
          payment_provider: Orb::Models::CustomerCreateParams::payment_provider?,
          payment_provider_id: String?,
          reporting_configuration: Orb::Models::NewReportingConfigurationModel?,
          shipping_address: Orb::Models::AddressInputModel?,
          tax_configuration: Orb::Models::new_tax_configuration_model?,
          tax_id: Orb::Models::CustomerTaxIDModel?,
          timezone: String?,
          request_options: Orb::request_opts
        ) -> void
        | (?Orb::Models::customer_create_params | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::customer_create_params

      type payment_provider =
        :quickbooks | :"bill.com" | :stripe_charge | :stripe_invoice | :netsuite

      class PaymentProvider < Orb::Enum
        QUICKBOOKS: :quickbooks
        BILL_COM: :"bill.com"
        STRIPE_CHARGE: :stripe_charge
        STRIPE_INVOICE: :stripe_invoice
        NETSUITE: :netsuite

        def self.values: -> ::Array[Orb::Models::CustomerCreateParams::payment_provider]
      end
    end
  end
end
