module Orb
  module Models
    type mutated_subscription =
      {
        id: String,
        active_plan_phase_order: Integer?,
        adjustment_intervals: ::Array[Orb::AdjustmentInterval],
        auto_collection: bool?,
        billing_cycle_anchor_configuration: Orb::BillingCycleAnchorConfiguration,
        billing_cycle_day: Integer,
        created_at: Time,
        current_billing_period_end_date: Time?,
        current_billing_period_start_date: Time?,
        customer: Orb::Customer,
        default_invoice_memo: String?,
        discount_intervals: ::Array[Orb::Models::MutatedSubscription::discount_interval],
        end_date: Time?,
        fixed_fee_quantity_schedule: ::Array[Orb::FixedFeeQuantityScheduleEntry],
        invoicing_threshold: String?,
        maximum_intervals: ::Array[Orb::MaximumInterval],
        metadata: ::Hash[Symbol, String],
        minimum_intervals: ::Array[Orb::MinimumInterval],
        name: String,
        net_terms: Integer,
        pending_subscription_change: Orb::SubscriptionChangeMinified?,
        plan: Orb::Plan?,
        price_intervals: ::Array[Orb::PriceInterval],
        redeemed_coupon: Orb::CouponRedemption?,
        start_date: Time,
        status: Orb::Models::MutatedSubscription::status,
        trial_info: Orb::SubscriptionTrialInfo,
        changed_resources: Orb::ChangedSubscriptionResources?
      }

    class MutatedSubscription < Orb::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor active_plan_phase_order: Integer?

      attr_accessor adjustment_intervals: ::Array[Orb::AdjustmentInterval]

      attr_accessor auto_collection: bool?

      attr_accessor billing_cycle_anchor_configuration: Orb::BillingCycleAnchorConfiguration

      attr_accessor billing_cycle_day: Integer

      attr_accessor created_at: Time

      attr_accessor current_billing_period_end_date: Time?

      attr_accessor current_billing_period_start_date: Time?

      attr_accessor customer: Orb::Customer

      attr_accessor default_invoice_memo: String?

      attr_accessor discount_intervals: ::Array[Orb::Models::MutatedSubscription::discount_interval]

      attr_accessor end_date: Time?

      attr_accessor fixed_fee_quantity_schedule: ::Array[Orb::FixedFeeQuantityScheduleEntry]

      attr_accessor invoicing_threshold: String?

      attr_accessor maximum_intervals: ::Array[Orb::MaximumInterval]

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor minimum_intervals: ::Array[Orb::MinimumInterval]

      attr_accessor name: String

      attr_accessor net_terms: Integer

      attr_accessor pending_subscription_change: Orb::SubscriptionChangeMinified?

      attr_accessor plan: Orb::Plan?

      attr_accessor price_intervals: ::Array[Orb::PriceInterval]

      attr_accessor redeemed_coupon: Orb::CouponRedemption?

      attr_accessor start_date: Time

      attr_accessor status: Orb::Models::MutatedSubscription::status

      attr_accessor trial_info: Orb::SubscriptionTrialInfo

      attr_accessor changed_resources: Orb::ChangedSubscriptionResources?

      def initialize: (
        id: String,
        active_plan_phase_order: Integer?,
        adjustment_intervals: ::Array[Orb::AdjustmentInterval],
        auto_collection: bool?,
        billing_cycle_anchor_configuration: Orb::BillingCycleAnchorConfiguration,
        billing_cycle_day: Integer,
        created_at: Time,
        current_billing_period_end_date: Time?,
        current_billing_period_start_date: Time?,
        customer: Orb::Customer,
        default_invoice_memo: String?,
        discount_intervals: ::Array[Orb::Models::MutatedSubscription::discount_interval],
        end_date: Time?,
        fixed_fee_quantity_schedule: ::Array[Orb::FixedFeeQuantityScheduleEntry],
        invoicing_threshold: String?,
        maximum_intervals: ::Array[Orb::MaximumInterval],
        metadata: ::Hash[Symbol, String],
        minimum_intervals: ::Array[Orb::MinimumInterval],
        name: String,
        net_terms: Integer,
        pending_subscription_change: Orb::SubscriptionChangeMinified?,
        plan: Orb::Plan?,
        price_intervals: ::Array[Orb::PriceInterval],
        redeemed_coupon: Orb::CouponRedemption?,
        start_date: Time,
        status: Orb::Models::MutatedSubscription::status,
        trial_info: Orb::SubscriptionTrialInfo,
        ?changed_resources: Orb::ChangedSubscriptionResources?
      ) -> void

      def to_hash: -> {
        id: String,
        active_plan_phase_order: Integer?,
        adjustment_intervals: ::Array[Orb::AdjustmentInterval],
        auto_collection: bool?,
        billing_cycle_anchor_configuration: Orb::BillingCycleAnchorConfiguration,
        billing_cycle_day: Integer,
        created_at: Time,
        current_billing_period_end_date: Time?,
        current_billing_period_start_date: Time?,
        customer: Orb::Customer,
        default_invoice_memo: String?,
        discount_intervals: ::Array[Orb::Models::MutatedSubscription::discount_interval],
        end_date: Time?,
        fixed_fee_quantity_schedule: ::Array[Orb::FixedFeeQuantityScheduleEntry],
        invoicing_threshold: String?,
        maximum_intervals: ::Array[Orb::MaximumInterval],
        metadata: ::Hash[Symbol, String],
        minimum_intervals: ::Array[Orb::MinimumInterval],
        name: String,
        net_terms: Integer,
        pending_subscription_change: Orb::SubscriptionChangeMinified?,
        plan: Orb::Plan?,
        price_intervals: ::Array[Orb::PriceInterval],
        redeemed_coupon: Orb::CouponRedemption?,
        start_date: Time,
        status: Orb::Models::MutatedSubscription::status,
        trial_info: Orb::SubscriptionTrialInfo,
        changed_resources: Orb::ChangedSubscriptionResources?
      }

      type discount_interval =
        Orb::AmountDiscountInterval
        | Orb::PercentageDiscountInterval
        | Orb::UsageDiscountInterval

      module DiscountInterval
        extend Orb::Internal::Type::Union

        def self?.variants: -> ::Array[Orb::Models::MutatedSubscription::discount_interval]
      end

      type status = :active | :ended | :upcoming

      module Status
        extend Orb::Internal::Type::Enum

        ACTIVE: :active
        ENDED: :ended
        UPCOMING: :upcoming

        def self?.values: -> ::Array[Orb::Models::MutatedSubscription::status]
      end
    end
  end
end
