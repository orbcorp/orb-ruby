module Orb
  module Models
    type alert =
      {
        id: String,
        created_at: Time,
        currency: String?,
        customer: Orb::Alert::Customer?,
        enabled: bool,
        metric: Orb::Alert::Metric?,
        plan: Orb::Alert::Plan?,
        subscription: Orb::Alert::Subscription?,
        thresholds: ::Array[Orb::Alert::Threshold]?,
        type: Orb::Models::Alert::type_
      }

    class Alert < Orb::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: Time

      attr_accessor currency: String?

      attr_accessor customer: Orb::Alert::Customer?

      attr_accessor enabled: bool

      attr_accessor metric: Orb::Alert::Metric?

      attr_accessor plan: Orb::Alert::Plan?

      attr_accessor subscription: Orb::Alert::Subscription?

      attr_accessor thresholds: ::Array[Orb::Alert::Threshold]?

      attr_accessor type: Orb::Models::Alert::type_

      def initialize: (
        id: String,
        created_at: Time,
        currency: String?,
        customer: Orb::Alert::Customer?,
        enabled: bool,
        metric: Orb::Alert::Metric?,
        plan: Orb::Alert::Plan?,
        subscription: Orb::Alert::Subscription?,
        thresholds: ::Array[Orb::Alert::Threshold]?,
        type: Orb::Models::Alert::type_
      ) -> void

      def to_hash: -> {
        id: String,
        created_at: Time,
        currency: String?,
        customer: Orb::Alert::Customer?,
        enabled: bool,
        metric: Orb::Alert::Metric?,
        plan: Orb::Alert::Plan?,
        subscription: Orb::Alert::Subscription?,
        thresholds: ::Array[Orb::Alert::Threshold]?,
        type: Orb::Models::Alert::type_
      }

      type customer = { id: String, external_customer_id: String? }

      class Customer < Orb::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor external_customer_id: String?

        def initialize: (id: String, external_customer_id: String?) -> void

        def to_hash: -> { id: String, external_customer_id: String? }
      end

      type metric = { id: String }

      class Metric < Orb::Internal::Type::BaseModel
        attr_accessor id: String

        def initialize: (id: String) -> void

        def to_hash: -> { id: String }
      end

      type plan =
        {
          id: String?,
          external_plan_id: String?,
          name: String?,
          plan_version: String
        }

      class Plan < Orb::Internal::Type::BaseModel
        attr_accessor id: String?

        attr_accessor external_plan_id: String?

        attr_accessor name: String?

        attr_accessor plan_version: String

        def initialize: (
          id: String?,
          external_plan_id: String?,
          name: String?,
          plan_version: String
        ) -> void

        def to_hash: -> {
          id: String?,
          external_plan_id: String?,
          name: String?,
          plan_version: String
        }
      end

      type subscription = { id: String }

      class Subscription < Orb::Internal::Type::BaseModel
        attr_accessor id: String

        def initialize: (id: String) -> void

        def to_hash: -> { id: String }
      end

      type threshold = { value: Float }

      class Threshold < Orb::Internal::Type::BaseModel
        attr_accessor value: Float

        def initialize: (value: Float) -> void

        def to_hash: -> { value: Float }
      end

      type type_ =
        :credit_balance_depleted
        | :credit_balance_dropped
        | :credit_balance_recovered
        | :usage_exceeded
        | :cost_exceeded

      module Type
        extend Orb::Internal::Type::Enum

        CREDIT_BALANCE_DEPLETED: :credit_balance_depleted
        CREDIT_BALANCE_DROPPED: :credit_balance_dropped
        CREDIT_BALANCE_RECOVERED: :credit_balance_recovered
        USAGE_EXCEEDED: :usage_exceeded
        COST_EXCEEDED: :cost_exceeded

        def self?.values: -> ::Array[Orb::Models::Alert::type_]
      end
    end
  end
end
