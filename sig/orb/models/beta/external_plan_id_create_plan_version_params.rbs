module Orb
  module Models
    module Beta
      type external_plan_id_create_plan_version_params =
        {
          version: Integer,
          add_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment]?,
          add_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice]?,
          remove_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemoveAdjustment]?,
          remove_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemovePrice]?,
          replace_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment]?,
          replace_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice]?,
          set_as_default: bool?
        }
        & Orb::Internal::Type::request_parameters

      class ExternalPlanIDCreatePlanVersionParams < Orb::Internal::Type::BaseModel
        extend Orb::Internal::Type::RequestParameters::Converter
        include Orb::Internal::Type::RequestParameters

        attr_accessor version: Integer

        attr_accessor add_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment]?

        attr_accessor add_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice]?

        attr_accessor remove_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemoveAdjustment]?

        attr_accessor remove_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemovePrice]?

        attr_accessor replace_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment]?

        attr_accessor replace_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice]?

        attr_accessor set_as_default: bool?

        def initialize: (
          version: Integer,
          ?add_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment]?,
          ?add_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice]?,
          ?remove_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemoveAdjustment]?,
          ?remove_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemovePrice]?,
          ?replace_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment]?,
          ?replace_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice]?,
          ?set_as_default: bool?,
          ?request_options: Orb::request_opts
        ) -> void

        def to_hash: -> {
          version: Integer,
          add_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment]?,
          add_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice]?,
          remove_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemoveAdjustment]?,
          remove_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::RemovePrice]?,
          replace_adjustments: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment]?,
          replace_prices: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice]?,
          set_as_default: bool?,
          request_options: Orb::RequestOptions
        }

        type add_adjustment =
          {
            adjustment: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::adjustment,
            plan_phase_order: Integer?
          }

        class AddAdjustment < Orb::Internal::Type::BaseModel
          attr_accessor adjustment: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::adjustment

          attr_accessor plan_phase_order: Integer?

          def initialize: (
            adjustment: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::adjustment,
            ?plan_phase_order: Integer?
          ) -> void

          def to_hash: -> {
            adjustment: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::adjustment,
            plan_phase_order: Integer?
          }

          type adjustment =
            Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum

          module Adjustment
            extend Orb::Internal::Type::Union

            type percentage_discount =
              {
                adjustment_type: :percentage_discount,
                percentage_discount: Float,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::price_type?
              }

            class PercentageDiscount < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :percentage_discount

              attr_accessor percentage_discount: Float

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::price_type?

              def initialize: (
                percentage_discount: Float,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::price_type?,
                ?adjustment_type: :percentage_discount
              ) -> void

              def to_hash: -> {
                adjustment_type: :percentage_discount,
                percentage_discount: Float,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::PercentageDiscount::price_type]
              end
            end

            type usage_discount =
              {
                adjustment_type: :usage_discount,
                usage_discount: Float,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::price_type?
              }

            class UsageDiscount < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :usage_discount

              attr_accessor usage_discount: Float

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::price_type?

              def initialize: (
                usage_discount: Float,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::price_type?,
                ?adjustment_type: :usage_discount
              ) -> void

              def to_hash: -> {
                adjustment_type: :usage_discount,
                usage_discount: Float,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::UsageDiscount::price_type]
              end
            end

            type amount_discount =
              {
                adjustment_type: :amount_discount,
                amount_discount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::price_type?
              }

            class AmountDiscount < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :amount_discount

              attr_accessor amount_discount: String

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::price_type?

              def initialize: (
                amount_discount: String,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::price_type?,
                ?adjustment_type: :amount_discount
              ) -> void

              def to_hash: -> {
                adjustment_type: :amount_discount,
                amount_discount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::AmountDiscount::price_type]
              end
            end

            type minimum =
              {
                adjustment_type: :minimum,
                item_id: String,
                minimum_amount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::price_type?
              }

            class Minimum < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :minimum

              attr_accessor item_id: String

              attr_accessor minimum_amount: String

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::price_type?

              def initialize: (
                item_id: String,
                minimum_amount: String,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::price_type?,
                ?adjustment_type: :minimum
              ) -> void

              def to_hash: -> {
                adjustment_type: :minimum,
                item_id: String,
                minimum_amount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Minimum::price_type]
              end
            end

            type maximum =
              {
                adjustment_type: :maximum,
                maximum_amount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::price_type?
              }

            class Maximum < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :maximum

              attr_accessor maximum_amount: String

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::price_type?

              def initialize: (
                maximum_amount: String,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::price_type?,
                ?adjustment_type: :maximum
              ) -> void

              def to_hash: -> {
                adjustment_type: :maximum,
                maximum_amount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::Adjustment::Maximum::price_type]
              end
            end

            def self?.variants: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddAdjustment::adjustment]
          end
        end

        type add_price =
          {
            allocation_price: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice?,
            plan_phase_order: Integer?,
            price: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::price?
          }

        class AddPrice < Orb::Internal::Type::BaseModel
          attr_accessor allocation_price: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice?

          attr_accessor plan_phase_order: Integer?

          attr_accessor price: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::price?

          def initialize: (
            ?allocation_price: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice?,
            ?plan_phase_order: Integer?,
            ?price: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::price?
          ) -> void

          def to_hash: -> {
            allocation_price: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice?,
            plan_phase_order: Integer?,
            price: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::price?
          }

          type allocation_price =
            {
              amount: String,
              cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::cadence,
              currency: String,
              custom_expiration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration?,
              expires_at_end_of_cadence: bool?
            }

          class AllocationPrice < Orb::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::cadence

            attr_accessor currency: String

            attr_accessor custom_expiration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration?

            attr_accessor expires_at_end_of_cadence: bool?

            def initialize: (
              amount: String,
              cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::cadence,
              currency: String,
              ?custom_expiration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration?,
              ?expires_at_end_of_cadence: bool?
            ) -> void

            def to_hash: -> {
              amount: String,
              cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::cadence,
              currency: String,
              custom_expiration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration?,
              expires_at_end_of_cadence: bool?
            }

            type cadence =
              :one_time
              | :monthly
              | :quarterly
              | :semi_annual
              | :annual
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ONE_TIME: :one_time
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              SEMI_ANNUAL: :semi_annual
              ANNUAL: :annual
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::cadence]
            end

            type custom_expiration =
              {
                duration: Integer,
                duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::duration_unit
              }

            class CustomExpiration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::AllocationPrice::CustomExpiration::duration_unit]
              end
            end
          end

          type price =
            Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered

          module Price
            extend Orb::Internal::Type::Union

            type unit =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::cadence,
                item_id: String,
                model_type: :unit,
                name: String,
                unit_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Unit < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :unit

              attr_accessor name: String

              attr_accessor unit_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::cadence,
                item_id: String,
                name: String,
                unit_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :unit
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::cadence,
                item_id: String,
                model_type: :unit,
                name: String,
                unit_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::UnitConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::cadence]
              end

              type unit_config = { unit_amount: String }

              class UnitConfig < Orb::Internal::Type::BaseModel
                attr_accessor unit_amount: String

                def initialize: (unit_amount: String) -> void

                def to_hash: -> { unit_amount: String }
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Unit::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type package =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::cadence,
                item_id: String,
                model_type: :package,
                name: String,
                package_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Package < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :package

              attr_accessor name: String

              attr_accessor package_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::cadence,
                item_id: String,
                name: String,
                package_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :package
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::cadence,
                item_id: String,
                model_type: :package,
                name: String,
                package_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::PackageConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::cadence]
              end

              type package_config =
                { package_amount: String, package_size: Integer }

              class PackageConfig < Orb::Internal::Type::BaseModel
                attr_accessor package_amount: String

                attr_accessor package_size: Integer

                def initialize: (
                  package_amount: String,
                  package_size: Integer
                ) -> void

                def to_hash: -> {
                  package_amount: String,
                  package_size: Integer
                }
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Package::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type matrix =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::cadence,
                item_id: String,
                matrix_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig,
                model_type: :matrix,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Matrix < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::cadence

              attr_accessor item_id: String

              attr_accessor matrix_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig

              attr_accessor model_type: :matrix

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::cadence,
                item_id: String,
                matrix_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :matrix
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::cadence,
                item_id: String,
                matrix_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig,
                model_type: :matrix,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::cadence]
              end

              type matrix_config =
                {
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue]
                }

              class MatrixConfig < Orb::Internal::Type::BaseModel
                attr_accessor default_unit_amount: String

                attr_accessor dimensions: ::Array[String?]

                attr_accessor matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue]

                def initialize: (
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue]
                ) -> void

                def to_hash: -> {
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::MatrixConfig::MatrixValue]
                }

                type matrix_value =
                  { dimension_values: ::Array[String?], unit_amount: String }

                class MatrixValue < Orb::Internal::Type::BaseModel
                  attr_accessor dimension_values: ::Array[String?]

                  attr_accessor unit_amount: String

                  def initialize: (
                    dimension_values: ::Array[String?],
                    unit_amount: String
                  ) -> void

                  def to_hash: -> {
                    dimension_values: ::Array[String?],
                    unit_amount: String
                  }
                end
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::cadence,
                item_id: String,
                model_type: :tiered,
                name: String,
                tiered_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Tiered < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered

              attr_accessor name: String

              attr_accessor tiered_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::cadence,
                item_id: String,
                name: String,
                tiered_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::cadence,
                item_id: String,
                model_type: :tiered,
                name: String,
                tiered_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::cadence]
              end

              type tiered_config =
                {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::Tier]
                }

              class TieredConfig < Orb::Internal::Type::BaseModel
                attr_accessor tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::Tier]

                def initialize: (
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::Tier]
                ) -> void

                def to_hash: -> {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::TieredConfig::Tier]
                }

                type tier =
                  { first_unit: Float, unit_amount: String, last_unit: Float? }

                class Tier < Orb::Internal::Type::BaseModel
                  attr_accessor first_unit: Float

                  attr_accessor unit_amount: String

                  attr_accessor last_unit: Float?

                  def initialize: (
                    first_unit: Float,
                    unit_amount: String,
                    ?last_unit: Float?
                  ) -> void

                  def to_hash: -> {
                    first_unit: Float,
                    unit_amount: String,
                    last_unit: Float?
                  }
                end
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_bps =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::cadence,
                item_id: String,
                model_type: :tiered_bps,
                name: String,
                tiered_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredBps < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_bps

              attr_accessor name: String

              attr_accessor tiered_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::cadence,
                item_id: String,
                name: String,
                tiered_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_bps
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::cadence,
                item_id: String,
                model_type: :tiered_bps,
                name: String,
                tiered_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::cadence]
              end

              type tiered_bps_config =
                {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier]
                }

              class TieredBpsConfig < Orb::Internal::Type::BaseModel
                attr_accessor tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier]

                def initialize: (
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier]
                ) -> void

                def to_hash: -> {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::TieredBpsConfig::Tier]
                }

                type tier =
                  {
                    bps: Float,
                    minimum_amount: String,
                    maximum_amount: String?,
                    per_unit_maximum: String?
                  }

                class Tier < Orb::Internal::Type::BaseModel
                  attr_accessor bps: Float

                  attr_accessor minimum_amount: String

                  attr_accessor maximum_amount: String?

                  attr_accessor per_unit_maximum: String?

                  def initialize: (
                    bps: Float,
                    minimum_amount: String,
                    ?maximum_amount: String?,
                    ?per_unit_maximum: String?
                  ) -> void

                  def to_hash: -> {
                    bps: Float,
                    minimum_amount: String,
                    maximum_amount: String?,
                    per_unit_maximum: String?
                  }
                end
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type bps =
              {
                bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::cadence,
                item_id: String,
                model_type: :bps,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Bps < Orb::Internal::Type::BaseModel
              attr_accessor bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig

              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :bps

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::cadence,
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :bps
              ) -> void

              def to_hash: -> {
                bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::cadence,
                item_id: String,
                model_type: :bps,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type bps_config = { bps: Float, per_unit_maximum: String? }

              class BpsConfig < Orb::Internal::Type::BaseModel
                attr_accessor bps: Float

                attr_accessor per_unit_maximum: String?

                def initialize: (bps: Float, ?per_unit_maximum: String?) -> void

                def to_hash: -> { bps: Float, per_unit_maximum: String? }
              end

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bps::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type bulk_bps =
              {
                bulk_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::cadence,
                item_id: String,
                model_type: :bulk_bps,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class BulkBps < Orb::Internal::Type::BaseModel
              attr_accessor bulk_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig

              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :bulk_bps

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                bulk_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::cadence,
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :bulk_bps
              ) -> void

              def to_hash: -> {
                bulk_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::cadence,
                item_id: String,
                model_type: :bulk_bps,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type bulk_bps_config =
                {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier]
                }

              class BulkBpsConfig < Orb::Internal::Type::BaseModel
                attr_accessor tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier]

                def initialize: (
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier]
                ) -> void

                def to_hash: -> {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BulkBpsConfig::Tier]
                }

                type tier =
                  {
                    bps: Float,
                    maximum_amount: String?,
                    per_unit_maximum: String?
                  }

                class Tier < Orb::Internal::Type::BaseModel
                  attr_accessor bps: Float

                  attr_accessor maximum_amount: String?

                  attr_accessor per_unit_maximum: String?

                  def initialize: (
                    bps: Float,
                    ?maximum_amount: String?,
                    ?per_unit_maximum: String?
                  ) -> void

                  def to_hash: -> {
                    bps: Float,
                    maximum_amount: String?,
                    per_unit_maximum: String?
                  }
                end
              end

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type bulk =
              {
                bulk_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::cadence,
                item_id: String,
                model_type: :bulk,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Bulk < Orb::Internal::Type::BaseModel
              attr_accessor bulk_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig

              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :bulk

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                bulk_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::cadence,
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :bulk
              ) -> void

              def to_hash: -> {
                bulk_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::cadence,
                item_id: String,
                model_type: :bulk,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type bulk_config =
                {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::Tier]
                }

              class BulkConfig < Orb::Internal::Type::BaseModel
                attr_accessor tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::Tier]

                def initialize: (
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::Tier]
                ) -> void

                def to_hash: -> {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BulkConfig::Tier]
                }

                type tier = { unit_amount: String, maximum_units: Float? }

                class Tier < Orb::Internal::Type::BaseModel
                  attr_accessor unit_amount: String

                  attr_accessor maximum_units: Float?

                  def initialize: (
                    unit_amount: String,
                    ?maximum_units: Float?
                  ) -> void

                  def to_hash: -> { unit_amount: String, maximum_units: Float? }
                end
              end

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type threshold_total_amount =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::cadence,
                item_id: String,
                model_type: :threshold_total_amount,
                name: String,
                threshold_total_amount_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :threshold_total_amount

              attr_accessor name: String

              attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::cadence,
                item_id: String,
                name: String,
                threshold_total_amount_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :threshold_total_amount
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::cadence,
                item_id: String,
                model_type: :threshold_total_amount,
                name: String,
                threshold_total_amount_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_package =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::cadence,
                item_id: String,
                model_type: :tiered_package,
                name: String,
                tiered_package_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredPackage < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_package

              attr_accessor name: String

              attr_accessor tiered_package_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::cadence,
                item_id: String,
                name: String,
                tiered_package_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_package
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::cadence,
                item_id: String,
                model_type: :tiered_package,
                name: String,
                tiered_package_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_with_minimum =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::cadence,
                item_id: String,
                model_type: :tiered_with_minimum,
                name: String,
                tiered_with_minimum_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredWithMinimum < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_with_minimum

              attr_accessor name: String

              attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::cadence,
                item_id: String,
                name: String,
                tiered_with_minimum_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_with_minimum
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::cadence,
                item_id: String,
                model_type: :tiered_with_minimum,
                name: String,
                tiered_with_minimum_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type unit_with_percent =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::cadence,
                item_id: String,
                model_type: :unit_with_percent,
                name: String,
                unit_with_percent_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class UnitWithPercent < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :unit_with_percent

              attr_accessor name: String

              attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::cadence,
                item_id: String,
                name: String,
                unit_with_percent_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :unit_with_percent
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::cadence,
                item_id: String,
                model_type: :unit_with_percent,
                name: String,
                unit_with_percent_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type package_with_allocation =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::cadence,
                item_id: String,
                model_type: :package_with_allocation,
                name: String,
                package_with_allocation_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class PackageWithAllocation < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :package_with_allocation

              attr_accessor name: String

              attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::cadence,
                item_id: String,
                name: String,
                package_with_allocation_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :package_with_allocation
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::cadence,
                item_id: String,
                model_type: :package_with_allocation,
                name: String,
                package_with_allocation_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_with_proration =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::cadence,
                item_id: String,
                model_type: :tiered_with_proration,
                name: String,
                tiered_with_proration_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredWithProration < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_with_proration

              attr_accessor name: String

              attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::cadence,
                item_id: String,
                name: String,
                tiered_with_proration_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_with_proration
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::cadence,
                item_id: String,
                model_type: :tiered_with_proration,
                name: String,
                tiered_with_proration_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type unit_with_proration =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::cadence,
                item_id: String,
                model_type: :unit_with_proration,
                name: String,
                unit_with_proration_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class UnitWithProration < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :unit_with_proration

              attr_accessor name: String

              attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::cadence,
                item_id: String,
                name: String,
                unit_with_proration_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :unit_with_proration
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::cadence,
                item_id: String,
                model_type: :unit_with_proration,
                name: String,
                unit_with_proration_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_allocation =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::cadence,
                grouped_allocation_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_allocation,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedAllocation < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::cadence

              attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_allocation

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::cadence,
                grouped_allocation_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_allocation
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::cadence,
                grouped_allocation_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_allocation,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_with_prorated_minimum =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::cadence,
                grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_with_prorated_minimum,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::cadence

              attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_with_prorated_minimum

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::cadence,
                grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_with_prorated_minimum
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::cadence,
                grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_with_prorated_minimum,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_with_metered_minimum =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence,
                grouped_with_metered_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_with_metered_minimum,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence

              attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_with_metered_minimum

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence,
                grouped_with_metered_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_with_metered_minimum
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence,
                grouped_with_metered_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_with_metered_minimum,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type matrix_with_display_name =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::cadence,
                item_id: String,
                matrix_with_display_name_config: ::Hash[Symbol, top],
                model_type: :matrix_with_display_name,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::cadence

              attr_accessor item_id: String

              attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

              attr_accessor model_type: :matrix_with_display_name

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::cadence,
                item_id: String,
                matrix_with_display_name_config: ::Hash[Symbol, top],
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :matrix_with_display_name
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::cadence,
                item_id: String,
                matrix_with_display_name_config: ::Hash[Symbol, top],
                model_type: :matrix_with_display_name,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type bulk_with_proration =
              {
                bulk_with_proration_config: ::Hash[Symbol, top],
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::cadence,
                item_id: String,
                model_type: :bulk_with_proration,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class BulkWithProration < Orb::Internal::Type::BaseModel
              attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :bulk_with_proration

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                bulk_with_proration_config: ::Hash[Symbol, top],
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::cadence,
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :bulk_with_proration
              ) -> void

              def to_hash: -> {
                bulk_with_proration_config: ::Hash[Symbol, top],
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::cadence,
                item_id: String,
                model_type: :bulk_with_proration,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_tiered_package =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::cadence,
                grouped_tiered_package_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_tiered_package,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedTieredPackage < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::cadence

              attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_tiered_package

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::cadence,
                grouped_tiered_package_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_tiered_package
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::cadence,
                grouped_tiered_package_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_tiered_package,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type max_group_tiered_package =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::cadence,
                item_id: String,
                max_group_tiered_package_config: ::Hash[Symbol, top],
                model_type: :max_group_tiered_package,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::cadence

              attr_accessor item_id: String

              attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

              attr_accessor model_type: :max_group_tiered_package

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::cadence,
                item_id: String,
                max_group_tiered_package_config: ::Hash[Symbol, top],
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :max_group_tiered_package
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::cadence,
                item_id: String,
                max_group_tiered_package_config: ::Hash[Symbol, top],
                model_type: :max_group_tiered_package,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type scalable_matrix_with_unit_pricing =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence,
                item_id: String,
                model_type: :scalable_matrix_with_unit_pricing,
                name: String,
                scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :scalable_matrix_with_unit_pricing

              attr_accessor name: String

              attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence,
                item_id: String,
                name: String,
                scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :scalable_matrix_with_unit_pricing
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence,
                item_id: String,
                model_type: :scalable_matrix_with_unit_pricing,
                name: String,
                scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type scalable_matrix_with_tiered_pricing =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence,
                item_id: String,
                model_type: :scalable_matrix_with_tiered_pricing,
                name: String,
                scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :scalable_matrix_with_tiered_pricing

              attr_accessor name: String

              attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence,
                item_id: String,
                name: String,
                scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :scalable_matrix_with_tiered_pricing
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence,
                item_id: String,
                model_type: :scalable_matrix_with_tiered_pricing,
                name: String,
                scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type cumulative_grouped_bulk =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::cadence,
                cumulative_grouped_bulk_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :cumulative_grouped_bulk,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::cadence

              attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :cumulative_grouped_bulk

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::cadence,
                cumulative_grouped_bulk_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :cumulative_grouped_bulk
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::cadence,
                cumulative_grouped_bulk_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :cumulative_grouped_bulk,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_package_with_minimum =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::cadence,
                item_id: String,
                model_type: :tiered_package_with_minimum,
                name: String,
                tiered_package_with_minimum_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredPackageWithMinimum < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_package_with_minimum

              attr_accessor name: String

              attr_accessor tiered_package_with_minimum_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::cadence,
                item_id: String,
                name: String,
                tiered_package_with_minimum_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_package_with_minimum
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::cadence,
                item_id: String,
                model_type: :tiered_package_with_minimum,
                name: String,
                tiered_package_with_minimum_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type matrix_with_allocation =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::cadence,
                item_id: String,
                matrix_with_allocation_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                model_type: :matrix_with_allocation,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class MatrixWithAllocation < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::cadence

              attr_accessor item_id: String

              attr_accessor matrix_with_allocation_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig

              attr_accessor model_type: :matrix_with_allocation

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::cadence,
                item_id: String,
                matrix_with_allocation_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :matrix_with_allocation
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::cadence,
                item_id: String,
                matrix_with_allocation_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                model_type: :matrix_with_allocation,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::cadence]
              end

              type matrix_with_allocation_config =
                {
                  allocation: Float,
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
                }

              class MatrixWithAllocationConfig < Orb::Internal::Type::BaseModel
                attr_accessor allocation: Float

                attr_accessor default_unit_amount: String

                attr_accessor dimensions: ::Array[String?]

                attr_accessor matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]

                def initialize: (
                  allocation: Float,
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
                ) -> void

                def to_hash: -> {
                  allocation: Float,
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
                }

                type matrix_value =
                  { dimension_values: ::Array[String?], unit_amount: String }

                class MatrixValue < Orb::Internal::Type::BaseModel
                  attr_accessor dimension_values: ::Array[String?]

                  attr_accessor unit_amount: String

                  def initialize: (
                    dimension_values: ::Array[String?],
                    unit_amount: String
                  ) -> void

                  def to_hash: -> {
                    dimension_values: ::Array[String?],
                    unit_amount: String
                  }
                end
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_tiered =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::cadence,
                grouped_tiered_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_tiered,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedTiered < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::cadence

              attr_accessor grouped_tiered_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_tiered

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::cadence,
                grouped_tiered_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_tiered
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::cadence,
                grouped_tiered_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_tiered,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            def self?.variants: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::AddPrice::price]
          end
        end

        type remove_adjustment =
          { adjustment_id: String, plan_phase_order: Integer? }

        class RemoveAdjustment < Orb::Internal::Type::BaseModel
          attr_accessor adjustment_id: String

          attr_accessor plan_phase_order: Integer?

          def initialize: (
            adjustment_id: String,
            ?plan_phase_order: Integer?
          ) -> void

          def to_hash: -> { adjustment_id: String, plan_phase_order: Integer? }
        end

        type remove_price = { price_id: String, plan_phase_order: Integer? }

        class RemovePrice < Orb::Internal::Type::BaseModel
          attr_accessor price_id: String

          attr_accessor plan_phase_order: Integer?

          def initialize: (
            price_id: String,
            ?plan_phase_order: Integer?
          ) -> void

          def to_hash: -> { price_id: String, plan_phase_order: Integer? }
        end

        type replace_adjustment =
          {
            adjustment: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::adjustment,
            replaces_adjustment_id: String,
            plan_phase_order: Integer?
          }

        class ReplaceAdjustment < Orb::Internal::Type::BaseModel
          attr_accessor adjustment: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::adjustment

          attr_accessor replaces_adjustment_id: String

          attr_accessor plan_phase_order: Integer?

          def initialize: (
            adjustment: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::adjustment,
            replaces_adjustment_id: String,
            ?plan_phase_order: Integer?
          ) -> void

          def to_hash: -> {
            adjustment: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::adjustment,
            replaces_adjustment_id: String,
            plan_phase_order: Integer?
          }

          type adjustment =
            Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum

          module Adjustment
            extend Orb::Internal::Type::Union

            type percentage_discount =
              {
                adjustment_type: :percentage_discount,
                percentage_discount: Float,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::price_type?
              }

            class PercentageDiscount < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :percentage_discount

              attr_accessor percentage_discount: Float

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::price_type?

              def initialize: (
                percentage_discount: Float,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::price_type?,
                ?adjustment_type: :percentage_discount
              ) -> void

              def to_hash: -> {
                adjustment_type: :percentage_discount,
                percentage_discount: Float,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::PercentageDiscount::price_type]
              end
            end

            type usage_discount =
              {
                adjustment_type: :usage_discount,
                usage_discount: Float,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::price_type?
              }

            class UsageDiscount < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :usage_discount

              attr_accessor usage_discount: Float

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::price_type?

              def initialize: (
                usage_discount: Float,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::price_type?,
                ?adjustment_type: :usage_discount
              ) -> void

              def to_hash: -> {
                adjustment_type: :usage_discount,
                usage_discount: Float,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::UsageDiscount::price_type]
              end
            end

            type amount_discount =
              {
                adjustment_type: :amount_discount,
                amount_discount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::price_type?
              }

            class AmountDiscount < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :amount_discount

              attr_accessor amount_discount: String

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::price_type?

              def initialize: (
                amount_discount: String,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::price_type?,
                ?adjustment_type: :amount_discount
              ) -> void

              def to_hash: -> {
                adjustment_type: :amount_discount,
                amount_discount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::AmountDiscount::price_type]
              end
            end

            type minimum =
              {
                adjustment_type: :minimum,
                item_id: String,
                minimum_amount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::price_type?
              }

            class Minimum < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :minimum

              attr_accessor item_id: String

              attr_accessor minimum_amount: String

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::price_type?

              def initialize: (
                item_id: String,
                minimum_amount: String,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::price_type?,
                ?adjustment_type: :minimum
              ) -> void

              def to_hash: -> {
                adjustment_type: :minimum,
                item_id: String,
                minimum_amount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Minimum::price_type]
              end
            end

            type maximum =
              {
                adjustment_type: :maximum,
                maximum_amount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::price_type?
              }

            class Maximum < Orb::Internal::Type::BaseModel
              attr_accessor adjustment_type: :maximum

              attr_accessor maximum_amount: String

              attr_accessor applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::applies_to_all?

              attr_accessor applies_to_item_ids: ::Array[String]?

              attr_accessor applies_to_price_ids: ::Array[String]?

              attr_accessor currency: String?

              attr_accessor filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter]?

              attr_reader is_invoice_level: bool?

              def is_invoice_level=: (bool) -> bool

              attr_accessor price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::price_type?

              def initialize: (
                maximum_amount: String,
                ?applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::applies_to_all?,
                ?applies_to_item_ids: ::Array[String]?,
                ?applies_to_price_ids: ::Array[String]?,
                ?currency: String?,
                ?filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter]?,
                ?is_invoice_level: bool,
                ?price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::price_type?,
                ?adjustment_type: :maximum
              ) -> void

              def to_hash: -> {
                adjustment_type: :maximum,
                maximum_amount: String,
                applies_to_all: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::applies_to_all?,
                applies_to_item_ids: ::Array[String]?,
                applies_to_price_ids: ::Array[String]?,
                currency: String?,
                filters: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter]?,
                is_invoice_level: bool,
                price_type: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::price_type?
              }

              type applies_to_all = true

              module AppliesToAll
                extend Orb::Internal::Type::Enum

                TRUE: true

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::applies_to_all]
              end

              type filter =
                {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                }

              class Filter < Orb::Internal::Type::BaseModel
                attr_accessor field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::field

                attr_accessor operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::operator

                attr_accessor values: ::Array[String]

                def initialize: (
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                ) -> void

                def to_hash: -> {
                  field: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::field,
                  operator: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::operator,
                  values: ::Array[String]
                }

                type field =
                  :price_id
                  | :item_id
                  | :price_type
                  | :currency
                  | :pricing_unit_id

                module Field
                  extend Orb::Internal::Type::Enum

                  PRICE_ID: :price_id
                  ITEM_ID: :item_id
                  PRICE_TYPE: :price_type
                  CURRENCY: :currency
                  PRICING_UNIT_ID: :pricing_unit_id

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::field]
                end

                type operator = :includes | :excludes

                module Operator
                  extend Orb::Internal::Type::Enum

                  INCLUDES: :includes
                  EXCLUDES: :excludes

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::Filter::operator]
                end
              end

              type price_type =
                :usage
                | :fixed_in_advance
                | :fixed_in_arrears
                | :fixed
                | :in_arrears

              module PriceType
                extend Orb::Internal::Type::Enum

                USAGE: :usage
                FIXED_IN_ADVANCE: :fixed_in_advance
                FIXED_IN_ARREARS: :fixed_in_arrears
                FIXED: :fixed
                IN_ARREARS: :in_arrears

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::Adjustment::Maximum::price_type]
              end
            end

            def self?.variants: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplaceAdjustment::adjustment]
          end
        end

        type replace_price =
          {
            replaces_price_id: String,
            allocation_price: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice?,
            plan_phase_order: Integer?,
            price: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::price?
          }

        class ReplacePrice < Orb::Internal::Type::BaseModel
          attr_accessor replaces_price_id: String

          attr_accessor allocation_price: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice?

          attr_accessor plan_phase_order: Integer?

          attr_accessor price: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::price?

          def initialize: (
            replaces_price_id: String,
            ?allocation_price: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice?,
            ?plan_phase_order: Integer?,
            ?price: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::price?
          ) -> void

          def to_hash: -> {
            replaces_price_id: String,
            allocation_price: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice?,
            plan_phase_order: Integer?,
            price: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::price?
          }

          type allocation_price =
            {
              amount: String,
              cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::cadence,
              currency: String,
              custom_expiration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration?,
              expires_at_end_of_cadence: bool?
            }

          class AllocationPrice < Orb::Internal::Type::BaseModel
            attr_accessor amount: String

            attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::cadence

            attr_accessor currency: String

            attr_accessor custom_expiration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration?

            attr_accessor expires_at_end_of_cadence: bool?

            def initialize: (
              amount: String,
              cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::cadence,
              currency: String,
              ?custom_expiration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration?,
              ?expires_at_end_of_cadence: bool?
            ) -> void

            def to_hash: -> {
              amount: String,
              cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::cadence,
              currency: String,
              custom_expiration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration?,
              expires_at_end_of_cadence: bool?
            }

            type cadence =
              :one_time
              | :monthly
              | :quarterly
              | :semi_annual
              | :annual
              | :custom

            module Cadence
              extend Orb::Internal::Type::Enum

              ONE_TIME: :one_time
              MONTHLY: :monthly
              QUARTERLY: :quarterly
              SEMI_ANNUAL: :semi_annual
              ANNUAL: :annual
              CUSTOM: :custom

              def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::cadence]
            end

            type custom_expiration =
              {
                duration: Integer,
                duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::duration_unit
              }

            class CustomExpiration < Orb::Internal::Type::BaseModel
              attr_accessor duration: Integer

              attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::duration_unit

              def initialize: (
                duration: Integer,
                duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::duration_unit
              ) -> void

              def to_hash: -> {
                duration: Integer,
                duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::duration_unit
              }

              type duration_unit = :day | :month

              module DurationUnit
                extend Orb::Internal::Type::Enum

                DAY: :day
                MONTH: :month

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::AllocationPrice::CustomExpiration::duration_unit]
              end
            end
          end

          type price =
            Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation
            | Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered

          module Price
            extend Orb::Internal::Type::Union

            type unit =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::cadence,
                item_id: String,
                model_type: :unit,
                name: String,
                unit_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Unit < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :unit

              attr_accessor name: String

              attr_accessor unit_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::cadence,
                item_id: String,
                name: String,
                unit_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :unit
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::cadence,
                item_id: String,
                model_type: :unit,
                name: String,
                unit_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::UnitConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::cadence]
              end

              type unit_config = { unit_amount: String }

              class UnitConfig < Orb::Internal::Type::BaseModel
                attr_accessor unit_amount: String

                def initialize: (unit_amount: String) -> void

                def to_hash: -> { unit_amount: String }
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Unit::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type package =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::cadence,
                item_id: String,
                model_type: :package,
                name: String,
                package_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Package < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :package

              attr_accessor name: String

              attr_accessor package_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::cadence,
                item_id: String,
                name: String,
                package_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :package
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::cadence,
                item_id: String,
                model_type: :package,
                name: String,
                package_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::PackageConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::cadence]
              end

              type package_config =
                { package_amount: String, package_size: Integer }

              class PackageConfig < Orb::Internal::Type::BaseModel
                attr_accessor package_amount: String

                attr_accessor package_size: Integer

                def initialize: (
                  package_amount: String,
                  package_size: Integer
                ) -> void

                def to_hash: -> {
                  package_amount: String,
                  package_size: Integer
                }
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Package::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type matrix =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::cadence,
                item_id: String,
                matrix_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig,
                model_type: :matrix,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Matrix < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::cadence

              attr_accessor item_id: String

              attr_accessor matrix_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig

              attr_accessor model_type: :matrix

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::cadence,
                item_id: String,
                matrix_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :matrix
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::cadence,
                item_id: String,
                matrix_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig,
                model_type: :matrix,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::cadence]
              end

              type matrix_config =
                {
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue]
                }

              class MatrixConfig < Orb::Internal::Type::BaseModel
                attr_accessor default_unit_amount: String

                attr_accessor dimensions: ::Array[String?]

                attr_accessor matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue]

                def initialize: (
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue]
                ) -> void

                def to_hash: -> {
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::MatrixConfig::MatrixValue]
                }

                type matrix_value =
                  { dimension_values: ::Array[String?], unit_amount: String }

                class MatrixValue < Orb::Internal::Type::BaseModel
                  attr_accessor dimension_values: ::Array[String?]

                  attr_accessor unit_amount: String

                  def initialize: (
                    dimension_values: ::Array[String?],
                    unit_amount: String
                  ) -> void

                  def to_hash: -> {
                    dimension_values: ::Array[String?],
                    unit_amount: String
                  }
                end
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Matrix::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::cadence,
                item_id: String,
                model_type: :tiered,
                name: String,
                tiered_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Tiered < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered

              attr_accessor name: String

              attr_accessor tiered_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::cadence,
                item_id: String,
                name: String,
                tiered_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::cadence,
                item_id: String,
                model_type: :tiered,
                name: String,
                tiered_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::cadence]
              end

              type tiered_config =
                {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::Tier]
                }

              class TieredConfig < Orb::Internal::Type::BaseModel
                attr_accessor tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::Tier]

                def initialize: (
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::Tier]
                ) -> void

                def to_hash: -> {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::TieredConfig::Tier]
                }

                type tier =
                  { first_unit: Float, unit_amount: String, last_unit: Float? }

                class Tier < Orb::Internal::Type::BaseModel
                  attr_accessor first_unit: Float

                  attr_accessor unit_amount: String

                  attr_accessor last_unit: Float?

                  def initialize: (
                    first_unit: Float,
                    unit_amount: String,
                    ?last_unit: Float?
                  ) -> void

                  def to_hash: -> {
                    first_unit: Float,
                    unit_amount: String,
                    last_unit: Float?
                  }
                end
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Tiered::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_bps =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::cadence,
                item_id: String,
                model_type: :tiered_bps,
                name: String,
                tiered_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredBps < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_bps

              attr_accessor name: String

              attr_accessor tiered_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::cadence,
                item_id: String,
                name: String,
                tiered_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_bps
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::cadence,
                item_id: String,
                model_type: :tiered_bps,
                name: String,
                tiered_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::cadence]
              end

              type tiered_bps_config =
                {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier]
                }

              class TieredBpsConfig < Orb::Internal::Type::BaseModel
                attr_accessor tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier]

                def initialize: (
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier]
                ) -> void

                def to_hash: -> {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::TieredBpsConfig::Tier]
                }

                type tier =
                  {
                    bps: Float,
                    minimum_amount: String,
                    maximum_amount: String?,
                    per_unit_maximum: String?
                  }

                class Tier < Orb::Internal::Type::BaseModel
                  attr_accessor bps: Float

                  attr_accessor minimum_amount: String

                  attr_accessor maximum_amount: String?

                  attr_accessor per_unit_maximum: String?

                  def initialize: (
                    bps: Float,
                    minimum_amount: String,
                    ?maximum_amount: String?,
                    ?per_unit_maximum: String?
                  ) -> void

                  def to_hash: -> {
                    bps: Float,
                    minimum_amount: String,
                    maximum_amount: String?,
                    per_unit_maximum: String?
                  }
                end
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredBps::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type bps =
              {
                bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::cadence,
                item_id: String,
                model_type: :bps,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Bps < Orb::Internal::Type::BaseModel
              attr_accessor bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig

              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :bps

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::cadence,
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :bps
              ) -> void

              def to_hash: -> {
                bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::cadence,
                item_id: String,
                model_type: :bps,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type bps_config = { bps: Float, per_unit_maximum: String? }

              class BpsConfig < Orb::Internal::Type::BaseModel
                attr_accessor bps: Float

                attr_accessor per_unit_maximum: String?

                def initialize: (bps: Float, ?per_unit_maximum: String?) -> void

                def to_hash: -> { bps: Float, per_unit_maximum: String? }
              end

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bps::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type bulk_bps =
              {
                bulk_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::cadence,
                item_id: String,
                model_type: :bulk_bps,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class BulkBps < Orb::Internal::Type::BaseModel
              attr_accessor bulk_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig

              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :bulk_bps

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                bulk_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::cadence,
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :bulk_bps
              ) -> void

              def to_hash: -> {
                bulk_bps_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::cadence,
                item_id: String,
                model_type: :bulk_bps,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type bulk_bps_config =
                {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier]
                }

              class BulkBpsConfig < Orb::Internal::Type::BaseModel
                attr_accessor tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier]

                def initialize: (
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier]
                ) -> void

                def to_hash: -> {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BulkBpsConfig::Tier]
                }

                type tier =
                  {
                    bps: Float,
                    maximum_amount: String?,
                    per_unit_maximum: String?
                  }

                class Tier < Orb::Internal::Type::BaseModel
                  attr_accessor bps: Float

                  attr_accessor maximum_amount: String?

                  attr_accessor per_unit_maximum: String?

                  def initialize: (
                    bps: Float,
                    ?maximum_amount: String?,
                    ?per_unit_maximum: String?
                  ) -> void

                  def to_hash: -> {
                    bps: Float,
                    maximum_amount: String?,
                    per_unit_maximum: String?
                  }
                end
              end

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkBps::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type bulk =
              {
                bulk_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::cadence,
                item_id: String,
                model_type: :bulk,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class Bulk < Orb::Internal::Type::BaseModel
              attr_accessor bulk_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig

              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :bulk

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                bulk_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::cadence,
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :bulk
              ) -> void

              def to_hash: -> {
                bulk_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig,
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::cadence,
                item_id: String,
                model_type: :bulk,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type bulk_config =
                {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::Tier]
                }

              class BulkConfig < Orb::Internal::Type::BaseModel
                attr_accessor tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::Tier]

                def initialize: (
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::Tier]
                ) -> void

                def to_hash: -> {
                  tiers: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BulkConfig::Tier]
                }

                type tier = { unit_amount: String, maximum_units: Float? }

                class Tier < Orb::Internal::Type::BaseModel
                  attr_accessor unit_amount: String

                  attr_accessor maximum_units: Float?

                  def initialize: (
                    unit_amount: String,
                    ?maximum_units: Float?
                  ) -> void

                  def to_hash: -> { unit_amount: String, maximum_units: Float? }
                end
              end

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::Bulk::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type threshold_total_amount =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::cadence,
                item_id: String,
                model_type: :threshold_total_amount,
                name: String,
                threshold_total_amount_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class ThresholdTotalAmount < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :threshold_total_amount

              attr_accessor name: String

              attr_accessor threshold_total_amount_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::cadence,
                item_id: String,
                name: String,
                threshold_total_amount_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :threshold_total_amount
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::cadence,
                item_id: String,
                model_type: :threshold_total_amount,
                name: String,
                threshold_total_amount_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ThresholdTotalAmount::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_package =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::cadence,
                item_id: String,
                model_type: :tiered_package,
                name: String,
                tiered_package_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredPackage < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_package

              attr_accessor name: String

              attr_accessor tiered_package_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::cadence,
                item_id: String,
                name: String,
                tiered_package_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_package
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::cadence,
                item_id: String,
                model_type: :tiered_package,
                name: String,
                tiered_package_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackage::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_with_minimum =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::cadence,
                item_id: String,
                model_type: :tiered_with_minimum,
                name: String,
                tiered_with_minimum_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredWithMinimum < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_with_minimum

              attr_accessor name: String

              attr_accessor tiered_with_minimum_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::cadence,
                item_id: String,
                name: String,
                tiered_with_minimum_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_with_minimum
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::cadence,
                item_id: String,
                model_type: :tiered_with_minimum,
                name: String,
                tiered_with_minimum_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithMinimum::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type unit_with_percent =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::cadence,
                item_id: String,
                model_type: :unit_with_percent,
                name: String,
                unit_with_percent_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class UnitWithPercent < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :unit_with_percent

              attr_accessor name: String

              attr_accessor unit_with_percent_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::cadence,
                item_id: String,
                name: String,
                unit_with_percent_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :unit_with_percent
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::cadence,
                item_id: String,
                model_type: :unit_with_percent,
                name: String,
                unit_with_percent_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithPercent::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type package_with_allocation =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::cadence,
                item_id: String,
                model_type: :package_with_allocation,
                name: String,
                package_with_allocation_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class PackageWithAllocation < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :package_with_allocation

              attr_accessor name: String

              attr_accessor package_with_allocation_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::cadence,
                item_id: String,
                name: String,
                package_with_allocation_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :package_with_allocation
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::cadence,
                item_id: String,
                model_type: :package_with_allocation,
                name: String,
                package_with_allocation_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::PackageWithAllocation::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_with_proration =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::cadence,
                item_id: String,
                model_type: :tiered_with_proration,
                name: String,
                tiered_with_proration_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredWithProration < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_with_proration

              attr_accessor name: String

              attr_accessor tiered_with_proration_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::cadence,
                item_id: String,
                name: String,
                tiered_with_proration_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_with_proration
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::cadence,
                item_id: String,
                model_type: :tiered_with_proration,
                name: String,
                tiered_with_proration_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredWithProration::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type unit_with_proration =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::cadence,
                item_id: String,
                model_type: :unit_with_proration,
                name: String,
                unit_with_proration_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class UnitWithProration < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :unit_with_proration

              attr_accessor name: String

              attr_accessor unit_with_proration_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::cadence,
                item_id: String,
                name: String,
                unit_with_proration_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :unit_with_proration
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::cadence,
                item_id: String,
                model_type: :unit_with_proration,
                name: String,
                unit_with_proration_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::UnitWithProration::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_allocation =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::cadence,
                grouped_allocation_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_allocation,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedAllocation < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::cadence

              attr_accessor grouped_allocation_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_allocation

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::cadence,
                grouped_allocation_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_allocation
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::cadence,
                grouped_allocation_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_allocation,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedAllocation::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_with_prorated_minimum =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence,
                grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_with_prorated_minimum,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedWithProratedMinimum < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence

              attr_accessor grouped_with_prorated_minimum_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_with_prorated_minimum

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence,
                grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_with_prorated_minimum
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence,
                grouped_with_prorated_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_with_prorated_minimum,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithProratedMinimum::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_with_metered_minimum =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence,
                grouped_with_metered_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_with_metered_minimum,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedWithMeteredMinimum < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence

              attr_accessor grouped_with_metered_minimum_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_with_metered_minimum

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence,
                grouped_with_metered_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_with_metered_minimum
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence,
                grouped_with_metered_minimum_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_with_metered_minimum,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedWithMeteredMinimum::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type matrix_with_display_name =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::cadence,
                item_id: String,
                matrix_with_display_name_config: ::Hash[Symbol, top],
                model_type: :matrix_with_display_name,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class MatrixWithDisplayName < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::cadence

              attr_accessor item_id: String

              attr_accessor matrix_with_display_name_config: ::Hash[Symbol, top]

              attr_accessor model_type: :matrix_with_display_name

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::cadence,
                item_id: String,
                matrix_with_display_name_config: ::Hash[Symbol, top],
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :matrix_with_display_name
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::cadence,
                item_id: String,
                matrix_with_display_name_config: ::Hash[Symbol, top],
                model_type: :matrix_with_display_name,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithDisplayName::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type bulk_with_proration =
              {
                bulk_with_proration_config: ::Hash[Symbol, top],
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::cadence,
                item_id: String,
                model_type: :bulk_with_proration,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class BulkWithProration < Orb::Internal::Type::BaseModel
              attr_accessor bulk_with_proration_config: ::Hash[Symbol, top]

              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :bulk_with_proration

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                bulk_with_proration_config: ::Hash[Symbol, top],
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::cadence,
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :bulk_with_proration
              ) -> void

              def to_hash: -> {
                bulk_with_proration_config: ::Hash[Symbol, top],
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::cadence,
                item_id: String,
                model_type: :bulk_with_proration,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::BulkWithProration::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_tiered_package =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::cadence,
                grouped_tiered_package_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_tiered_package,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedTieredPackage < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::cadence

              attr_accessor grouped_tiered_package_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_tiered_package

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::cadence,
                grouped_tiered_package_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_tiered_package
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::cadence,
                grouped_tiered_package_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_tiered_package,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTieredPackage::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type max_group_tiered_package =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence,
                item_id: String,
                max_group_tiered_package_config: ::Hash[Symbol, top],
                model_type: :max_group_tiered_package,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class MaxGroupTieredPackage < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence

              attr_accessor item_id: String

              attr_accessor max_group_tiered_package_config: ::Hash[Symbol, top]

              attr_accessor model_type: :max_group_tiered_package

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence,
                item_id: String,
                max_group_tiered_package_config: ::Hash[Symbol, top],
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :max_group_tiered_package
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence,
                item_id: String,
                max_group_tiered_package_config: ::Hash[Symbol, top],
                model_type: :max_group_tiered_package,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MaxGroupTieredPackage::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type scalable_matrix_with_unit_pricing =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence,
                item_id: String,
                model_type: :scalable_matrix_with_unit_pricing,
                name: String,
                scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class ScalableMatrixWithUnitPricing < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :scalable_matrix_with_unit_pricing

              attr_accessor name: String

              attr_accessor scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence,
                item_id: String,
                name: String,
                scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :scalable_matrix_with_unit_pricing
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence,
                item_id: String,
                model_type: :scalable_matrix_with_unit_pricing,
                name: String,
                scalable_matrix_with_unit_pricing_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithUnitPricing::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type scalable_matrix_with_tiered_pricing =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence,
                item_id: String,
                model_type: :scalable_matrix_with_tiered_pricing,
                name: String,
                scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class ScalableMatrixWithTieredPricing < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :scalable_matrix_with_tiered_pricing

              attr_accessor name: String

              attr_accessor scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence,
                item_id: String,
                name: String,
                scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :scalable_matrix_with_tiered_pricing
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence,
                item_id: String,
                model_type: :scalable_matrix_with_tiered_pricing,
                name: String,
                scalable_matrix_with_tiered_pricing_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::ScalableMatrixWithTieredPricing::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type cumulative_grouped_bulk =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence,
                cumulative_grouped_bulk_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :cumulative_grouped_bulk,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class CumulativeGroupedBulk < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence

              attr_accessor cumulative_grouped_bulk_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :cumulative_grouped_bulk

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence,
                cumulative_grouped_bulk_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :cumulative_grouped_bulk
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence,
                cumulative_grouped_bulk_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :cumulative_grouped_bulk,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::CumulativeGroupedBulk::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type tiered_package_with_minimum =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::cadence,
                item_id: String,
                model_type: :tiered_package_with_minimum,
                name: String,
                tiered_package_with_minimum_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class TieredPackageWithMinimum < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::cadence

              attr_accessor item_id: String

              attr_accessor model_type: :tiered_package_with_minimum

              attr_accessor name: String

              attr_accessor tiered_package_with_minimum_config: ::Hash[Symbol, top]

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::cadence,
                item_id: String,
                name: String,
                tiered_package_with_minimum_config: ::Hash[Symbol, top],
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :tiered_package_with_minimum
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::cadence,
                item_id: String,
                model_type: :tiered_package_with_minimum,
                name: String,
                tiered_package_with_minimum_config: ::Hash[Symbol, top],
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::TieredPackageWithMinimum::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type matrix_with_allocation =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::cadence,
                item_id: String,
                matrix_with_allocation_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                model_type: :matrix_with_allocation,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class MatrixWithAllocation < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::cadence

              attr_accessor item_id: String

              attr_accessor matrix_with_allocation_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig

              attr_accessor model_type: :matrix_with_allocation

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::cadence,
                item_id: String,
                matrix_with_allocation_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :matrix_with_allocation
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::cadence,
                item_id: String,
                matrix_with_allocation_config: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig,
                model_type: :matrix_with_allocation,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::cadence]
              end

              type matrix_with_allocation_config =
                {
                  allocation: Float,
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
                }

              class MatrixWithAllocationConfig < Orb::Internal::Type::BaseModel
                attr_accessor allocation: Float

                attr_accessor default_unit_amount: String

                attr_accessor dimensions: ::Array[String?]

                attr_accessor matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]

                def initialize: (
                  allocation: Float,
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
                ) -> void

                def to_hash: -> {
                  allocation: Float,
                  default_unit_amount: String,
                  dimensions: ::Array[String?],
                  matrix_values: ::Array[Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::MatrixWithAllocationConfig::MatrixValue]
                }

                type matrix_value =
                  { dimension_values: ::Array[String?], unit_amount: String }

                class MatrixValue < Orb::Internal::Type::BaseModel
                  attr_accessor dimension_values: ::Array[String?]

                  attr_accessor unit_amount: String

                  def initialize: (
                    dimension_values: ::Array[String?],
                    unit_amount: String
                  ) -> void

                  def to_hash: -> {
                    dimension_values: ::Array[String?],
                    unit_amount: String
                  }
                end
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::MatrixWithAllocation::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            type grouped_tiered =
              {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::cadence,
                grouped_tiered_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_tiered,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

            class GroupedTiered < Orb::Internal::Type::BaseModel
              attr_accessor cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::cadence

              attr_accessor grouped_tiered_config: ::Hash[Symbol, top]

              attr_accessor item_id: String

              attr_accessor model_type: :grouped_tiered

              attr_accessor name: String

              attr_accessor billable_metric_id: String?

              attr_accessor billed_in_advance: bool?

              attr_accessor billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration?

              attr_accessor conversion_rate: Float?

              attr_accessor currency: String?

              attr_accessor dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration?

              attr_accessor external_price_id: String?

              attr_accessor fixed_price_quantity: Float?

              attr_accessor invoice_grouping_key: String?

              attr_accessor invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration?

              attr_accessor metadata: ::Hash[Symbol, String?]?

              def initialize: (
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::cadence,
                grouped_tiered_config: ::Hash[Symbol, top],
                item_id: String,
                name: String,
                ?billable_metric_id: String?,
                ?billed_in_advance: bool?,
                ?billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration?,
                ?conversion_rate: Float?,
                ?currency: String?,
                ?dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration?,
                ?external_price_id: String?,
                ?fixed_price_quantity: Float?,
                ?invoice_grouping_key: String?,
                ?invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration?,
                ?metadata: ::Hash[Symbol, String?]?,
                ?model_type: :grouped_tiered
              ) -> void

              def to_hash: -> {
                cadence: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::cadence,
                grouped_tiered_config: ::Hash[Symbol, top],
                item_id: String,
                model_type: :grouped_tiered,
                name: String,
                billable_metric_id: String?,
                billed_in_advance: bool?,
                billing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration?,
                conversion_rate: Float?,
                currency: String?,
                dimensional_price_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::DimensionalPriceConfiguration?,
                external_price_id: String?,
                fixed_price_quantity: Float?,
                invoice_grouping_key: String?,
                invoicing_cycle_configuration: Orb::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration?,
                metadata: ::Hash[Symbol, String?]?
              }

              type cadence =
                :annual
                | :semi_annual
                | :monthly
                | :quarterly
                | :one_time
                | :custom

              module Cadence
                extend Orb::Internal::Type::Enum

                ANNUAL: :annual
                SEMI_ANNUAL: :semi_annual
                MONTHLY: :monthly
                QUARTERLY: :quarterly
                ONE_TIME: :one_time
                CUSTOM: :custom

                def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::cadence]
              end

              type billing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
                }

              class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::BillingCycleConfiguration::duration_unit]
                end
              end

              type dimensional_price_configuration =
                {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }

              class DimensionalPriceConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor dimension_values: ::Array[String]

                attr_accessor dimensional_price_group_id: String?

                attr_accessor external_dimensional_price_group_id: String?

                def initialize: (
                  dimension_values: ::Array[String],
                  ?dimensional_price_group_id: String?,
                  ?external_dimensional_price_group_id: String?
                ) -> void

                def to_hash: -> {
                  dimension_values: ::Array[String],
                  dimensional_price_group_id: String?,
                  external_dimensional_price_group_id: String?
                }
              end

              type invoicing_cycle_configuration =
                {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
                }

              class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
                attr_accessor duration: Integer

                attr_accessor duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit

                def initialize: (
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
                ) -> void

                def to_hash: -> {
                  duration: Integer,
                  duration_unit: Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit
                }

                type duration_unit = :day | :month

                module DurationUnit
                  extend Orb::Internal::Type::Enum

                  DAY: :day
                  MONTH: :month

                  def self?.values: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::Price::GroupedTiered::InvoicingCycleConfiguration::duration_unit]
                end
              end
            end

            def self?.variants: -> ::Array[Orb::Models::Beta::ExternalPlanIDCreatePlanVersionParams::ReplacePrice::price]
          end
        end
      end
    end
  end
end
