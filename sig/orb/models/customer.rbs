module Orb
  module Models
    type customer =
      {
        id: String,
        additional_emails: ::Array[String],
        auto_collection: bool,
        balance: String,
        billing_address: Orb::Address?,
        created_at: Time,
        currency: String?,
        email: String,
        email_delivery: bool,
        exempt_from_automated_tax: bool?,
        external_customer_id: String?,
        hierarchy: Orb::Customer::Hierarchy,
        metadata: ::Hash[Symbol, String],
        name: String,
        payment_provider: Orb::Models::Customer::payment_provider?,
        payment_provider_id: String?,
        portal_url: String?,
        shipping_address: Orb::Address?,
        tax_id: Orb::CustomerTaxID?,
        timezone: String,
        accounting_sync_configuration: Orb::Customer::AccountingSyncConfiguration?,
        reporting_configuration: Orb::Customer::ReportingConfiguration?
      }

    class Customer < Orb::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor additional_emails: ::Array[String]

      attr_accessor auto_collection: bool

      attr_accessor balance: String

      attr_accessor billing_address: Orb::Address?

      attr_accessor created_at: Time

      attr_accessor currency: String?

      attr_accessor email: String

      attr_accessor email_delivery: bool

      attr_accessor exempt_from_automated_tax: bool?

      attr_accessor external_customer_id: String?

      attr_accessor hierarchy: Orb::Customer::Hierarchy

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor name: String

      attr_accessor payment_provider: Orb::Models::Customer::payment_provider?

      attr_accessor payment_provider_id: String?

      attr_accessor portal_url: String?

      attr_accessor shipping_address: Orb::Address?

      attr_accessor tax_id: Orb::CustomerTaxID?

      attr_accessor timezone: String

      attr_accessor accounting_sync_configuration: Orb::Customer::AccountingSyncConfiguration?

      attr_accessor reporting_configuration: Orb::Customer::ReportingConfiguration?

      def initialize: (
        id: String,
        additional_emails: ::Array[String],
        auto_collection: bool,
        balance: String,
        billing_address: Orb::Address?,
        created_at: Time,
        currency: String?,
        email: String,
        email_delivery: bool,
        exempt_from_automated_tax: bool?,
        external_customer_id: String?,
        hierarchy: Orb::Customer::Hierarchy,
        metadata: ::Hash[Symbol, String],
        name: String,
        payment_provider: Orb::Models::Customer::payment_provider?,
        payment_provider_id: String?,
        portal_url: String?,
        shipping_address: Orb::Address?,
        tax_id: Orb::CustomerTaxID?,
        timezone: String,
        ?accounting_sync_configuration: Orb::Customer::AccountingSyncConfiguration?,
        ?reporting_configuration: Orb::Customer::ReportingConfiguration?
      ) -> void

      def to_hash: -> {
        id: String,
        additional_emails: ::Array[String],
        auto_collection: bool,
        balance: String,
        billing_address: Orb::Address?,
        created_at: Time,
        currency: String?,
        email: String,
        email_delivery: bool,
        exempt_from_automated_tax: bool?,
        external_customer_id: String?,
        hierarchy: Orb::Customer::Hierarchy,
        metadata: ::Hash[Symbol, String],
        name: String,
        payment_provider: Orb::Models::Customer::payment_provider?,
        payment_provider_id: String?,
        portal_url: String?,
        shipping_address: Orb::Address?,
        tax_id: Orb::CustomerTaxID?,
        timezone: String,
        accounting_sync_configuration: Orb::Customer::AccountingSyncConfiguration?,
        reporting_configuration: Orb::Customer::ReportingConfiguration?
      }

      type hierarchy =
        {
          children: ::Array[Orb::CustomerMinified],
          parent: Orb::CustomerMinified?
        }

      class Hierarchy < Orb::Internal::Type::BaseModel
        attr_accessor children: ::Array[Orb::CustomerMinified]

        attr_accessor parent: Orb::CustomerMinified?

        def initialize: (
          children: ::Array[Orb::CustomerMinified],
          parent: Orb::CustomerMinified?
        ) -> void

        def to_hash: -> {
          children: ::Array[Orb::CustomerMinified],
          parent: Orb::CustomerMinified?
        }
      end

      type payment_provider =
        :quickbooks | :"bill.com" | :stripe_charge | :stripe_invoice | :netsuite

      module PaymentProvider
        extend Orb::Internal::Type::Enum

        QUICKBOOKS: :quickbooks
        BILL_COM: :"bill.com"
        STRIPE_CHARGE: :stripe_charge
        STRIPE_INVOICE: :stripe_invoice
        NETSUITE: :netsuite

        def self?.values: -> ::Array[Orb::Models::Customer::payment_provider]
      end

      type accounting_sync_configuration =
        {
          accounting_providers: ::Array[Orb::Customer::AccountingSyncConfiguration::AccountingProvider],
          excluded: bool
        }

      class AccountingSyncConfiguration < Orb::Internal::Type::BaseModel
        attr_accessor accounting_providers: ::Array[Orb::Customer::AccountingSyncConfiguration::AccountingProvider]

        attr_accessor excluded: bool

        def initialize: (
          accounting_providers: ::Array[Orb::Customer::AccountingSyncConfiguration::AccountingProvider],
          excluded: bool
        ) -> void

        def to_hash: -> {
          accounting_providers: ::Array[Orb::Customer::AccountingSyncConfiguration::AccountingProvider],
          excluded: bool
        }

        type accounting_provider =
          {
            external_provider_id: String?,
            provider_type: Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type
          }

        class AccountingProvider < Orb::Internal::Type::BaseModel
          attr_accessor external_provider_id: String?

          attr_accessor provider_type: Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type

          def initialize: (
            external_provider_id: String?,
            provider_type: Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type
          ) -> void

          def to_hash: -> {
            external_provider_id: String?,
            provider_type: Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type
          }

          type provider_type = :quickbooks | :netsuite

          module ProviderType
            extend Orb::Internal::Type::Enum

            QUICKBOOKS: :quickbooks
            NETSUITE: :netsuite

            def self?.values: -> ::Array[Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type]
          end
        end
      end

      type reporting_configuration = { exempt: bool }

      class ReportingConfiguration < Orb::Internal::Type::BaseModel
        attr_accessor exempt: bool

        def initialize: (exempt: bool) -> void

        def to_hash: -> { exempt: bool }
      end
    end
  end
end
