module Orb
  module Models
    type customer =
      {
        id: String,
        additional_emails: ::Array[String],
        auto_collection: bool,
        balance: String,
        billing_address: Orb::Models::AddressModel?,
        created_at: Time,
        currency: String?,
        email: String,
        email_delivery: bool,
        exempt_from_automated_tax: bool?,
        external_customer_id: String?,
        hierarchy: Orb::Models::Customer::Hierarchy,
        metadata: ::Hash[Symbol, String],
        name: String,
        payment_provider: Orb::Models::Customer::payment_provider?,
        payment_provider_id: String?,
        portal_url: String?,
        shipping_address: Orb::Models::AddressModel?,
        tax_id: Orb::Models::CustomerTaxIDModel?,
        timezone: String,
        accounting_sync_configuration: Orb::Models::Customer::AccountingSyncConfiguration?,
        reporting_configuration: Orb::Models::Customer::ReportingConfiguration?
      }

    class Customer < Orb::BaseModel
      attr_accessor id: String

      attr_accessor additional_emails: ::Array[String]

      attr_accessor auto_collection: bool

      attr_accessor balance: String

      attr_accessor billing_address: Orb::Models::AddressModel?

      attr_accessor created_at: Time

      attr_accessor currency: String?

      attr_accessor email: String

      attr_accessor email_delivery: bool

      attr_accessor exempt_from_automated_tax: bool?

      attr_accessor external_customer_id: String?

      attr_accessor hierarchy: Orb::Models::Customer::Hierarchy

      attr_accessor metadata: ::Hash[Symbol, String]

      attr_accessor name: String

      attr_accessor payment_provider: Orb::Models::Customer::payment_provider?

      attr_accessor payment_provider_id: String?

      attr_accessor portal_url: String?

      attr_accessor shipping_address: Orb::Models::AddressModel?

      attr_accessor tax_id: Orb::Models::CustomerTaxIDModel?

      attr_accessor timezone: String

      attr_accessor accounting_sync_configuration: Orb::Models::Customer::AccountingSyncConfiguration?

      attr_accessor reporting_configuration: Orb::Models::Customer::ReportingConfiguration?

      def initialize:
        (
          id: String,
          additional_emails: ::Array[String],
          auto_collection: bool,
          balance: String,
          billing_address: Orb::Models::AddressModel?,
          created_at: Time,
          currency: String?,
          email: String,
          email_delivery: bool,
          exempt_from_automated_tax: bool?,
          external_customer_id: String?,
          hierarchy: Orb::Models::Customer::Hierarchy,
          metadata: ::Hash[Symbol, String],
          name: String,
          payment_provider: Orb::Models::Customer::payment_provider?,
          payment_provider_id: String?,
          portal_url: String?,
          shipping_address: Orb::Models::AddressModel?,
          tax_id: Orb::Models::CustomerTaxIDModel?,
          timezone: String,
          accounting_sync_configuration: Orb::Models::Customer::AccountingSyncConfiguration?,
          reporting_configuration: Orb::Models::Customer::ReportingConfiguration?
        ) -> void
        | (?Orb::Models::customer | Orb::BaseModel data) -> void

      def to_hash: -> Orb::Models::customer

      type hierarchy =
        {
          children: ::Array[Orb::Models::CustomerMinifiedModel],
          parent: Orb::Models::CustomerMinifiedModel?
        }

      class Hierarchy < Orb::BaseModel
        attr_accessor children: ::Array[Orb::Models::CustomerMinifiedModel]

        attr_accessor parent: Orb::Models::CustomerMinifiedModel?

        def initialize:
          (
            children: ::Array[Orb::Models::CustomerMinifiedModel],
            parent: Orb::Models::CustomerMinifiedModel?
          ) -> void
          | (?Orb::Models::Customer::hierarchy | Orb::BaseModel data) -> void

        def to_hash: -> Orb::Models::Customer::hierarchy
      end

      type payment_provider =
        :quickbooks | :"bill.com" | :stripe_charge | :stripe_invoice | :netsuite

      class PaymentProvider < Orb::Enum
        QUICKBOOKS: :quickbooks
        BILL_COM: :"bill.com"
        STRIPE_CHARGE: :stripe_charge
        STRIPE_INVOICE: :stripe_invoice
        NETSUITE: :netsuite

        def self.values: -> ::Array[Orb::Models::Customer::payment_provider]
      end

      type accounting_sync_configuration =
        {
          accounting_providers: ::Array[Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider],
          excluded: bool
        }

      class AccountingSyncConfiguration < Orb::BaseModel
        attr_accessor accounting_providers: ::Array[Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider]

        attr_accessor excluded: bool

        def initialize:
          (
            accounting_providers: ::Array[Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider],
            excluded: bool
          ) -> void
          | (
            ?Orb::Models::Customer::accounting_sync_configuration
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::Customer::accounting_sync_configuration

        type accounting_provider =
          {
            external_provider_id: String?,
            provider_type: Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type
          }

        class AccountingProvider < Orb::BaseModel
          attr_accessor external_provider_id: String?

          attr_accessor provider_type: Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type

          def initialize:
            (
              external_provider_id: String?,
              provider_type: Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type
            ) -> void
            | (
              ?Orb::Models::Customer::AccountingSyncConfiguration::accounting_provider
              | Orb::BaseModel data
            ) -> void

          def to_hash: -> Orb::Models::Customer::AccountingSyncConfiguration::accounting_provider

          type provider_type = :quickbooks | :netsuite

          class ProviderType < Orb::Enum
            QUICKBOOKS: :quickbooks
            NETSUITE: :netsuite

            def self.values: -> ::Array[Orb::Models::Customer::AccountingSyncConfiguration::AccountingProvider::provider_type]
          end
        end
      end

      type reporting_configuration = { exempt: bool }

      class ReportingConfiguration < Orb::BaseModel
        attr_accessor exempt: bool

        def initialize:
          (exempt: bool) -> void
          | (
            ?Orb::Models::Customer::reporting_configuration
            | Orb::BaseModel data
          ) -> void

        def to_hash: -> Orb::Models::Customer::reporting_configuration
      end
    end
  end
end
