module Orb
  module Models
    type customer_update_by_external_id_params =
      {
        accounting_sync_configuration: Orb::NewAccountingSyncConfiguration?,
        additional_emails: ::Array[String]?,
        auto_collection: bool?,
        billing_address: Orb::AddressInput?,
        currency: String?,
        email: String?,
        email_delivery: bool?,
        external_customer_id: String?,
        hierarchy: Orb::CustomerHierarchyConfig?,
        metadata: ::Hash[Symbol, String?]?,
        name: String?,
        payment_provider: Orb::Models::CustomerUpdateByExternalIDParams::payment_provider?,
        payment_provider_id: String?,
        reporting_configuration: Orb::NewReportingConfiguration?,
        shipping_address: Orb::AddressInput?,
        tax_configuration: Orb::Models::CustomerUpdateByExternalIDParams::tax_configuration?,
        tax_id: Orb::CustomerTaxID?
      }
      & Orb::Internal::Type::request_parameters

    class CustomerUpdateByExternalIDParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      attr_accessor accounting_sync_configuration: Orb::NewAccountingSyncConfiguration?

      attr_accessor additional_emails: ::Array[String]?

      attr_accessor auto_collection: bool?

      attr_accessor billing_address: Orb::AddressInput?

      attr_accessor currency: String?

      attr_accessor email: String?

      attr_accessor email_delivery: bool?

      attr_accessor external_customer_id: String?

      attr_accessor hierarchy: Orb::CustomerHierarchyConfig?

      attr_accessor metadata: ::Hash[Symbol, String?]?

      attr_accessor name: String?

      attr_accessor payment_provider: Orb::Models::CustomerUpdateByExternalIDParams::payment_provider?

      attr_accessor payment_provider_id: String?

      attr_accessor reporting_configuration: Orb::NewReportingConfiguration?

      attr_accessor shipping_address: Orb::AddressInput?

      attr_accessor tax_configuration: Orb::Models::CustomerUpdateByExternalIDParams::tax_configuration?

      attr_accessor tax_id: Orb::CustomerTaxID?

      def initialize: (
        ?accounting_sync_configuration: Orb::NewAccountingSyncConfiguration?,
        ?additional_emails: ::Array[String]?,
        ?auto_collection: bool?,
        ?billing_address: Orb::AddressInput?,
        ?currency: String?,
        ?email: String?,
        ?email_delivery: bool?,
        ?external_customer_id: String?,
        ?hierarchy: Orb::CustomerHierarchyConfig?,
        ?metadata: ::Hash[Symbol, String?]?,
        ?name: String?,
        ?payment_provider: Orb::Models::CustomerUpdateByExternalIDParams::payment_provider?,
        ?payment_provider_id: String?,
        ?reporting_configuration: Orb::NewReportingConfiguration?,
        ?shipping_address: Orb::AddressInput?,
        ?tax_configuration: Orb::Models::CustomerUpdateByExternalIDParams::tax_configuration?,
        ?tax_id: Orb::CustomerTaxID?,
        ?request_options: Orb::request_opts
      ) -> void

      def to_hash: -> {
        accounting_sync_configuration: Orb::NewAccountingSyncConfiguration?,
        additional_emails: ::Array[String]?,
        auto_collection: bool?,
        billing_address: Orb::AddressInput?,
        currency: String?,
        email: String?,
        email_delivery: bool?,
        external_customer_id: String?,
        hierarchy: Orb::CustomerHierarchyConfig?,
        metadata: ::Hash[Symbol, String?]?,
        name: String?,
        payment_provider: Orb::Models::CustomerUpdateByExternalIDParams::payment_provider?,
        payment_provider_id: String?,
        reporting_configuration: Orb::NewReportingConfiguration?,
        shipping_address: Orb::AddressInput?,
        tax_configuration: Orb::Models::CustomerUpdateByExternalIDParams::tax_configuration?,
        tax_id: Orb::CustomerTaxID?,
        request_options: Orb::RequestOptions
      }

      type payment_provider =
        :quickbooks | :"bill.com" | :stripe_charge | :stripe_invoice | :netsuite

      module PaymentProvider
        extend Orb::Internal::Type::Enum

        QUICKBOOKS: :quickbooks
        BILL_COM: :"bill.com"
        STRIPE_CHARGE: :stripe_charge
        STRIPE_INVOICE: :stripe_invoice
        NETSUITE: :netsuite

        def self?.values: -> ::Array[Orb::Models::CustomerUpdateByExternalIDParams::payment_provider]
      end

      type tax_configuration =
        Orb::NewAvalaraTaxConfiguration
        | Orb::NewTaxJarConfiguration
        | Orb::NewSphereConfiguration

      module TaxConfiguration
        extend Orb::Internal::Type::Union

        def self?.variants: -> ::Array[Orb::Models::CustomerUpdateByExternalIDParams::tax_configuration]
      end
    end
  end
end
