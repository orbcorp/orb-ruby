module Orb
  type request_opts =
    Orb::RequestOptions | Orb::request_options | ::Hash[Symbol, top]

  type request_parameters = { request_options: Orb::request_opts }

  module RequestParameters
    attr_accessor request_options: Orb::request_opts

    module Converter
      def dump_request: (top params) -> [top, ::Hash[Symbol, top]]
    end
  end

  type request_options =
    {
      idempotency_key: String?,
      extra_query: ::Hash[String, (::Array[String] | String)?]?,
      extra_headers: ::Hash[String, String?]?,
      extra_body: ::Hash[Symbol, top]?,
      max_retries: Integer?,
      timeout: Float?
    }

  class RequestOptions < Orb::BaseModel
    def self.validate!: (self | ::Hash[Symbol, top] opts) -> void

    attr_accessor idempotency_key: String?

    attr_accessor extra_query: ::Hash[String, (::Array[String] | String)?]?

    attr_accessor extra_headers: ::Hash[String, String?]?

    attr_accessor extra_body: ::Hash[Symbol, top]?

    attr_accessor max_retries: Integer?

    attr_accessor timeout: Float?
  end
end
