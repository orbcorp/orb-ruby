module Orb
  module Resources
    class Prices
      attr_reader external_price_id: Orb::Resources::Prices::ExternalPriceID

      def create:
        (
          Orb::Models::PriceCreateParams | ::Hash[Symbol, top] params
        ) -> Orb::Models::price_model
        | (
          new_floating_price_model: Orb::Models::NewFloatingPriceModel,
          request_options: Orb::request_opts
        ) -> Orb::Models::price_model

      def update:
        (
          String price_id,
          ?Orb::Models::PriceUpdateParams | ::Hash[Symbol, top] params
        ) -> Orb::Models::price_model
        | (
          String price_id,
          metadata: ::Hash[Symbol, String?]?,
          request_options: Orb::request_opts
        ) -> Orb::Models::price_model

      def list:
        (
          ?Orb::Models::PriceListParams | ::Hash[Symbol, top] params
        ) -> Orb::Page[Orb::Models::price_model]
        | (
          cursor: String?,
          limit: Integer,
          request_options: Orb::request_opts
        ) -> Orb::Page[Orb::Models::price_model]

      def evaluate:
        (
          String price_id,
          Orb::Models::PriceEvaluateParams | ::Hash[Symbol, top] params
        ) -> Orb::Models::PriceEvaluateResponse
        | (
          String price_id,
          timeframe_end: Time,
          timeframe_start: Time,
          customer_id: String?,
          external_customer_id: String?,
          filter: String?,
          grouping_keys: ::Array[String],
          request_options: Orb::request_opts
        ) -> Orb::Models::PriceEvaluateResponse

      def fetch:
        (
          String price_id,
          ?Orb::Models::PriceFetchParams | ::Hash[Symbol, top] params
        ) -> Orb::Models::price_model
        | (
          String price_id,
          request_options: Orb::request_opts
        ) -> Orb::Models::price_model

      def initialize: (client: Orb::Client) -> void
    end
  end
end
