module Orb
  module Resources
    class Subscriptions
      def create: (
        ?add_adjustments: ::Array[Orb::SubscriptionCreateParams::AddAdjustment]?,
        ?add_prices: ::Array[Orb::SubscriptionCreateParams::AddPrice]?,
        ?align_billing_with_subscription_start_date: bool,
        ?auto_collection: bool?,
        ?aws_region: String?,
        ?billing_cycle_anchor_configuration: Orb::SubscriptionCreateParams::BillingCycleAnchorConfiguration?,
        ?coupon_redemption_code: String?,
        ?credits_overage_rate: Float?,
        ?currency: String?,
        ?customer_id: String?,
        ?default_invoice_memo: String?,
        ?end_date: Time?,
        ?external_customer_id: String?,
        ?external_marketplace: Orb::Models::SubscriptionCreateParams::external_marketplace?,
        ?external_marketplace_reporting_id: String?,
        ?external_plan_id: String?,
        ?filter: String?,
        ?initial_phase_order: Integer?,
        ?invoicing_threshold: String?,
        ?metadata: ::Hash[Symbol, String?]?,
        ?name: String?,
        ?net_terms: Integer?,
        ?per_credit_overage_amount: Float?,
        ?plan_id: String?,
        ?plan_version_number: Integer?,
        ?price_overrides: ::Array[top]?,
        ?remove_adjustments: ::Array[Orb::SubscriptionCreateParams::RemoveAdjustment]?,
        ?remove_prices: ::Array[Orb::SubscriptionCreateParams::RemovePrice]?,
        ?replace_adjustments: ::Array[Orb::SubscriptionCreateParams::ReplaceAdjustment]?,
        ?replace_prices: ::Array[Orb::SubscriptionCreateParams::ReplacePrice]?,
        ?start_date: Time?,
        ?trial_duration_days: Integer?,
        ?usage_customer_ids: ::Array[String]?,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionCreateResponse

      def update: (
        String subscription_id,
        ?auto_collection: bool?,
        ?default_invoice_memo: String?,
        ?invoicing_threshold: String?,
        ?metadata: ::Hash[Symbol, String?]?,
        ?net_terms: Integer?,
        ?request_options: Orb::request_opts
      ) -> Orb::Subscription

      def list: (
        ?created_at_gt: Time?,
        ?created_at_gte: Time?,
        ?created_at_lt: Time?,
        ?created_at_lte: Time?,
        ?cursor: String?,
        ?customer_id: ::Array[String]?,
        ?external_customer_id: ::Array[String]?,
        ?limit: Integer,
        ?status: Orb::Models::SubscriptionListParams::status?,
        ?request_options: Orb::request_opts
      ) -> Orb::Internal::Page[Orb::Subscription]

      def cancel: (
        String subscription_id,
        cancel_option: Orb::Models::SubscriptionCancelParams::cancel_option,
        ?allow_invoice_credit_or_void: bool?,
        ?cancellation_date: Time?,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionCancelResponse

      def fetch: (
        String subscription_id,
        ?request_options: Orb::request_opts
      ) -> Orb::Subscription

      def fetch_costs: (
        String subscription_id,
        ?currency: String?,
        ?timeframe_end: Time?,
        ?timeframe_start: Time?,
        ?view_mode: Orb::Models::SubscriptionFetchCostsParams::view_mode?,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionFetchCostsResponse

      def fetch_schedule: (
        String subscription_id,
        ?cursor: String?,
        ?limit: Integer,
        ?start_date_gt: Time?,
        ?start_date_gte: Time?,
        ?start_date_lt: Time?,
        ?start_date_lte: Time?,
        ?request_options: Orb::request_opts
      ) -> Orb::Internal::Page[Orb::Models::SubscriptionFetchScheduleResponse]

      def fetch_usage: (
        String subscription_id,
        ?billable_metric_id: String?,
        ?first_dimension_key: String?,
        ?first_dimension_value: String?,
        ?granularity: Orb::Models::SubscriptionFetchUsageParams::granularity?,
        ?group_by: String?,
        ?second_dimension_key: String?,
        ?second_dimension_value: String?,
        ?timeframe_end: Time?,
        ?timeframe_start: Time?,
        ?view_mode: Orb::Models::SubscriptionFetchUsageParams::view_mode?,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::subscription_usage

      def price_intervals: (
        String subscription_id,
        ?add: ::Array[Orb::SubscriptionPriceIntervalsParams::Add],
        ?add_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::AddAdjustment],
        ?allow_invoice_credit_or_void: bool?,
        ?edit: ::Array[Orb::SubscriptionPriceIntervalsParams::Edit],
        ?edit_adjustments: ::Array[Orb::SubscriptionPriceIntervalsParams::EditAdjustment],
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionPriceIntervalsResponse

      def redeem_coupon: (
        String subscription_id,
        change_option: Orb::Models::SubscriptionRedeemCouponParams::change_option,
        ?allow_invoice_credit_or_void: bool?,
        ?change_date: Time?,
        ?coupon_id: String?,
        ?coupon_redemption_code: String?,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionRedeemCouponResponse

      def schedule_plan_change: (
        String subscription_id,
        change_option: Orb::Models::SubscriptionSchedulePlanChangeParams::change_option,
        ?add_adjustments: ::Array[Orb::SubscriptionSchedulePlanChangeParams::AddAdjustment]?,
        ?add_prices: ::Array[Orb::SubscriptionSchedulePlanChangeParams::AddPrice]?,
        ?align_billing_with_plan_change_date: bool?,
        ?auto_collection: bool?,
        ?billing_cycle_alignment: Orb::Models::SubscriptionSchedulePlanChangeParams::billing_cycle_alignment?,
        ?billing_cycle_anchor_configuration: Orb::SubscriptionSchedulePlanChangeParams::BillingCycleAnchorConfiguration?,
        ?change_date: Time?,
        ?coupon_redemption_code: String?,
        ?credits_overage_rate: Float?,
        ?default_invoice_memo: String?,
        ?external_plan_id: String?,
        ?filter: String?,
        ?initial_phase_order: Integer?,
        ?invoicing_threshold: String?,
        ?net_terms: Integer?,
        ?per_credit_overage_amount: Float?,
        ?plan_id: String?,
        ?plan_version_number: Integer?,
        ?price_overrides: ::Array[top]?,
        ?remove_adjustments: ::Array[Orb::SubscriptionSchedulePlanChangeParams::RemoveAdjustment]?,
        ?remove_prices: ::Array[Orb::SubscriptionSchedulePlanChangeParams::RemovePrice]?,
        ?replace_adjustments: ::Array[Orb::SubscriptionSchedulePlanChangeParams::ReplaceAdjustment]?,
        ?replace_prices: ::Array[Orb::SubscriptionSchedulePlanChangeParams::ReplacePrice]?,
        ?trial_duration_days: Integer?,
        ?usage_customer_ids: ::Array[String]?,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionSchedulePlanChangeResponse

      def trigger_phase: (
        String subscription_id,
        ?allow_invoice_credit_or_void: bool?,
        ?effective_date: Date?,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionTriggerPhaseResponse

      def unschedule_cancellation: (
        String subscription_id,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionUnscheduleCancellationResponse

      def unschedule_fixed_fee_quantity_updates: (
        String subscription_id,
        price_id: String,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionUnscheduleFixedFeeQuantityUpdatesResponse

      def unschedule_pending_plan_changes: (
        String subscription_id,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionUnschedulePendingPlanChangesResponse

      def update_fixed_fee_quantity: (
        String subscription_id,
        price_id: String,
        quantity: Float,
        ?allow_invoice_credit_or_void: bool?,
        ?change_option: Orb::Models::SubscriptionUpdateFixedFeeQuantityParams::change_option,
        ?effective_date: Date?,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionUpdateFixedFeeQuantityResponse

      def update_trial: (
        String subscription_id,
        trial_end_date: Orb::Models::SubscriptionUpdateTrialParams::trial_end_date,
        ?shift: bool,
        ?request_options: Orb::request_opts
      ) -> Orb::Models::SubscriptionUpdateTrialResponse

      def initialize: (client: Orb::Client) -> void
    end
  end
end
