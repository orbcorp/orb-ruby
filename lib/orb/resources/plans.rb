# frozen_string_literal: true

module Orb
  module Resources
    class Plans
      # @return [Orb::Resources::Plans::ExternalPlanID]
      attr_reader :external_plan_id

      # This endpoint allows creation of plans including their prices.
      #
      # @param params [Orb::Models::PlanCreateParams, Hash{Symbol=>Object}] .
      #
      #   @option params [String] :currency An ISO 4217 currency string for invoices generated by subscriptions on this
      #     plan.
      #
      #   @option params [String] :name
      #
      #   @option params [Array<Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice>] :prices Prices for this plan. If the plan has phases, this includes prices across all
      #     phases of the plan.
      #
      #   @option params [String, nil] :default_invoice_memo Free-form text which is available on the invoice PDF and the Orb invoice portal.
      #
      #   @option params [String, nil] :external_plan_id
      #
      #   @option params [Hash{Symbol=>String, nil}, nil] :metadata User-specified key/value pairs for the resource. Individual keys can be removed
      #     by setting the value to `null`, and the entire metadata mapping can be cleared
      #     by setting `metadata` to `null`.
      #
      #   @option params [Integer, nil] :net_terms The net terms determines the difference between the invoice date and the issue
      #     date for the invoice. If you intend the invoice to be due on issue, set this
      #     to 0.
      #
      #   @option params [Symbol, Orb::Models::PlanCreateParams::Status] :status The status of the plan to create (either active or draft). If not specified,
      #     this defaults to active.
      #
      #   @option params [Orb::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
      #
      # @return [Orb::Models::Plan]
      #
      # @see Orb::Models::PlanCreateParams
      def create(params)
        parsed, options = Orb::Models::PlanCreateParams.dump_request(params)
        @client.request(method: :post, path: "plans", body: parsed, model: Orb::Models::Plan, options: options)
      end

      # This endpoint can be used to update the `external_plan_id`, and `metadata` of an
      #   existing plan.
      #
      #   Other fields on a customer are currently immutable.
      #
      # @param plan_id [String]
      #
      # @param params [Orb::Models::PlanUpdateParams, Hash{Symbol=>Object}] .
      #
      #   @option params [String, nil] :external_plan_id An optional user-defined ID for this plan resource, used throughout the system
      #     as an alias for this Plan. Use this field to identify a plan by an existing
      #     identifier in your system.
      #
      #   @option params [Hash{Symbol=>String, nil}, nil] :metadata User-specified key/value pairs for the resource. Individual keys can be removed
      #     by setting the value to `null`, and the entire metadata mapping can be cleared
      #     by setting `metadata` to `null`.
      #
      #   @option params [Orb::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
      #
      # @return [Orb::Models::Plan]
      #
      # @see Orb::Models::PlanUpdateParams
      def update(plan_id, params = {})
        parsed, options = Orb::Models::PlanUpdateParams.dump_request(params)
        @client.request(
          method: :put,
          path: ["plans/%1$s", plan_id],
          body: parsed,
          model: Orb::Models::Plan,
          options: options
        )
      end

      # This endpoint returns a list of all [plans](/core-concepts#plan-and-price) for
      #   an account in a list format. The list of plans is ordered starting from the most
      #   recently created plan. The response also includes
      #   [`pagination_metadata`](/api-reference/pagination), which lets the caller
      #   retrieve the next page of results if they exist.
      #
      # @param params [Orb::Models::PlanListParams, Hash{Symbol=>Object}] .
      #
      #   @option params [Time, nil] :created_at_gt
      #
      #   @option params [Time, nil] :created_at_gte
      #
      #   @option params [Time, nil] :created_at_lt
      #
      #   @option params [Time, nil] :created_at_lte
      #
      #   @option params [String, nil] :cursor Cursor for pagination. This can be populated by the `next_cursor` value returned
      #     from the initial request.
      #
      #   @option params [Integer] :limit The number of items to fetch. Defaults to 20.
      #
      #   @option params [Symbol, Orb::Models::PlanListParams::Status] :status The plan status to filter to ('active', 'archived', or 'draft').
      #
      #   @option params [Orb::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
      #
      # @return [Orb::Page<Orb::Models::Plan>]
      #
      # @see Orb::Models::PlanListParams
      def list(params = {})
        parsed, options = Orb::Models::PlanListParams.dump_request(params)
        @client.request(
          method: :get,
          path: "plans",
          query: parsed,
          page: Orb::Page,
          model: Orb::Models::Plan,
          options: options
        )
      end

      # This endpoint is used to fetch [plan](/core-concepts#plan-and-price) details
      #   given a plan identifier. It returns information about the prices included in the
      #   plan and their configuration, as well as the product that the plan is attached
      #   to.
      #
      #   ## Serialized prices
      #
      #   Orb supports a few different pricing models out of the box. Each of these models
      #   is serialized differently in a given [Price](/core-concepts#plan-and-price)
      #   object. The `model_type` field determines the key for the configuration object
      #   that is present. A detailed explanation of price types can be found in the
      #   [Price schema](/core-concepts#plan-and-price).
      #
      #   ## Phases
      #
      #   Orb supports plan phases, also known as contract ramps. For plans with phases,
      #   the serialized prices refer to all prices across all phases.
      #
      # @param plan_id [String]
      #
      # @param params [Orb::Models::PlanFetchParams, Hash{Symbol=>Object}] .
      #
      #   @option params [Orb::RequestOptions, Hash{Symbol=>Object}, nil] :request_options
      #
      # @return [Orb::Models::Plan]
      #
      # @see Orb::Models::PlanFetchParams
      def fetch(plan_id, params = {})
        @client.request(
          method: :get,
          path: ["plans/%1$s", plan_id],
          model: Orb::Models::Plan,
          options: params[:request_options]
        )
      end

      # @api private
      #
      # @param client [Orb::Client]
      def initialize(client:)
        @client = client
        @external_plan_id = Orb::Resources::Plans::ExternalPlanID.new(client: client)
      end
    end
  end
end
