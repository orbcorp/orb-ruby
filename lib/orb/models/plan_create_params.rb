# frozen_string_literal: true

module Orb
  module Models
    class PlanCreateParams < Orb::BaseModel
      # @!parse
      #   extend Orb::RequestParameters::Converter
      include Orb::RequestParameters

      # @!attribute currency
      #   An ISO 4217 currency string for invoices generated by subscriptions on this
      #     plan.
      #
      #   @return [String]
      required :currency, String

      # @!attribute name
      #
      #   @return [String]
      required :name, String

      # @!attribute prices
      #   Prices for this plan. If the plan has phases, this includes prices across all
      #     phases of the plan.
      #
      #   @return [Array<Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice>]
      required :prices, -> { Orb::ArrayOf[union: Orb::Models::PlanCreateParams::Price] }

      # @!attribute default_invoice_memo
      #   Free-form text which is available on the invoice PDF and the Orb invoice portal.
      #
      #   @return [String, nil]
      optional :default_invoice_memo, String, nil?: true

      # @!attribute external_plan_id
      #
      #   @return [String, nil]
      optional :external_plan_id, String, nil?: true

      # @!attribute metadata
      #   User-specified key/value pairs for the resource. Individual keys can be removed
      #     by setting the value to `null`, and the entire metadata mapping can be cleared
      #     by setting `metadata` to `null`.
      #
      #   @return [Hash{Symbol=>String, nil}, nil]
      optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

      # @!attribute net_terms
      #   The net terms determines the difference between the invoice date and the issue
      #     date for the invoice. If you intend the invoice to be due on issue, set this
      #     to 0.
      #
      #   @return [Integer, nil]
      optional :net_terms, Integer, nil?: true

      # @!attribute [r] status
      #   The status of the plan to create (either active or draft). If not specified,
      #     this defaults to active.
      #
      #   @return [Symbol, Orb::Models::PlanCreateParams::Status, nil]
      optional :status, enum: -> { Orb::Models::PlanCreateParams::Status }

      # @!parse
      #   # @return [Symbol, Orb::Models::PlanCreateParams::Status]
      #   attr_writer :status

      # @!parse
      #   # @param currency [String]
      #   # @param name [String]
      #   # @param prices [Array<Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice>]
      #   # @param default_invoice_memo [String, nil]
      #   # @param external_plan_id [String, nil]
      #   # @param metadata [Hash{Symbol=>String, nil}, nil]
      #   # @param net_terms [Integer, nil]
      #   # @param status [Symbol, Orb::Models::PlanCreateParams::Status]
      #   # @param request_options [Orb::RequestOptions, Hash{Symbol=>Object}]
      #   #
      #   def initialize(
      #     currency:,
      #     name:,
      #     prices:,
      #     default_invoice_memo: nil,
      #     external_plan_id: nil,
      #     metadata: nil,
      #     net_terms: nil,
      #     status: nil,
      #     request_options: {},
      #     **
      #   )
      #     super
      #   end

      # def initialize: (Hash | Orb::BaseModel) -> void

      # @abstract
      #
      # @example
      # ```ruby
      # case price
      # in {
      #   model_type: "unit",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice ...
      # in {
      #   model_type: "package",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice ...
      # in {
      #   model_type: "matrix",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::Cadence,
      #   item_id: String,
      #   matrix_config: Orb::Models::MatrixConfigModel
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice ...
      # in {
      #   model_type: "tiered",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice ...
      # in {
      #   model_type: "tiered_bps",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice ...
      # in {
      #   model_type: "bps",
      #   bps_config: Orb::Models::BpsConfigModel,
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::Cadence,
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice ...
      # in {
      #   model_type: "bulk_bps",
      #   bulk_bps_config: Orb::Models::BulkBpsConfigModel,
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::Cadence,
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice ...
      # in {
      #   model_type: "bulk",
      #   bulk_config: Orb::Models::BulkConfigModel,
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::Cadence,
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice ...
      # in {
      #   model_type: "threshold_total_amount",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice ...
      # in {
      #   model_type: "tiered_package",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice ...
      # in {
      #   model_type: "tiered_with_minimum",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice ...
      # in {
      #   model_type: "unit_with_percent",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice ...
      # in {
      #   model_type: "package_with_allocation",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice ...
      # in {
      #   model_type: "tiered_with_proration",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice ...
      # in {
      #   model_type: "unit_with_proration",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice ...
      # in {
      #   model_type: "grouped_allocation",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::Cadence,
      #   grouped_allocation_config: ^(Orb::HashOf[Orb::Unknown]),
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice ...
      # in {
      #   model_type: "grouped_with_prorated_minimum",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::Cadence,
      #   grouped_with_prorated_minimum_config: ^(Orb::HashOf[Orb::Unknown]),
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice ...
      # in {
      #   model_type: "grouped_with_metered_minimum",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::Cadence,
      #   grouped_with_metered_minimum_config: ^(Orb::HashOf[Orb::Unknown]),
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice ...
      # in {
      #   model_type: "matrix_with_display_name",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::Cadence,
      #   item_id: String,
      #   matrix_with_display_name_config: ^(Orb::HashOf[Orb::Unknown])
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice ...
      # in {
      #   model_type: "bulk_with_proration",
      #   bulk_with_proration_config: ^(Orb::HashOf[Orb::Unknown]),
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::Cadence,
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice ...
      # in {
      #   model_type: "grouped_tiered_package",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::Cadence,
      #   grouped_tiered_package_config: ^(Orb::HashOf[Orb::Unknown]),
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice ...
      # in {
      #   model_type: "max_group_tiered_package",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::Cadence,
      #   item_id: String,
      #   max_group_tiered_package_config: ^(Orb::HashOf[Orb::Unknown])
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice ...
      # in {
      #   model_type: "scalable_matrix_with_unit_pricing",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice ...
      # in {
      #   model_type: "scalable_matrix_with_tiered_pricing",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::Cadence,
      #   item_id: String,
      #   name: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice ...
      # in {
      #   model_type: "cumulative_grouped_bulk",
      #   cadence: Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::Cadence,
      #   cumulative_grouped_bulk_config: ^(Orb::HashOf[Orb::Unknown]),
      #   item_id: String
      # }
      #   # Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice ...
      # end
      # ```
      #
      # @example
      # ```ruby
      # case price
      # in Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice
      #   # ...
      # in Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice
      #   # ...
      # end
      # ```
      class Price < Orb::Union
        discriminator :model_type

        variant :unit, -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice }

        variant :package, -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice }

        variant :matrix, -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice }

        variant :tiered, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice }

        variant :tiered_bps, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice }

        variant :bps, -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice }

        variant :bulk_bps, -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice }

        variant :bulk, -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice }

        variant :threshold_total_amount,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice }

        variant :tiered_package, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice }

        variant :tiered_with_minimum, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice }

        variant :unit_with_percent, -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice }

        variant :package_with_allocation,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice }

        variant :tiered_with_proration, -> { Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice }

        variant :unit_with_proration, -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice }

        variant :grouped_allocation, -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice }

        variant :grouped_with_prorated_minimum,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice }

        variant :grouped_with_metered_minimum,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice }

        variant :matrix_with_display_name,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice }

        variant :bulk_with_proration, -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice }

        variant :grouped_tiered_package,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice }

        variant :max_group_tiered_package,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice }

        variant :scalable_matrix_with_unit_pricing,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice }

        variant :scalable_matrix_with_tiered_pricing,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice }

        variant :cumulative_grouped_bulk,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice }

        class NewPlanUnitPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :unit]
          required :model_type, const: :unit

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute unit_config
          #
          #   @return [Orb::Models::UnitConfigModel]
          required :unit_config, -> { Orb::Models::UnitConfigModel }

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param unit_config [Orb::Models::UnitConfigModel]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :unit]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     unit_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :unit,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanPackagePrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :package]
          required :model_type, const: :package

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute package_config
          #
          #   @return [Orb::Models::PackageConfigModel]
          required :package_config, -> { Orb::Models::PackageConfigModel }

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param package_config [Orb::Models::PackageConfigModel]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :package]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     package_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :package,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanMatrixPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute matrix_config
          #
          #   @return [Orb::Models::MatrixConfigModel]
          required :matrix_config, -> { Orb::Models::MatrixConfigModel }

          # @!attribute model_type
          #
          #   @return [Symbol, :matrix]
          required :model_type, const: :matrix

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::Cadence]
          #   # @param item_id [String]
          #   # @param matrix_config [Orb::Models::MatrixConfigModel]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :matrix]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     matrix_config:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :matrix,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanTieredPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered]
          required :model_type, const: :tiered

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_config
          #
          #   @return [Orb::Models::TieredConfigModel]
          required :tiered_config, -> { Orb::Models::TieredConfigModel }

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param tiered_config [Orb::Models::TieredConfigModel]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :tiered]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     tiered_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :tiered,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanTieredBpsPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered_bps]
          required :model_type, const: :tiered_bps

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_bps_config
          #
          #   @return [Orb::Models::TieredBpsConfigModel]
          required :tiered_bps_config, -> { Orb::Models::TieredBpsConfigModel }

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param tiered_bps_config [Orb::Models::TieredBpsConfigModel]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :tiered_bps]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     tiered_bps_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :tiered_bps,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanBpsPrice < Orb::BaseModel
          # @!attribute bps_config
          #
          #   @return [Orb::Models::BpsConfigModel]
          required :bps_config, -> { Orb::Models::BpsConfigModel }

          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :bps]
          required :model_type, const: :bps

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param bps_config [Orb::Models::BpsConfigModel]
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :bps]
          #   #
          #   def initialize(
          #     bps_config:,
          #     cadence:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :bps,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanBulkBpsPrice < Orb::BaseModel
          # @!attribute bulk_bps_config
          #
          #   @return [Orb::Models::BulkBpsConfigModel]
          required :bulk_bps_config, -> { Orb::Models::BulkBpsConfigModel }

          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :bulk_bps]
          required :model_type, const: :bulk_bps

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param bulk_bps_config [Orb::Models::BulkBpsConfigModel]
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :bulk_bps]
          #   #
          #   def initialize(
          #     bulk_bps_config:,
          #     cadence:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :bulk_bps,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanBulkPrice < Orb::BaseModel
          # @!attribute bulk_config
          #
          #   @return [Orb::Models::BulkConfigModel]
          required :bulk_config, -> { Orb::Models::BulkConfigModel }

          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :bulk]
          required :model_type, const: :bulk

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param bulk_config [Orb::Models::BulkConfigModel]
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :bulk]
          #   #
          #   def initialize(
          #     bulk_config:,
          #     cadence:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :bulk,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanThresholdTotalAmountPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :threshold_total_amount]
          required :model_type, const: :threshold_total_amount

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute threshold_total_amount_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :threshold_total_amount_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param threshold_total_amount_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :threshold_total_amount]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     threshold_total_amount_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :threshold_total_amount,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanTieredPackagePrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered_package]
          required :model_type, const: :tiered_package

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_package_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :tiered_package_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param tiered_package_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :tiered_package]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     tiered_package_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :tiered_package,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanTieredWithMinimumPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered_with_minimum]
          required :model_type, const: :tiered_with_minimum

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_with_minimum_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :tiered_with_minimum_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param tiered_with_minimum_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :tiered_with_minimum]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     tiered_with_minimum_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :tiered_with_minimum,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanUnitWithPercentPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :unit_with_percent]
          required :model_type, const: :unit_with_percent

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute unit_with_percent_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :unit_with_percent_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param unit_with_percent_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :unit_with_percent]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     unit_with_percent_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :unit_with_percent,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanPackageWithAllocationPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :package_with_allocation]
          required :model_type, const: :package_with_allocation

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute package_with_allocation_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :package_with_allocation_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param package_with_allocation_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :package_with_allocation]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     package_with_allocation_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :package_with_allocation,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanTierWithProrationPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered_with_proration]
          required :model_type, const: :tiered_with_proration

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_with_proration_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :tiered_with_proration_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param tiered_with_proration_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :tiered_with_proration]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     tiered_with_proration_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :tiered_with_proration,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanUnitWithProrationPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :unit_with_proration]
          required :model_type, const: :unit_with_proration

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute unit_with_proration_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :unit_with_proration_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param unit_with_proration_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :unit_with_proration]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     unit_with_proration_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :unit_with_proration,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanGroupedAllocationPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::Cadence }

          # @!attribute grouped_allocation_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :grouped_allocation_config, Orb::HashOf[Orb::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :grouped_allocation]
          required :model_type, const: :grouped_allocation

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::Cadence]
          #   # @param grouped_allocation_config [Hash{Symbol=>Object}]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :grouped_allocation]
          #   #
          #   def initialize(
          #     cadence:,
          #     grouped_allocation_config:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :grouped_allocation,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanGroupedWithProratedMinimumPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::Cadence }

          # @!attribute grouped_with_prorated_minimum_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :grouped_with_prorated_minimum_config, Orb::HashOf[Orb::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :grouped_with_prorated_minimum]
          required :model_type, const: :grouped_with_prorated_minimum

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::Cadence]
          #   # @param grouped_with_prorated_minimum_config [Hash{Symbol=>Object}]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :grouped_with_prorated_minimum]
          #   #
          #   def initialize(
          #     cadence:,
          #     grouped_with_prorated_minimum_config:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :grouped_with_prorated_minimum,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanGroupedWithMeteredMinimumPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::Cadence }

          # @!attribute grouped_with_metered_minimum_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :grouped_with_metered_minimum_config, Orb::HashOf[Orb::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :grouped_with_metered_minimum]
          required :model_type, const: :grouped_with_metered_minimum

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::Cadence]
          #   # @param grouped_with_metered_minimum_config [Hash{Symbol=>Object}]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :grouped_with_metered_minimum]
          #   #
          #   def initialize(
          #     cadence:,
          #     grouped_with_metered_minimum_config:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :grouped_with_metered_minimum,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanMatrixWithDisplayNamePrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute matrix_with_display_name_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :matrix_with_display_name_config, Orb::HashOf[Orb::Unknown]

          # @!attribute model_type
          #
          #   @return [Symbol, :matrix_with_display_name]
          required :model_type, const: :matrix_with_display_name

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::Cadence]
          #   # @param item_id [String]
          #   # @param matrix_with_display_name_config [Hash{Symbol=>Object}]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :matrix_with_display_name]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     matrix_with_display_name_config:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :matrix_with_display_name,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanBulkWithProrationPrice < Orb::BaseModel
          # @!attribute bulk_with_proration_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :bulk_with_proration_config, Orb::HashOf[Orb::Unknown]

          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :bulk_with_proration]
          required :model_type, const: :bulk_with_proration

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param bulk_with_proration_config [Hash{Symbol=>Object}]
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :bulk_with_proration]
          #   #
          #   def initialize(
          #     bulk_with_proration_config:,
          #     cadence:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :bulk_with_proration,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanGroupedTieredPackagePrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::Cadence }

          # @!attribute grouped_tiered_package_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :grouped_tiered_package_config, Orb::HashOf[Orb::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :grouped_tiered_package]
          required :model_type, const: :grouped_tiered_package

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::Cadence]
          #   # @param grouped_tiered_package_config [Hash{Symbol=>Object}]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :grouped_tiered_package]
          #   #
          #   def initialize(
          #     cadence:,
          #     grouped_tiered_package_config:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :grouped_tiered_package,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanMaxGroupTieredPackagePrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute max_group_tiered_package_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :max_group_tiered_package_config, Orb::HashOf[Orb::Unknown]

          # @!attribute model_type
          #
          #   @return [Symbol, :max_group_tiered_package]
          required :model_type, const: :max_group_tiered_package

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::Cadence]
          #   # @param item_id [String]
          #   # @param max_group_tiered_package_config [Hash{Symbol=>Object}]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :max_group_tiered_package]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     max_group_tiered_package_config:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :max_group_tiered_package,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanScalableMatrixWithUnitPricingPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :scalable_matrix_with_unit_pricing]
          required :model_type, const: :scalable_matrix_with_unit_pricing

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute scalable_matrix_with_unit_pricing_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :scalable_matrix_with_unit_pricing_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param scalable_matrix_with_unit_pricing_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :scalable_matrix_with_unit_pricing]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     scalable_matrix_with_unit_pricing_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :scalable_matrix_with_unit_pricing,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanScalableMatrixWithTieredPricingPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :scalable_matrix_with_tiered_pricing]
          required :model_type, const: :scalable_matrix_with_tiered_pricing

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute scalable_matrix_with_tiered_pricing_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :scalable_matrix_with_tiered_pricing_config, Orb::HashOf[Orb::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::Cadence]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param scalable_matrix_with_tiered_pricing_config [Hash{Symbol=>Object}]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :scalable_matrix_with_tiered_pricing]
          #   #
          #   def initialize(
          #     cadence:,
          #     item_id:,
          #     name:,
          #     scalable_matrix_with_tiered_pricing_config:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :scalable_matrix_with_tiered_pricing,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end

        class NewPlanCumulativeGroupedBulkPrice < Orb::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::Cadence }

          # @!attribute cumulative_grouped_bulk_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :cumulative_grouped_bulk_config, Orb::HashOf[Orb::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :cumulative_grouped_bulk]
          required :model_type, const: :cumulative_grouped_bulk

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #     usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #     this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::BooleanModel, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #     months.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :billing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #     price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #     applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #     If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::NewBillingCycleConfigurationModel, nil]
          optional :invoicing_cycle_configuration, -> { Orb::Models::NewBillingCycleConfigurationModel }, nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #     by setting the value to `null`, and the entire metadata mapping can be cleared
          #     by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::HashOf[String, nil?: true], nil?: true

          # @!parse
          #   # @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::Cadence]
          #   # @param cumulative_grouped_bulk_config [Hash{Symbol=>Object}]
          #   # @param item_id [String]
          #   # @param name [String]
          #   # @param billable_metric_id [String, nil]
          #   # @param billed_in_advance [Boolean, nil]
          #   # @param billing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param conversion_rate [Float, nil]
          #   # @param currency [String, nil]
          #   # @param external_price_id [String, nil]
          #   # @param fixed_price_quantity [Float, nil]
          #   # @param invoice_grouping_key [String, nil]
          #   # @param invoicing_cycle_configuration [Orb::Models::NewBillingCycleConfigurationModel, nil]
          #   # @param metadata [Hash{Symbol=>String, nil}, nil]
          #   # @param model_type [Symbol, :cumulative_grouped_bulk]
          #   #
          #   def initialize(
          #     cadence:,
          #     cumulative_grouped_bulk_config:,
          #     item_id:,
          #     name:,
          #     billable_metric_id: nil,
          #     billed_in_advance: nil,
          #     billing_cycle_configuration: nil,
          #     conversion_rate: nil,
          #     currency: nil,
          #     external_price_id: nil,
          #     fixed_price_quantity: nil,
          #     invoice_grouping_key: nil,
          #     invoicing_cycle_configuration: nil,
          #     metadata: nil,
          #     model_type: :cumulative_grouped_bulk,
          #     **
          #   )
          #     super
          #   end

          # def initialize: (Hash | Orb::BaseModel) -> void

          # @abstract
          #
          # The cadence to bill for this price on.
          #
          # @example
          # ```ruby
          # case cadence
          # in :annual
          #   # ...
          # in :semi_annual
          #   # ...
          # in :monthly
          #   # ...
          # in :quarterly
          #   # ...
          # in :one_time
          #   # ...
          # in ...
          #   #...
          # end
          # ```
          class Cadence < Orb::Enum
            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            finalize!

            # @!parse
            #   # @return [Array<Symbol>]
            #   #
            #   def self.values; end
          end
        end
      end

      # @abstract
      #
      # The status of the plan to create (either active or draft). If not specified,
      #   this defaults to active.
      #
      # @example
      # ```ruby
      # case status
      # in :active
      #   # ...
      # in :draft
      #   # ...
      # end
      # ```
      class Status < Orb::Enum
        ACTIVE = :active
        DRAFT = :draft

        finalize!

        # @!parse
        #   # @return [Array<Symbol>]
        #   #
        #   def self.values; end
      end
    end
  end
end
