# frozen_string_literal: true

module Orb
  module Models
    # @see Orb::Resources::Plans#create
    class PlanCreateParams < Orb::Internal::Type::BaseModel
      extend Orb::Internal::Type::RequestParameters::Converter
      include Orb::Internal::Type::RequestParameters

      # @!attribute currency
      #   An ISO 4217 currency string for invoices generated by subscriptions on this
      #   plan.
      #
      #   @return [String]
      required :currency, String

      # @!attribute name
      #
      #   @return [String]
      required :name, String

      # @!attribute prices
      #   Prices for this plan. If the plan has phases, this includes prices across all
      #   phases of the plan.
      #
      #   @return [Array<Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice>]
      required :prices, -> { Orb::Internal::Type::ArrayOf[union: Orb::Models::PlanCreateParams::Price] }

      # @!attribute default_invoice_memo
      #   Free-form text which is available on the invoice PDF and the Orb invoice portal.
      #
      #   @return [String, nil]
      optional :default_invoice_memo, String, nil?: true

      # @!attribute external_plan_id
      #
      #   @return [String, nil]
      optional :external_plan_id, String, nil?: true

      # @!attribute metadata
      #   User-specified key/value pairs for the resource. Individual keys can be removed
      #   by setting the value to `null`, and the entire metadata mapping can be cleared
      #   by setting `metadata` to `null`.
      #
      #   @return [Hash{Symbol=>String, nil}, nil]
      optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

      # @!attribute net_terms
      #   The net terms determines the difference between the invoice date and the issue
      #   date for the invoice. If you intend the invoice to be due on issue, set this
      #   to 0.
      #
      #   @return [Integer, nil]
      optional :net_terms, Integer, nil?: true

      # @!attribute status
      #   The status of the plan to create (either active or draft). If not specified,
      #   this defaults to active.
      #
      #   @return [Symbol, Orb::Models::PlanCreateParams::Status, nil]
      optional :status, enum: -> { Orb::Models::PlanCreateParams::Status }

      # @!method initialize(currency:, name:, prices:, default_invoice_memo: nil, external_plan_id: nil, metadata: nil, net_terms: nil, status: nil, request_options: {})
      #   Some parameter documentations has been truncated, see
      #   {Orb::Models::PlanCreateParams} for more details.
      #
      #   @param currency [String] An ISO 4217 currency string for invoices generated by subscriptions on this plan
      #   ...
      #
      #   @param name [String]
      #
      #   @param prices [Array<Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice>] Prices for this plan. If the plan has phases, this includes prices across all ph
      #   ...
      #
      #   @param default_invoice_memo [String, nil] Free-form text which is available on the invoice PDF and the Orb invoice portal.
      #   ...
      #
      #   @param external_plan_id [String, nil]
      #
      #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
      #   ...
      #
      #   @param net_terms [Integer, nil] The net terms determines the difference between the invoice date and the issue d
      #   ...
      #
      #   @param status [Symbol, Orb::Models::PlanCreateParams::Status] The status of the plan to create (either active or draft). If not specified, thi
      #   ...
      #
      #   @param request_options [Orb::RequestOptions, Hash{Symbol=>Object}]

      module Price
        extend Orb::Internal::Type::Union

        discriminator :model_type

        variant :unit, -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice }

        variant :package, -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice }

        variant :matrix, -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice }

        variant :tiered, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice }

        variant :tiered_bps, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice }

        variant :bps, -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice }

        variant :bulk_bps, -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice }

        variant :bulk, -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice }

        variant :threshold_total_amount,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice }

        variant :tiered_package, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice }

        variant :tiered_with_minimum, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice }

        variant :unit_with_percent, -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice }

        variant :package_with_allocation,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice }

        variant :tiered_with_proration, -> { Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice }

        variant :unit_with_proration, -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice }

        variant :grouped_allocation, -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice }

        variant :grouped_with_prorated_minimum,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice }

        variant :grouped_with_metered_minimum,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice }

        variant :matrix_with_display_name,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice }

        variant :bulk_with_proration, -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice }

        variant :grouped_tiered_package,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice }

        variant :max_group_tiered_package,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice }

        variant :scalable_matrix_with_unit_pricing,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice }

        variant :scalable_matrix_with_tiered_pricing,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice }

        variant :cumulative_grouped_bulk,
                -> { Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice }

        class NewPlanUnitPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :unit]
          required :model_type, const: :unit

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute unit_config
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::UnitConfig]
          required :unit_config, -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::UnitConfig }

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, unit_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :unit)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice} for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param unit_config [Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::UnitConfig]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :unit]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice#unit_config
          class UnitConfig < Orb::Internal::Type::BaseModel
            # @!attribute unit_amount
            #   Rate per unit of usage
            #
            #   @return [String]
            required :unit_amount, String

            # @!method initialize(unit_amount:)
            #   @param unit_amount [String] Rate per unit of usage
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanPackagePrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :package]
          required :model_type, const: :package

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute package_config
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::PackageConfig]
          required :package_config, -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::PackageConfig }

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, package_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :package)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice} for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param package_config [Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::PackageConfig]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :package]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice#package_config
          class PackageConfig < Orb::Internal::Type::BaseModel
            # @!attribute package_amount
            #   A currency amount to rate usage by
            #
            #   @return [String]
            required :package_amount, String

            # @!attribute package_size
            #   An integer amount to represent package size. For example, 1000 here would divide
            #   usage by 1000 before multiplying by package_amount in rating
            #
            #   @return [Integer]
            required :package_size, Integer

            # @!method initialize(package_amount:, package_size:)
            #   Some parameter documentations has been truncated, see
            #   {Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::PackageConfig} for
            #   more details.
            #
            #   @param package_amount [String] A currency amount to rate usage by
            #
            #   @param package_size [Integer] An integer amount to represent package size. For example, 1000 here would divide
            #   ...
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanMatrixPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute matrix_config
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::MatrixConfig]
          required :matrix_config, -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::MatrixConfig }

          # @!attribute model_type
          #
          #   @return [Symbol, :matrix]
          required :model_type, const: :matrix

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, matrix_config:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :matrix)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice} for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param matrix_config [Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::MatrixConfig]
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :matrix]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice#matrix_config
          class MatrixConfig < Orb::Internal::Type::BaseModel
            # @!attribute default_unit_amount
            #   Default per unit rate for any usage not bucketed into a specified matrix_value
            #
            #   @return [String]
            required :default_unit_amount, String

            # @!attribute dimensions
            #   One or two event property values to evaluate matrix groups by
            #
            #   @return [Array<String, nil>]
            required :dimensions, Orb::Internal::Type::ArrayOf[String, nil?: true]

            # @!attribute matrix_values
            #   Matrix values for specified matrix grouping keys
            #
            #   @return [Array<Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::MatrixConfig::MatrixValue>]
            required :matrix_values,
                     -> { Orb::Internal::Type::ArrayOf[Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::MatrixConfig::MatrixValue] }

            # @!method initialize(default_unit_amount:, dimensions:, matrix_values:)
            #   @param default_unit_amount [String] Default per unit rate for any usage not bucketed into a specified matrix_value
            #
            #   @param dimensions [Array<String, nil>] One or two event property values to evaluate matrix groups by
            #
            #   @param matrix_values [Array<Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::MatrixConfig::MatrixValue>] Matrix values for specified matrix grouping keys

            class MatrixValue < Orb::Internal::Type::BaseModel
              # @!attribute dimension_values
              #   One or two matrix keys to filter usage to this Matrix value by. For example,
              #   ["region", "tier"] could be used to filter cloud usage by a cloud region and an
              #   instance tier.
              #
              #   @return [Array<String, nil>]
              required :dimension_values, Orb::Internal::Type::ArrayOf[String, nil?: true]

              # @!attribute unit_amount
              #   Unit price for the specified dimension_values
              #
              #   @return [String]
              required :unit_amount, String

              # @!method initialize(dimension_values:, unit_amount:)
              #   Some parameter documentations has been truncated, see
              #   {Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::MatrixConfig::MatrixValue}
              #   for more details.
              #
              #   @param dimension_values [Array<String, nil>] One or two matrix keys to filter usage to this Matrix value by. For example, ["r
              #   ...
              #
              #   @param unit_amount [String] Unit price for the specified dimension_values
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanTieredPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered]
          required :model_type, const: :tiered

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_config
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::TieredConfig]
          required :tiered_config, -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::TieredConfig }

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, tiered_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :tiered)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice} for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param tiered_config [Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::TieredConfig]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :tiered]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice#tiered_config
          class TieredConfig < Orb::Internal::Type::BaseModel
            # @!attribute tiers
            #   Tiers for rating based on total usage quantities into the specified tier
            #
            #   @return [Array<Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::TieredConfig::Tier>]
            required :tiers,
                     -> { Orb::Internal::Type::ArrayOf[Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::TieredConfig::Tier] }

            # @!method initialize(tiers:)
            #   @param tiers [Array<Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::TieredConfig::Tier>] Tiers for rating based on total usage quantities into the specified tier

            class Tier < Orb::Internal::Type::BaseModel
              # @!attribute first_unit
              #   Exclusive tier starting value
              #
              #   @return [Float]
              required :first_unit, Float

              # @!attribute unit_amount
              #   Amount per unit
              #
              #   @return [String]
              required :unit_amount, String

              # @!attribute last_unit
              #   Inclusive tier ending value. If null, this is treated as the last tier
              #
              #   @return [Float, nil]
              optional :last_unit, Float, nil?: true

              # @!method initialize(first_unit:, unit_amount:, last_unit: nil)
              #   @param first_unit [Float] Exclusive tier starting value
              #
              #   @param unit_amount [String] Amount per unit
              #
              #   @param last_unit [Float, nil] Inclusive tier ending value. If null, this is treated as the last tier
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanTieredBpsPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered_bps]
          required :model_type, const: :tiered_bps

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_bps_config
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::TieredBpsConfig]
          required :tiered_bps_config,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::TieredBpsConfig }

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, tiered_bps_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :tiered_bps)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice} for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param tiered_bps_config [Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::TieredBpsConfig]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :tiered_bps]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice#tiered_bps_config
          class TieredBpsConfig < Orb::Internal::Type::BaseModel
            # @!attribute tiers
            #   Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
            #   tiers
            #
            #   @return [Array<Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::TieredBpsConfig::Tier>]
            required :tiers,
                     -> { Orb::Internal::Type::ArrayOf[Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::TieredBpsConfig::Tier] }

            # @!method initialize(tiers:)
            #   Some parameter documentations has been truncated, see
            #   {Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::TieredBpsConfig}
            #   for more details.
            #
            #   @param tiers [Array<Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::TieredBpsConfig::Tier>] Tiers for a Graduated BPS pricing model, where usage is bucketed into specified
            #   ...

            class Tier < Orb::Internal::Type::BaseModel
              # @!attribute bps
              #   Per-event basis point rate
              #
              #   @return [Float]
              required :bps, Float

              # @!attribute minimum_amount
              #   Exclusive tier starting value
              #
              #   @return [String]
              required :minimum_amount, String

              # @!attribute maximum_amount
              #   Inclusive tier ending value
              #
              #   @return [String, nil]
              optional :maximum_amount, String, nil?: true

              # @!attribute per_unit_maximum
              #   Per unit maximum to charge
              #
              #   @return [String, nil]
              optional :per_unit_maximum, String, nil?: true

              # @!method initialize(bps:, minimum_amount:, maximum_amount: nil, per_unit_maximum: nil)
              #   @param bps [Float] Per-event basis point rate
              #
              #   @param minimum_amount [String] Exclusive tier starting value
              #
              #   @param maximum_amount [String, nil] Inclusive tier ending value
              #
              #   @param per_unit_maximum [String, nil] Per unit maximum to charge
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanBpsPrice < Orb::Internal::Type::BaseModel
          # @!attribute bps_config
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BpsConfig]
          required :bps_config, -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BpsConfig }

          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :bps]
          required :model_type, const: :bps

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(bps_config:, cadence:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :bps)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice} for more details.
          #
          #   @param bps_config [Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BpsConfig]
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :bps]

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice#bps_config
          class BpsConfig < Orb::Internal::Type::BaseModel
            # @!attribute bps
            #   Basis point take rate per event
            #
            #   @return [Float]
            required :bps, Float

            # @!attribute per_unit_maximum
            #   Optional currency amount maximum to cap spend per event
            #
            #   @return [String, nil]
            optional :per_unit_maximum, String, nil?: true

            # @!method initialize(bps:, per_unit_maximum: nil)
            #   @param bps [Float] Basis point take rate per event
            #
            #   @param per_unit_maximum [String, nil] Optional currency amount maximum to cap spend per event
          end

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanBulkBpsPrice < Orb::Internal::Type::BaseModel
          # @!attribute bulk_bps_config
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BulkBpsConfig]
          required :bulk_bps_config, -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BulkBpsConfig }

          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :bulk_bps]
          required :model_type, const: :bulk_bps

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(bulk_bps_config:, cadence:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :bulk_bps)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice} for more details.
          #
          #   @param bulk_bps_config [Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BulkBpsConfig]
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :bulk_bps]

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice#bulk_bps_config
          class BulkBpsConfig < Orb::Internal::Type::BaseModel
            # @!attribute tiers
            #   Tiers for a bulk BPS pricing model where all usage is aggregated to a single
            #   tier based on total volume
            #
            #   @return [Array<Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BulkBpsConfig::Tier>]
            required :tiers,
                     -> { Orb::Internal::Type::ArrayOf[Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BulkBpsConfig::Tier] }

            # @!method initialize(tiers:)
            #   Some parameter documentations has been truncated, see
            #   {Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BulkBpsConfig} for
            #   more details.
            #
            #   @param tiers [Array<Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BulkBpsConfig::Tier>] Tiers for a bulk BPS pricing model where all usage is aggregated to a single tie
            #   ...

            class Tier < Orb::Internal::Type::BaseModel
              # @!attribute bps
              #   Basis points to rate on
              #
              #   @return [Float]
              required :bps, Float

              # @!attribute maximum_amount
              #   Upper bound for tier
              #
              #   @return [String, nil]
              optional :maximum_amount, String, nil?: true

              # @!attribute per_unit_maximum
              #   The maximum amount to charge for any one event
              #
              #   @return [String, nil]
              optional :per_unit_maximum, String, nil?: true

              # @!method initialize(bps:, maximum_amount: nil, per_unit_maximum: nil)
              #   @param bps [Float] Basis points to rate on
              #
              #   @param maximum_amount [String, nil] Upper bound for tier
              #
              #   @param per_unit_maximum [String, nil] The maximum amount to charge for any one event
            end
          end

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanBulkPrice < Orb::Internal::Type::BaseModel
          # @!attribute bulk_config
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BulkConfig]
          required :bulk_config, -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BulkConfig }

          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :bulk]
          required :model_type, const: :bulk

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(bulk_config:, cadence:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :bulk)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice} for more details.
          #
          #   @param bulk_config [Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BulkConfig]
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :bulk]

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice#bulk_config
          class BulkConfig < Orb::Internal::Type::BaseModel
            # @!attribute tiers
            #   Bulk tiers for rating based on total usage volume
            #
            #   @return [Array<Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BulkConfig::Tier>]
            required :tiers,
                     -> { Orb::Internal::Type::ArrayOf[Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BulkConfig::Tier] }

            # @!method initialize(tiers:)
            #   @param tiers [Array<Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BulkConfig::Tier>] Bulk tiers for rating based on total usage volume

            class Tier < Orb::Internal::Type::BaseModel
              # @!attribute unit_amount
              #   Amount per unit
              #
              #   @return [String]
              required :unit_amount, String

              # @!attribute maximum_units
              #   Upper bound for this tier
              #
              #   @return [Float, nil]
              optional :maximum_units, Float, nil?: true

              # @!method initialize(unit_amount:, maximum_units: nil)
              #   @param unit_amount [String] Amount per unit
              #
              #   @param maximum_units [Float, nil] Upper bound for this tier
            end
          end

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanThresholdTotalAmountPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :threshold_total_amount]
          required :model_type, const: :threshold_total_amount

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute threshold_total_amount_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :threshold_total_amount_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, threshold_total_amount_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :threshold_total_amount)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice} for
          #   more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param threshold_total_amount_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :threshold_total_amount]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanTieredPackagePrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered_package]
          required :model_type, const: :tiered_package

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_package_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :tiered_package_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, tiered_package_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :tiered_package)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice} for more
          #   details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param tiered_package_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :tiered_package]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanTieredWithMinimumPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered_with_minimum]
          required :model_type, const: :tiered_with_minimum

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_with_minimum_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :tiered_with_minimum_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, tiered_with_minimum_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :tiered_with_minimum)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice} for more
          #   details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param tiered_with_minimum_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :tiered_with_minimum]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanUnitWithPercentPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::Cadence]
          required :cadence, enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :unit_with_percent]
          required :model_type, const: :unit_with_percent

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute unit_with_percent_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :unit_with_percent_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, unit_with_percent_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :unit_with_percent)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice} for more
          #   details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param unit_with_percent_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :unit_with_percent]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanPackageWithAllocationPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :package_with_allocation]
          required :model_type, const: :package_with_allocation

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute package_with_allocation_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :package_with_allocation_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, package_with_allocation_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :package_with_allocation)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice} for
          #   more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param package_with_allocation_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :package_with_allocation]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanTierWithProrationPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :tiered_with_proration]
          required :model_type, const: :tiered_with_proration

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute tiered_with_proration_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :tiered_with_proration_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, tiered_with_proration_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :tiered_with_proration)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice} for more
          #   details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param tiered_with_proration_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :tiered_with_proration]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanUnitWithProrationPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :unit_with_proration]
          required :model_type, const: :unit_with_proration

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute unit_with_proration_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :unit_with_proration_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, unit_with_proration_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :unit_with_proration)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice} for more
          #   details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param unit_with_proration_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :unit_with_proration]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanGroupedAllocationPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::Cadence }

          # @!attribute grouped_allocation_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :grouped_allocation_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :grouped_allocation]
          required :model_type, const: :grouped_allocation

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, grouped_allocation_config:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :grouped_allocation)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice} for more
          #   details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param grouped_allocation_config [Hash{Symbol=>Object}]
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :grouped_allocation]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanGroupedWithProratedMinimumPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::Cadence }

          # @!attribute grouped_with_prorated_minimum_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :grouped_with_prorated_minimum_config,
                   Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :grouped_with_prorated_minimum]
          required :model_type, const: :grouped_with_prorated_minimum

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, grouped_with_prorated_minimum_config:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :grouped_with_prorated_minimum)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice}
          #   for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param grouped_with_prorated_minimum_config [Hash{Symbol=>Object}]
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :grouped_with_prorated_minimum]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanGroupedWithMeteredMinimumPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::Cadence }

          # @!attribute grouped_with_metered_minimum_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :grouped_with_metered_minimum_config,
                   Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :grouped_with_metered_minimum]
          required :model_type, const: :grouped_with_metered_minimum

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, grouped_with_metered_minimum_config:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :grouped_with_metered_minimum)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice}
          #   for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param grouped_with_metered_minimum_config [Hash{Symbol=>Object}]
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :grouped_with_metered_minimum]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanMatrixWithDisplayNamePrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute matrix_with_display_name_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :matrix_with_display_name_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute model_type
          #
          #   @return [Symbol, :matrix_with_display_name]
          required :model_type, const: :matrix_with_display_name

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, matrix_with_display_name_config:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :matrix_with_display_name)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice} for
          #   more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param matrix_with_display_name_config [Hash{Symbol=>Object}]
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :matrix_with_display_name]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanBulkWithProrationPrice < Orb::Internal::Type::BaseModel
          # @!attribute bulk_with_proration_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :bulk_with_proration_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :bulk_with_proration]
          required :model_type, const: :bulk_with_proration

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(bulk_with_proration_config:, cadence:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :bulk_with_proration)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice} for more
          #   details.
          #
          #   @param bulk_with_proration_config [Hash{Symbol=>Object}]
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :bulk_with_proration]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanGroupedTieredPackagePrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::Cadence }

          # @!attribute grouped_tiered_package_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :grouped_tiered_package_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :grouped_tiered_package]
          required :model_type, const: :grouped_tiered_package

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, grouped_tiered_package_config:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :grouped_tiered_package)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice} for
          #   more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::Cadence] The cadence to bill for this price on.
          #
          #   @param grouped_tiered_package_config [Hash{Symbol=>Object}]
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :grouped_tiered_package]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanMaxGroupTieredPackagePrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute max_group_tiered_package_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :max_group_tiered_package_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute model_type
          #
          #   @return [Symbol, :max_group_tiered_package]
          required :model_type, const: :max_group_tiered_package

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, max_group_tiered_package_config:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :max_group_tiered_package)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice} for
          #   more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param max_group_tiered_package_config [Hash{Symbol=>Object}]
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :max_group_tiered_package]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanScalableMatrixWithUnitPricingPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :scalable_matrix_with_unit_pricing]
          required :model_type, const: :scalable_matrix_with_unit_pricing

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute scalable_matrix_with_unit_pricing_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :scalable_matrix_with_unit_pricing_config,
                   Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, scalable_matrix_with_unit_pricing_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :scalable_matrix_with_unit_pricing)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice}
          #   for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param scalable_matrix_with_unit_pricing_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :scalable_matrix_with_unit_pricing]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanScalableMatrixWithTieredPricingPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::Cadence }

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :scalable_matrix_with_tiered_pricing]
          required :model_type, const: :scalable_matrix_with_tiered_pricing

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute scalable_matrix_with_tiered_pricing_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :scalable_matrix_with_tiered_pricing_config,
                   Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, item_id:, name:, scalable_matrix_with_tiered_pricing_config:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :scalable_matrix_with_tiered_pricing)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice}
          #   for more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param scalable_matrix_with_tiered_pricing_config [Hash{Symbol=>Object}]
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :scalable_matrix_with_tiered_pricing]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        class NewPlanCumulativeGroupedBulkPrice < Orb::Internal::Type::BaseModel
          # @!attribute cadence
          #   The cadence to bill for this price on.
          #
          #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::Cadence]
          required :cadence,
                   enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::Cadence }

          # @!attribute cumulative_grouped_bulk_config
          #
          #   @return [Hash{Symbol=>Object}]
          required :cumulative_grouped_bulk_config, Orb::Internal::Type::HashOf[Orb::Internal::Type::Unknown]

          # @!attribute item_id
          #   The id of the item the price will be associated with.
          #
          #   @return [String]
          required :item_id, String

          # @!attribute model_type
          #
          #   @return [Symbol, :cumulative_grouped_bulk]
          required :model_type, const: :cumulative_grouped_bulk

          # @!attribute name
          #   The name of the price.
          #
          #   @return [String]
          required :name, String

          # @!attribute billable_metric_id
          #   The id of the billable metric for the price. Only needed if the price is
          #   usage-based.
          #
          #   @return [String, nil]
          optional :billable_metric_id, String, nil?: true

          # @!attribute billed_in_advance
          #   If the Price represents a fixed cost, the price will be billed in-advance if
          #   this is true, and in-arrears if this is false.
          #
          #   @return [Boolean, nil]
          optional :billed_in_advance, Orb::Internal::Type::Boolean, nil?: true

          # @!attribute billing_cycle_configuration
          #   For custom cadence: specifies the duration of the billing period in days or
          #   months.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::BillingCycleConfiguration, nil]
          optional :billing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::BillingCycleConfiguration },
                   nil?: true

          # @!attribute conversion_rate
          #   The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @return [Float, nil]
          optional :conversion_rate, Float, nil?: true

          # @!attribute currency
          #   An ISO 4217 currency string, or custom pricing unit identifier, in which this
          #   price is billed.
          #
          #   @return [String, nil]
          optional :currency, String, nil?: true

          # @!attribute external_price_id
          #   An alias for the price.
          #
          #   @return [String, nil]
          optional :external_price_id, String, nil?: true

          # @!attribute fixed_price_quantity
          #   If the Price represents a fixed cost, this represents the quantity of units
          #   applied.
          #
          #   @return [Float, nil]
          optional :fixed_price_quantity, Float, nil?: true

          # @!attribute invoice_grouping_key
          #   The property used to group this price on an invoice
          #
          #   @return [String, nil]
          optional :invoice_grouping_key, String, nil?: true

          # @!attribute invoicing_cycle_configuration
          #   Within each billing cycle, specifies the cadence at which invoices are produced.
          #   If unspecified, a single invoice is produced per billing cycle.
          #
          #   @return [Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::InvoicingCycleConfiguration, nil]
          optional :invoicing_cycle_configuration,
                   -> { Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::InvoicingCycleConfiguration },
                   nil?: true

          # @!attribute metadata
          #   User-specified key/value pairs for the resource. Individual keys can be removed
          #   by setting the value to `null`, and the entire metadata mapping can be cleared
          #   by setting `metadata` to `null`.
          #
          #   @return [Hash{Symbol=>String, nil}, nil]
          optional :metadata, Orb::Internal::Type::HashOf[String, nil?: true], nil?: true

          # @!method initialize(cadence:, cumulative_grouped_bulk_config:, item_id:, name:, billable_metric_id: nil, billed_in_advance: nil, billing_cycle_configuration: nil, conversion_rate: nil, currency: nil, external_price_id: nil, fixed_price_quantity: nil, invoice_grouping_key: nil, invoicing_cycle_configuration: nil, metadata: nil, model_type: :cumulative_grouped_bulk)
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice} for
          #   more details.
          #
          #   @param cadence [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::Cadence] The cadence to bill for this price on.
          #
          #   @param cumulative_grouped_bulk_config [Hash{Symbol=>Object}]
          #
          #   @param item_id [String] The id of the item the price will be associated with.
          #
          #   @param name [String] The name of the price.
          #
          #   @param billable_metric_id [String, nil] The id of the billable metric for the price. Only needed if the price is usage-b
          #   ...
          #
          #   @param billed_in_advance [Boolean, nil] If the Price represents a fixed cost, the price will be billed in-advance if thi
          #   ...
          #
          #   @param billing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::BillingCycleConfiguration, nil] For custom cadence: specifies the duration of the billing period in days or mont
          #   ...
          #
          #   @param conversion_rate [Float, nil] The per unit conversion rate of the price currency to the invoicing currency.
          #
          #   @param currency [String, nil] An ISO 4217 currency string, or custom pricing unit identifier, in which this pr
          #   ...
          #
          #   @param external_price_id [String, nil] An alias for the price.
          #
          #   @param fixed_price_quantity [Float, nil] If the Price represents a fixed cost, this represents the quantity of units appl
          #   ...
          #
          #   @param invoice_grouping_key [String, nil] The property used to group this price on an invoice
          #
          #   @param invoicing_cycle_configuration [Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::InvoicingCycleConfiguration, nil] Within each billing cycle, specifies the cadence at which invoices are produced.
          #   ...
          #
          #   @param metadata [Hash{Symbol=>String, nil}, nil] User-specified key/value pairs for the resource. Individual keys can be removed
          #   ...
          #
          #   @param model_type [Symbol, :cumulative_grouped_bulk]

          # The cadence to bill for this price on.
          #
          # @see Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice#cadence
          module Cadence
            extend Orb::Internal::Type::Enum

            ANNUAL = :annual
            SEMI_ANNUAL = :semi_annual
            MONTHLY = :monthly
            QUARTERLY = :quarterly
            ONE_TIME = :one_time
            CUSTOM = :custom

            # @!method self.values
            #   @return [Array<Symbol>]
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice#billing_cycle_configuration
          class BillingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::BillingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::BillingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   For custom cadence: specifies the duration of the billing period in days or
            #   months.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::BillingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::BillingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end

          # @see Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice#invoicing_cycle_configuration
          class InvoicingCycleConfiguration < Orb::Internal::Type::BaseModel
            # @!attribute duration
            #   The duration of the billing period.
            #
            #   @return [Integer]
            required :duration, Integer

            # @!attribute duration_unit
            #   The unit of billing period duration.
            #
            #   @return [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::DurationUnit]
            required :duration_unit,
                     enum: -> { Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::DurationUnit }

            # @!method initialize(duration:, duration_unit:)
            #   Within each billing cycle, specifies the cadence at which invoices are produced.
            #   If unspecified, a single invoice is produced per billing cycle.
            #
            #   @param duration [Integer] The duration of the billing period.
            #
            #   @param duration_unit [Symbol, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::InvoicingCycleConfiguration::DurationUnit] The unit of billing period duration.

            # The unit of billing period duration.
            #
            # @see Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice::InvoicingCycleConfiguration#duration_unit
            module DurationUnit
              extend Orb::Internal::Type::Enum

              DAY = :day
              MONTH = :month

              # @!method self.values
              #   @return [Array<Symbol>]
            end
          end
        end

        # @!method self.variants
        #   @return [Array(Orb::Models::PlanCreateParams::Price::NewPlanUnitPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkBpsPrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkPrice, Orb::Models::PlanCreateParams::Price::NewPlanThresholdTotalAmountPrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanTieredWithMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithPercentPrice, Orb::Models::PlanCreateParams::Price::NewPlanPackageWithAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanTierWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanUnitWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedAllocationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithProratedMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedWithMeteredMinimumPrice, Orb::Models::PlanCreateParams::Price::NewPlanMatrixWithDisplayNamePrice, Orb::Models::PlanCreateParams::Price::NewPlanBulkWithProrationPrice, Orb::Models::PlanCreateParams::Price::NewPlanGroupedTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanMaxGroupTieredPackagePrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithUnitPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanScalableMatrixWithTieredPricingPrice, Orb::Models::PlanCreateParams::Price::NewPlanCumulativeGroupedBulkPrice)]
      end

      # The status of the plan to create (either active or draft). If not specified,
      # this defaults to active.
      module Status
        extend Orb::Internal::Type::Enum

        ACTIVE = :active
        DRAFT = :draft

        # @!method self.values
        #   @return [Array<Symbol>]
      end
    end
  end
end
