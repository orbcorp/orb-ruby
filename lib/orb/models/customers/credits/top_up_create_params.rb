# frozen_string_literal: true

module Orb
  module Models
    module Customers
      module Credits
        # @see Orb::Resources::Customers::Credits::TopUps#create
        class TopUpCreateParams < Orb::Internal::Type::BaseModel
          extend Orb::Internal::Type::RequestParameters::Converter
          include Orb::Internal::Type::RequestParameters

          # @!attribute amount
          #   The amount to increment when the threshold is reached.
          #
          #   @return [String]
          required :amount, String

          # @!attribute currency
          #   The currency or custom pricing unit to use for this top-up. If this is a
          #   real-world currency, it must match the customer's invoicing currency.
          #
          #   @return [String]
          required :currency, String

          # @!attribute invoice_settings
          #   Settings for invoices generated by triggered top-ups.
          #
          #   @return [Orb::Models::Customers::Credits::TopUpCreateParams::InvoiceSettings]
          required :invoice_settings, -> { Orb::Customers::Credits::TopUpCreateParams::InvoiceSettings }

          # @!attribute per_unit_cost_basis
          #   How much, in the customer's currency, to charge for each unit.
          #
          #   @return [String]
          required :per_unit_cost_basis, String

          # @!attribute threshold
          #   The threshold at which to trigger the top-up. If the balance is at or below this
          #   threshold, the top-up will be triggered.
          #
          #   @return [String]
          required :threshold, String

          # @!attribute active_from
          #   The date from which the top-up is active. If unspecified, the top-up is active
          #   immediately. This should not be more than 10 days in the past.
          #
          #   @return [Time, nil]
          optional :active_from, Time, nil?: true

          # @!attribute expires_after
          #   The number of days or months after which the top-up expires. If unspecified, it
          #   does not expire.
          #
          #   @return [Integer, nil]
          optional :expires_after, Integer, nil?: true

          # @!attribute expires_after_unit
          #   The unit of expires_after.
          #
          #   @return [Symbol, Orb::Models::Customers::Credits::TopUpCreateParams::ExpiresAfterUnit, nil]
          optional :expires_after_unit,
                   enum: -> { Orb::Customers::Credits::TopUpCreateParams::ExpiresAfterUnit },
                   nil?: true

          # @!method initialize(amount:, currency:, invoice_settings:, per_unit_cost_basis:, threshold:, active_from: nil, expires_after: nil, expires_after_unit: nil, request_options: {})
          #   Some parameter documentations has been truncated, see
          #   {Orb::Models::Customers::Credits::TopUpCreateParams} for more details.
          #
          #   @param amount [String] The amount to increment when the threshold is reached.
          #
          #   @param currency [String] The currency or custom pricing unit to use for this top-up. If this is a real-wo
          #
          #   @param invoice_settings [Orb::Models::Customers::Credits::TopUpCreateParams::InvoiceSettings] Settings for invoices generated by triggered top-ups.
          #
          #   @param per_unit_cost_basis [String] How much, in the customer's currency, to charge for each unit.
          #
          #   @param threshold [String] The threshold at which to trigger the top-up. If the balance is at or below this
          #
          #   @param active_from [Time, nil] The date from which the top-up is active. If unspecified, the top-up is active i
          #
          #   @param expires_after [Integer, nil] The number of days or months after which the top-up expires. If unspecified, it
          #
          #   @param expires_after_unit [Symbol, Orb::Models::Customers::Credits::TopUpCreateParams::ExpiresAfterUnit, nil] The unit of expires_after.
          #
          #   @param request_options [Orb::RequestOptions, Hash{Symbol=>Object}]

          class InvoiceSettings < Orb::Internal::Type::BaseModel
            # @!attribute auto_collection
            #   Whether the credits purchase invoice should auto collect with the customer's
            #   saved payment method.
            #
            #   @return [Boolean]
            required :auto_collection, Orb::Internal::Type::Boolean

            # @!attribute net_terms
            #   The net terms determines the difference between the invoice date and the issue
            #   date for the invoice. If you intend the invoice to be due on issue, set this
            #   to 0.
            #
            #   @return [Integer]
            required :net_terms, Integer

            # @!attribute memo
            #   An optional memo to display on the invoice.
            #
            #   @return [String, nil]
            optional :memo, String, nil?: true

            # @!attribute require_successful_payment
            #   If true, new credit blocks created by this top-up will require that the
            #   corresponding invoice is paid before they can be drawn down from.
            #
            #   @return [Boolean, nil]
            optional :require_successful_payment, Orb::Internal::Type::Boolean

            # @!method initialize(auto_collection:, net_terms:, memo: nil, require_successful_payment: nil)
            #   Some parameter documentations has been truncated, see
            #   {Orb::Models::Customers::Credits::TopUpCreateParams::InvoiceSettings} for more
            #   details.
            #
            #   Settings for invoices generated by triggered top-ups.
            #
            #   @param auto_collection [Boolean] Whether the credits purchase invoice should auto collect with the customer's sav
            #
            #   @param net_terms [Integer] The net terms determines the difference between the invoice date and the issue d
            #
            #   @param memo [String, nil] An optional memo to display on the invoice.
            #
            #   @param require_successful_payment [Boolean] If true, new credit blocks created by this top-up will require that the correspo
          end

          # The unit of expires_after.
          module ExpiresAfterUnit
            extend Orb::Internal::Type::Enum

            DAY = :day
            MONTH = :month

            # @!method self.values
            #   @return [Array<Symbol>]
          end
        end
      end
    end
  end
end
